{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e1eaf3bf5e13dd44e98374363c9e4ba4e6b52353a9bd1f3f5a1d8952655479c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2695196",
    "logsBloom": "0x
    "blockHash": "0x71fb94f60c01b926434a039f7ab69055cd1a18c2908650d65f3a59f07fb5b663",
    "transactionHash": "0x9e1eaf3bf5e13dd44e98374363c9e4ba4e6b52353a9bd1f3f5a1d8952655479c",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2695196",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc"
  ],
  "numDeployments": 1,
  "solcInputHash": "3f1530e6cb9cda9422ad0e69f062692b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":777},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2ERC20} from \\\"./interfaces/uniswapV2/IUniswapV2ERC20.sol\\\";\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    string public constant override name = \\\"Uniswap V2\\\";\\n    string public constant override symbol = \\\"UNI-V2\\\";\\n    uint8 public constant override decimals = 18;\\n    uint256 public override totalSupply;\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public override nonces;\\n\\n    constructor() {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint256 value) private {\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 value\\n    ) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"UniswapV2: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xdd9d8d6ee38308e54b4f6e7e70b6392be81e9090c18176e3d90f5384133c86cf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2Factory} from \\\"./interfaces/uniswapV2/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Pair} from \\\"./interfaces/uniswapV2/IUniswapV2Pair.sol\\\";\\nimport {UniswapV2Pair} from \\\"./UniswapV2Pair.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    bytes32 public constant PAIR_HASH =\\n        keccak256(type(UniswapV2Pair).creationCode);\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    constructor(address _feeToSetter) {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external override returns (address pair) {\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1] == address(0),\\n            \\\"UniswapV2: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n\\n        pair = address(\\n            new UniswapV2Pair{\\n                salt: keccak256(abi.encodePacked(token0, token1))\\n            }()\\n        );\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0xd8d26527fd14baa3e06562eaae2643850ea2e9a82b3614267fa890fe741ac76f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2Pair} from \\\"./interfaces/uniswapV2/IUniswapV2Pair.sol\\\";\\nimport {UniswapV2ERC20} from \\\"./UniswapV2ERC20.sol\\\";\\nimport {Math} from \\\"./libraries/uniswapV2/Math.sol\\\";\\nimport {UQ112x112} from \\\"./libraries/uniswapV2/UQ112x112.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport {IUniswapV2Factory} from \\\"./interfaces/uniswapV2/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Callee} from \\\"./interfaces/uniswapV2/IUniswapV2Callee.sol\\\";\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant override MINIMUM_LIQUIDITY = 10 ** 3;\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint256 private price0Predict; // uses single storage slot, accessible via getPredicts\\n    uint256 private price1Predict; // uses single storage slot, accessible via getPredicts\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public override price0CumulativeLast;\\n    uint256 public override price1CumulativeLast;\\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getPredicts(\\n        bool _switch\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256 _price0Predict, uint256 _price1Predict)\\n    {\\n        if (_switch) {\\n            _price0Predict = price0Predict;\\n            _price1Predict = price1Predict;\\n        } else return (0, 0);\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) private {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"UniswapV2: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        price0Predict = 1; // min price prediction\\n        price1Predict = 1;\\n    }\\n\\n    function updateFee(bool _feeOn, uint256 feeAmount) external override lock {\\n        address feeTo = IUniswapV2Factory(factory).feeToSetter();\\n        require(msg.sender == feeTo, \\\"UniswapV2: FORBIDDEN\\\");\\n        if (_feeOn) {\\n            _mint(msg.sender, feeAmount);\\n        } else {\\n            (uint256 _reserve0, uint256 _reserve1) = getPredicts(false); // gas savings\\n            uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n            uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n            _update(\\n                balance0,\\n                balance1,\\n                uint112(_reserve0),\\n                uint112(_reserve1),\\n                false\\n            );\\n        }\\n    }\\n\\n    function updatePredict(\\n        uint256 _predict0,\\n        uint256 _predict1\\n    ) external override lock {\\n        address feeTo = IUniswapV2Factory(factory).feeToSetter();\\n        require(msg.sender == feeTo, \\\"UniswapV2: FORBIDDEN\\\");\\n        price0Predict = _predict0;\\n        price1Predict = _predict1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        bool checkedReserve\\n    ) private {\\n        if (checkedReserve) {\\n            require(\\n                balance0 <= type(uint112).max && balance1 <= type(uint112).max,\\n                \\\"UniswapV2: OVERFLOW\\\"\\n            );\\n\\n            uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n            unchecked {\\n                uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n                if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n                    // * never overflows, and + overflow is desired\\n                    price0CumulativeLast +=\\n                        uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                        timeElapsed;\\n                    price1CumulativeLast +=\\n                        uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                        timeElapsed;\\n                }\\n            }\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n            blockTimestampLast = blockTimestamp;\\n        } else {\\n            // optimistically transfer tokens to factory\\n            uint256 amount0 = balance0 - _reserve0;\\n            if (amount0 > 0) _safeTransfer(token0, msg.sender, amount0);\\n            uint256 amount1 = balance1 - _reserve1;\\n            if (amount1 > 0) _safeTransfer(token1, msg.sender, amount1);\\n        }\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0) * _reserve1);\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply * (rootK - rootKLast);\\n                    uint256 denominator = rootK * 5 + rootKLast;\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(\\n        address to\\n    ) external override lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                (amount0 * _totalSupply) / _reserve0,\\n                (amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1, true);\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(\\n        address to\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1, true);\\n        if (feeOn) kLast = uint256(reserve0) * reserve1; // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external override lock {\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        require(\\n            price0Predict < balance0 - amount0Out &&\\n                price1Predict < balance1 - amount1Out,\\n            \\\"UniswapV2: INSUFFICIENT_PREDICT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0)\\n                IUniswapV2Callee(to).uniswapV2Call(\\n                    msg.sender,\\n                    amount0Out,\\n                    amount1Out,\\n                    data\\n                );\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\\n            ? balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\\n            ? balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\\n            require(\\n                balance0Adjusted * balance1Adjusted >=\\n                    uint256(_reserve0) * _reserve1 * 1e6,\\n                \\\"UniswapV2: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1, true);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20(_token0).balanceOf(address(this)) - reserve0\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20(_token1).balanceOf(address(this)) - reserve1\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external override lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1,\\n            true\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb50ac277c86eed33f3f24a81b5c7799ac5e250f2b00f13d0ffd1c2b9477845a6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x263d9f7f138636c2651a153781d726b2ea81594e13325dd322c312d55224cbba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x77f8f5f00437c1a3c6264b14ce13061d40670ef502c239204a0ed504dee7cf0e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe0601b522703bdc708e1aecd650b0e8d1af06294861be5cdc59e816dea67b60\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x3633dc98b0fa29fdc2d08f8312a099a3ba4bdb46a40b296f1f63daec3a5d9f66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2ERC20} from \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function getPredicts(\\n        bool _switch\\n    ) external view returns (uint256 _price0Predict, uint256 _price1Predict);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    function updateFee(bool _feeOn, uint256 feeAmount) external;\\n\\n    function updatePredict(uint256 _predict0, uint256 _predict1) external;\\n}\\n\",\"keccak256\":\"0x663b0e8223f22993c89136c39b331c8645bfbc6d179072e6a8e3581045ab97af\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/uniswapV2/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33628eeaead802a983581ce141acc785972ac4290a89cb4cd2cfd7d7a786ee08\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/uniswapV2/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    //solhint-disable-next-line state-visibility\\n    uint224 constant Q112 = 2 ** 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x08af2c6a43bcc415700ceb0a3ac8ac4272ac2f228c8397f8f4a188aee4740207\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612ff6380380612ff683398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b612f63806100936000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806364f91c7211610076578063c9c653961161005b578063c9c653961461012d578063e6a4390514610140578063f46901ed1461017457600080fd5b806364f91c7214610110578063a2e74af61461011857600080fd5b8063017e7e58146100a8578063094b7415146100d85780631e3dd18b146100eb578063574f2ba3146100fe575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100bb906001600160a01b031681565b6100bb6100f9366004610609565b610187565b6003545b6040519081526020016100cf565b6101026101b1565b61012b61012636600461063e565b6101de565b005b6100bb61013b366004610660565b61026c565b6100bb61014e366004610660565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61012b61018236600461063e565b610573565b6003818154811061019757600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516101c0602082016105fc565b6020820181038252601f19601f820116604052508051906020012081565b6001546001600160a01b0316331461023d5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e00000000000000000000000060448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316036102cf5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f41444452455353455300006044820152606401610234565b600080836001600160a01b0316856001600160a01b0316106102f25783856102f5565b84845b90925090506001600160a01b0382166103505760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f414444524553530000000000000000006044820152606401610234565b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103c55760405162461bcd60e51b815260206004820152601660248201527f556e697377617056323a20504149525f455849535453000000000000000000006044820152606401610234565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260480160405160208183030381529060405280519060200120604051610410906105fc565b8190604051809103906000f5905080158015610430573d6000803e3d6000fd5b5060405163485cc95560e01b81526001600160a01b03848116600483015283811660248301529194509084169063485cc95590604401600060405180830381600087803b15801561048057600080fd5b505af1158015610494573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526002602081815260408084208787168086529083528185208054978b1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505092915050565b6001546001600160a01b031633146105cd5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e0000000000000000000000006044820152606401610234565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6128c38061069483390190565b60006020828403121561061b57600080fd5b5035919050565b80356001600160a01b038116811461063957600080fd5b919050565b60006020828403121561065057600080fd5b61065982610622565b9392505050565b6000806040838503121561067357600080fd5b61067c83610622565b915061068a60208401610622565b9050925092905056fe60806040526001600f5534801561001557600080fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600355600580546001600160a01b031916331790556127b58061010e6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063ba9a7a56116100a2578063d505accf11610071578063d505accf146104a3578063dd62ed3e146104b6578063e997e6f3146104e1578063fff6cae9146104f457600080fd5b8063ba9a7a5614610461578063bc25cf771461046a578063c45a01551461047d578063d21220a71461049057600080fd5b80637ecebe00116100de5780637ecebe00146103df57806389afcb44146103ff57806395d89b4114610412578063a9059cbb1461044e57600080fd5b806370a08231146103a35780637464fc3d146103c3578063771134b9146103cc57600080fd5b80632c280fb01161017c578063485cc9551161014b578063485cc9551461036b5780635909c0d51461037e5780635a3d5493146103875780636a6278421461039057600080fd5b80632c280fb0146102f957806330adf81f14610321578063313ce567146103485780633644e5151461036257600080fd5b8063095ea7b3116101b8578063095ea7b3146102815780630dfe1681146102a457806318160ddd146102cf57806323b872dd146102e657600080fd5b8063022c0d9f146101df57806306fdde03146101f45780630902f1ac14610246575b600080fd5b6101f26101ed366004612358565b6104fc565b005b6102306040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b60405161023d9190612412565b60405180910390f35b600854600b54604080516001600160701b038085168252600160701b909404909316602084015263ffffffff9091169082015260600161023d565b61029461028f366004612445565b610bc1565b604051901515815260200161023d565b6006546102b7906001600160a01b031681565b6040516001600160a01b03909116815260200161023d565b6102d860005481565b60405190815260200161023d565b6102946102f4366004612471565b610bd8565b61030c6103073660046124c0565b610c52565b6040805192835260208301919091520161023d565b6102d87f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610350601281565b60405160ff909116815260200161023d565b6102d860035481565b6101f26103793660046124dd565b610c73565b6102d8600c5481565b6102d8600d5481565b6102d861039e366004612516565b610d14565b6102d86103b1366004612516565b60016020526000908152604090205481565b6102d8600e5481565b6101f26103da366004612533565b611029565b6102d86103ed366004612516565b60046020526000908152604090205481565b61030c61040d366004612516565b611146565b6102306040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b61029461045c366004612445565b6114f6565b6102d86103e881565b6101f2610478366004612516565b611503565b6005546102b7906001600160a01b031681565b6007546102b7906001600160a01b031681565b6101f26104b1366004612555565b61163a565b6102d86104c43660046124dd565b600260209081526000928352604080842090915290825290205481565b6101f26104ef3660046125cc565b611859565b6101f2611a8c565b600f546001146105475760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064015b60405180910390fd5b6000600f558415158061055a5750600084115b6105b45760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b606482015260840161053e565b6008546001600160701b0380821691600160701b90041681871080156105e25750806001600160701b031686105b6106385760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b606482015260840161053e565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a591906125ea565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071791906125ea565b90506107238983612619565b60095410801561073d57506107388882612619565b600a54105b6107af5760405162461bcd60e51b815260206004820152602660248201527f556e697377617056323a20494e53554646494349454e545f505245444943545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161053e565b6006546007546001600160a01b039182169190811690891682148015906107e85750806001600160a01b0316896001600160a01b031614155b6108345760405162461bcd60e51b815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f0000000000000000000000604482015260640161053e565b8a1561084557610845828a8d611bd6565b891561085657610856818a8c611bd6565b86156108c3576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906108909033908f908f908e908e9060040161262c565b600060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906125ea565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099691906125ea565b92505050600089856001600160701b03166109b19190612619565b83116109be5760006109db565b6109d18a6001600160701b038716612619565b6109db9084612619565b905060006109f28a6001600160701b038716612619565b83116109ff576000610a1c565b610a128a6001600160701b038716612619565b610a1c9084612619565b90506000821180610a2d5750600081115b610a855760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b606482015260840161053e565b6000610a92836003612679565b610a9e866103e8612679565b610aa89190612619565b90506000610ab7836003612679565b610ac3866103e8612679565b610acd9190612619565b9050610ae56001600160701b03808916908a16612679565b610af290620f4240612679565b610afc8284612679565b1015610b4a5760405162461bcd60e51b815260206004820152600c60248201527f556e697377617056323a204b0000000000000000000000000000000000000000604482015260640161053e565b5050610b5a848488886001611cf1565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600f55505050505050505050565b6000610bce338484611f3c565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c3d576001600160a01b038416600090815260026020908152604080832033845290915281208054849290610c37908490612619565b90915550505b610c48848484611f9e565b5060019392505050565b6000808215610c68575050600954600a54915091565b506000928392509050565b6005546001600160a01b03163314610cc45760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161053e565b600680546001600160a01b039384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556007805492909316911617905560016009819055600a55565b6000600f54600114610d5c5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f819055600854600654604080516370a0823160e01b815230600482015290516001600160701b0380851695600160701b9095041693926001600160a01b0316916370a082319160248083019260209291908290030181865afa158015610dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dee91906125ea565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6091906125ea565b90506000610e776001600160701b03861684612619565b90506000610e8e6001600160701b03861684612619565b90506000610e9c878761203f565b60008054919250819003610edd576103e8610ebf610eba8587612679565b61217e565b610ec99190612619565b9850610ed860006103e86121ee565b610f24565b610f216001600160701b038916610ef48387612679565b610efe91906126a6565b6001600160701b038916610f128487612679565b610f1c91906126a6565b612277565b98505b60008911610f9a5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4d494e544544000000000000000000000000000000000000000000000000606482015260840161053e565b610fa48a8a6121ee565b610fb286868a8a6001611cf1565b8115610fdb57600854610fd7906001600160701b03600160701b820481169116612679565b600e555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600f5550949695505050505050565b600f5460011461106f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f8190556005546040805163094b741560e01b815290516001600160a01b039092169163094b7415916004808201926020929091908290030181865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e491906126ba565b9050336001600160a01b038216146111355760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161053e565b50600991909155600a556001600f55565b600080600f5460011461118f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f819055600854600654600754604080516370a0823160e01b815230600482015290516001600160701b0380861696600160701b90960416946001600160a01b0394851694909316929184916370a08231916024808201926020929091908290030181865afa158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d91906125ea565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b91906125ea565b306000908152600160205260408120549192506112b8888861203f565b600054909150806112c98685612679565b6112d391906126a6565b9a50806112e08585612679565b6112ea91906126a6565b995060008b1180156112fc575060008a115b61136e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4255524e4544000000000000000000000000000000000000000000000000606482015260840161053e565b611378308461228f565b611383878d8d611bd6565b61138e868d8c611bd6565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156113d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f691906125ea565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906125ea565b935061147185858b8b6001611cf1565b811561149a57600854611496906001600160701b03600160701b820481169116612679565b600e555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600f81905550915091565b6000610bce338484611f9e565b600f546001146115495760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916115e891849186916001600160701b03169083906370a08231906024015b602060405180830381865afa1580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d991906125ea565b6115e39190612619565b611bd6565b6008546040516370a0823160e01b81523060048201526116309183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401611598565b50506001600f5550565b4284101561168a5760405162461bcd60e51b815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015260640161053e565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876116dd836126d7565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161175692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156117c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117f75750886001600160a01b0316816001600160a01b0316145b6118435760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015260640161053e565b61184e898989611f3c565b505050505050505050565b600f5460011461189f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f8190556005546040805163094b741560e01b815290516001600160a01b039092169163094b7415916004808201926020929091908290030181865afa1580156118f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191491906126ba565b9050336001600160a01b038216146119655760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161053e565b821561197a5761197533836121ee565b611630565b6000806119876000610c52565b6006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc91906125ea565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e91906125ea565b9050611a7e828286866000611cf1565b5050505050506001600f5550565b600f54600114611ad25760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f556006546040516370a0823160e01b8152306004820152611bcf916001600160a01b0316906370a0823190602401602060405180830381865afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4591906125ea565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb191906125ea565b6008546001600160701b0380821691600160701b9004166001611cf1565b6001600f55565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611c3291906126f0565b6000604051808303816000865af19150503d8060008114611c6f576040519150601f19603f3d011682016040523d82523d6000602084013e611c74565b606091505b5091509150818015611c9e575080511580611c9e575080806020019051810190611c9e919061270c565b611cea5760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015260640161053e565b5050505050565b8015611e7b576001600160701b038511801590611d1557506001600160701b038411155b611d615760405162461bcd60e51b815260206004820152601360248201527f556e697377617056323a204f564552464c4f5700000000000000000000000000604482015260640161053e565b6000611d7264010000000042612729565b600b5490915063ffffffff908116820390811615801590611d9b57506001600160701b03851615155b8015611daf57506001600160701b03841615155b15611e1a578063ffffffff16611dd786611dc887612312565b6001600160e01b03169061232b565b600c80546001600160e01b03929092169290920201905563ffffffff8116611e0285611dc888612312565b600d80546001600160e01b0392909216929092020190555b50600880546001600160701b03878116600160701b027fffffffff0000000000000000000000000000000000000000000000000000000090921690891617179055600b805463ffffffff90921663ffffffff19909216919091179055611ee6565b6000611e906001600160701b03851687612619565b90508015611eaf57600654611eaf906001600160a01b03163383611bd6565b6000611ec46001600160701b03851687612619565b90508015611ee357600754611ee3906001600160a01b03163383611bd6565b50505b600854604080516001600160701b038084168252600160701b90930490921660208301527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a15050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526001602052604081208054839290611fc6908490612619565b90915550506001600160a01b03821660009081526001602052604081208054839290611ff390849061273d565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611f9191815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b991906126ba565b600e546001600160a01b03821615801594509192509061216a5780156121655760006120f4610eba6001600160701b03808816908916612679565b905060006121018361217e565b9050808211156121625760006121178284612619565b6000546121249190612679565b9050600082612134856005612679565b61213e919061273d565b9050600061214c82846126a6565b9050801561215e5761215e87826121ee565b5050505b50505b612176565b8015612176576000600e555b505092915050565b600060038211156121df57508060006121986002836126a6565b6121a390600161273d565b90505b818110156121d9579050806002816121be81866126a6565b6121c8919061273d565b6121d291906126a6565b90506121a6565b50919050565b81156121e9575060015b919050565b806000808282546121ff919061273d565b90915550506001600160a01b0382166000908152600160205260408120805483929061222c90849061273d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008183106122865781612288565b825b9392505050565b6001600160a01b038216600090815260016020526040812080548392906122b7908490612619565b92505081905550806000808282546122cf9190612619565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161226b565b6000610bd2600160701b6001600160701b038416612750565b60006122886001600160701b03831684612782565b6001600160a01b038116811461235557600080fd5b50565b60008060008060006080868803121561237057600080fd5b8535945060208601359350604086013561238981612340565b9250606086013567ffffffffffffffff808211156123a657600080fd5b818801915088601f8301126123ba57600080fd5b8135818111156123c957600080fd5b8960208285010111156123db57600080fd5b9699959850939650602001949392505050565b60005b838110156124095781810151838201526020016123f1565b50506000910152565b60208152600082518060208401526124318160408501602087016123ee565b601f01601f19169190910160400192915050565b6000806040838503121561245857600080fd5b823561246381612340565b946020939093013593505050565b60008060006060848603121561248657600080fd5b833561249181612340565b925060208401356124a181612340565b929592945050506040919091013590565b801515811461235557600080fd5b6000602082840312156124d257600080fd5b8135612288816124b2565b600080604083850312156124f057600080fd5b82356124fb81612340565b9150602083013561250b81612340565b809150509250929050565b60006020828403121561252857600080fd5b813561228881612340565b6000806040838503121561254657600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561257057600080fd5b873561257b81612340565b9650602088013561258b81612340565b95506040880135945060608801359350608088013560ff811681146125af57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156125df57600080fd5b8235612463816124b2565b6000602082840312156125fc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bd257610bd2612603565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b8082028115828204841417610bd257610bd2612603565b634e487b7160e01b600052601260045260246000fd5b6000826126b5576126b5612690565b500490565b6000602082840312156126cc57600080fd5b815161228881612340565b6000600182016126e9576126e9612603565b5060010190565b600082516127028184602087016123ee565b9190910192915050565b60006020828403121561271e57600080fd5b8151612288816124b2565b60008261273857612738612690565b500690565b80820180821115610bd257610bd2612603565b6001600160e01b0382811682821681810283169291811582850482141761277957612779612603565b50505092915050565b60006001600160e01b038084168061279c5761279c612690565b9216919091049291505056fea164736f6c6343000811000aa164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c806364f91c7211610076578063c9c653961161005b578063c9c653961461012d578063e6a4390514610140578063f46901ed1461017457600080fd5b806364f91c7214610110578063a2e74af61461011857600080fd5b8063017e7e58146100a8578063094b7415146100d85780631e3dd18b146100eb578063574f2ba3146100fe575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100bb906001600160a01b031681565b6100bb6100f9366004610609565b610187565b6003545b6040519081526020016100cf565b6101026101b1565b61012b61012636600461063e565b6101de565b005b6100bb61013b366004610660565b61026c565b6100bb61014e366004610660565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61012b61018236600461063e565b610573565b6003818154811061019757600080fd5b6000918252602090912001546001600160a01b0316905081565b6040516101c0602082016105fc565b6020820181038252601f19601f820116604052508051906020012081565b6001546001600160a01b0316331461023d5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e00000000000000000000000060448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316036102cf5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f41444452455353455300006044820152606401610234565b600080836001600160a01b0316856001600160a01b0316106102f25783856102f5565b84845b90925090506001600160a01b0382166103505760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f414444524553530000000000000000006044820152606401610234565b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103c55760405162461bcd60e51b815260206004820152601660248201527f556e697377617056323a20504149525f455849535453000000000000000000006044820152606401610234565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260480160405160208183030381529060405280519060200120604051610410906105fc565b8190604051809103906000f5905080158015610430573d6000803e3d6000fd5b5060405163485cc95560e01b81526001600160a01b03848116600483015283811660248301529194509084169063485cc95590604401600060405180830381600087803b15801561048057600080fd5b505af1158015610494573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526002602081815260408084208787168086529083528185208054978b1673ffffffffffffffffffffffffffffffffffffffff1998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505092915050565b6001546001600160a01b031633146105cd5760405162461bcd60e51b815260206004820152601460248201527f556e697377617056323a20464f5242494444454e0000000000000000000000006044820152606401610234565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6128c38061069483390190565b60006020828403121561061b57600080fd5b5035919050565b80356001600160a01b038116811461063957600080fd5b919050565b60006020828403121561065057600080fd5b61065982610622565b9392505050565b6000806040838503121561067357600080fd5b61067c83610622565b915061068a60208401610622565b9050925092905056fe60806040526001600f5534801561001557600080fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600355600580546001600160a01b031916331790556127b58061010e6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063ba9a7a56116100a2578063d505accf11610071578063d505accf146104a3578063dd62ed3e146104b6578063e997e6f3146104e1578063fff6cae9146104f457600080fd5b8063ba9a7a5614610461578063bc25cf771461046a578063c45a01551461047d578063d21220a71461049057600080fd5b80637ecebe00116100de5780637ecebe00146103df57806389afcb44146103ff57806395d89b4114610412578063a9059cbb1461044e57600080fd5b806370a08231146103a35780637464fc3d146103c3578063771134b9146103cc57600080fd5b80632c280fb01161017c578063485cc9551161014b578063485cc9551461036b5780635909c0d51461037e5780635a3d5493146103875780636a6278421461039057600080fd5b80632c280fb0146102f957806330adf81f14610321578063313ce567146103485780633644e5151461036257600080fd5b8063095ea7b3116101b8578063095ea7b3146102815780630dfe1681146102a457806318160ddd146102cf57806323b872dd146102e657600080fd5b8063022c0d9f146101df57806306fdde03146101f45780630902f1ac14610246575b600080fd5b6101f26101ed366004612358565b6104fc565b005b6102306040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b60405161023d9190612412565b60405180910390f35b600854600b54604080516001600160701b038085168252600160701b909404909316602084015263ffffffff9091169082015260600161023d565b61029461028f366004612445565b610bc1565b604051901515815260200161023d565b6006546102b7906001600160a01b031681565b6040516001600160a01b03909116815260200161023d565b6102d860005481565b60405190815260200161023d565b6102946102f4366004612471565b610bd8565b61030c6103073660046124c0565b610c52565b6040805192835260208301919091520161023d565b6102d87f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610350601281565b60405160ff909116815260200161023d565b6102d860035481565b6101f26103793660046124dd565b610c73565b6102d8600c5481565b6102d8600d5481565b6102d861039e366004612516565b610d14565b6102d86103b1366004612516565b60016020526000908152604090205481565b6102d8600e5481565b6101f26103da366004612533565b611029565b6102d86103ed366004612516565b60046020526000908152604090205481565b61030c61040d366004612516565b611146565b6102306040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b61029461045c366004612445565b6114f6565b6102d86103e881565b6101f2610478366004612516565b611503565b6005546102b7906001600160a01b031681565b6007546102b7906001600160a01b031681565b6101f26104b1366004612555565b61163a565b6102d86104c43660046124dd565b600260209081526000928352604080842090915290825290205481565b6101f26104ef3660046125cc565b611859565b6101f2611a8c565b600f546001146105475760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b60448201526064015b60405180910390fd5b6000600f558415158061055a5750600084115b6105b45760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b606482015260840161053e565b6008546001600160701b0380821691600160701b90041681871080156105e25750806001600160701b031686105b6106385760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b606482015260840161053e565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a591906125ea565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071791906125ea565b90506107238983612619565b60095410801561073d57506107388882612619565b600a54105b6107af5760405162461bcd60e51b815260206004820152602660248201527f556e697377617056323a20494e53554646494349454e545f505245444943545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161053e565b6006546007546001600160a01b039182169190811690891682148015906107e85750806001600160a01b0316896001600160a01b031614155b6108345760405162461bcd60e51b815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f0000000000000000000000604482015260640161053e565b8a1561084557610845828a8d611bd6565b891561085657610856818a8c611bd6565b86156108c3576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906108909033908f908f908e908e9060040161262c565b600060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906125ea565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099691906125ea565b92505050600089856001600160701b03166109b19190612619565b83116109be5760006109db565b6109d18a6001600160701b038716612619565b6109db9084612619565b905060006109f28a6001600160701b038716612619565b83116109ff576000610a1c565b610a128a6001600160701b038716612619565b610a1c9084612619565b90506000821180610a2d5750600081115b610a855760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b606482015260840161053e565b6000610a92836003612679565b610a9e866103e8612679565b610aa89190612619565b90506000610ab7836003612679565b610ac3866103e8612679565b610acd9190612619565b9050610ae56001600160701b03808916908a16612679565b610af290620f4240612679565b610afc8284612679565b1015610b4a5760405162461bcd60e51b815260206004820152600c60248201527f556e697377617056323a204b0000000000000000000000000000000000000000604482015260640161053e565b5050610b5a848488886001611cf1565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600f55505050505050505050565b6000610bce338484611f3c565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c3d576001600160a01b038416600090815260026020908152604080832033845290915281208054849290610c37908490612619565b90915550505b610c48848484611f9e565b5060019392505050565b6000808215610c68575050600954600a54915091565b506000928392509050565b6005546001600160a01b03163314610cc45760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161053e565b600680546001600160a01b039384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556007805492909316911617905560016009819055600a55565b6000600f54600114610d5c5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f819055600854600654604080516370a0823160e01b815230600482015290516001600160701b0380851695600160701b9095041693926001600160a01b0316916370a082319160248083019260209291908290030181865afa158015610dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dee91906125ea565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6091906125ea565b90506000610e776001600160701b03861684612619565b90506000610e8e6001600160701b03861684612619565b90506000610e9c878761203f565b60008054919250819003610edd576103e8610ebf610eba8587612679565b61217e565b610ec99190612619565b9850610ed860006103e86121ee565b610f24565b610f216001600160701b038916610ef48387612679565b610efe91906126a6565b6001600160701b038916610f128487612679565b610f1c91906126a6565b612277565b98505b60008911610f9a5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4d494e544544000000000000000000000000000000000000000000000000606482015260840161053e565b610fa48a8a6121ee565b610fb286868a8a6001611cf1565b8115610fdb57600854610fd7906001600160701b03600160701b820481169116612679565b600e555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600f5550949695505050505050565b600f5460011461106f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f8190556005546040805163094b741560e01b815290516001600160a01b039092169163094b7415916004808201926020929091908290030181865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e491906126ba565b9050336001600160a01b038216146111355760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161053e565b50600991909155600a556001600f55565b600080600f5460011461118f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f819055600854600654600754604080516370a0823160e01b815230600482015290516001600160701b0380861696600160701b90960416946001600160a01b0394851694909316929184916370a08231916024808201926020929091908290030181865afa158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d91906125ea565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b91906125ea565b306000908152600160205260408120549192506112b8888861203f565b600054909150806112c98685612679565b6112d391906126a6565b9a50806112e08585612679565b6112ea91906126a6565b995060008b1180156112fc575060008a115b61136e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c4951554944495460448201527f595f4255524e4544000000000000000000000000000000000000000000000000606482015260840161053e565b611378308461228f565b611383878d8d611bd6565b61138e868d8c611bd6565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156113d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f691906125ea565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906125ea565b935061147185858b8b6001611cf1565b811561149a57600854611496906001600160701b03600160701b820481169116612679565b600e555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600f81905550915091565b6000610bce338484611f9e565b600f546001146115495760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916115e891849186916001600160701b03169083906370a08231906024015b602060405180830381865afa1580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d991906125ea565b6115e39190612619565b611bd6565b6008546040516370a0823160e01b81523060048201526116309183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401611598565b50506001600f5550565b4284101561168a5760405162461bcd60e51b815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015260640161053e565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876116dd836126d7565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161175692919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156117c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117f75750886001600160a01b0316816001600160a01b0316145b6118435760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015260640161053e565b61184e898989611f3c565b505050505050505050565b600f5460011461189f5760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f8190556005546040805163094b741560e01b815290516001600160a01b039092169163094b7415916004808201926020929091908290030181865afa1580156118f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191491906126ba565b9050336001600160a01b038216146119655760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015260640161053e565b821561197a5761197533836121ee565b611630565b6000806119876000610c52565b6006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc91906125ea565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e91906125ea565b9050611a7e828286866000611cf1565b5050505050506001600f5550565b600f54600114611ad25760405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015260640161053e565b6000600f556006546040516370a0823160e01b8152306004820152611bcf916001600160a01b0316906370a0823190602401602060405180830381865afa158015611b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4591906125ea565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb191906125ea565b6008546001600160701b0380821691600160701b9004166001611cf1565b6001600f55565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611c3291906126f0565b6000604051808303816000865af19150503d8060008114611c6f576040519150601f19603f3d011682016040523d82523d6000602084013e611c74565b606091505b5091509150818015611c9e575080511580611c9e575080806020019051810190611c9e919061270c565b611cea5760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015260640161053e565b5050505050565b8015611e7b576001600160701b038511801590611d1557506001600160701b038411155b611d615760405162461bcd60e51b815260206004820152601360248201527f556e697377617056323a204f564552464c4f5700000000000000000000000000604482015260640161053e565b6000611d7264010000000042612729565b600b5490915063ffffffff908116820390811615801590611d9b57506001600160701b03851615155b8015611daf57506001600160701b03841615155b15611e1a578063ffffffff16611dd786611dc887612312565b6001600160e01b03169061232b565b600c80546001600160e01b03929092169290920201905563ffffffff8116611e0285611dc888612312565b600d80546001600160e01b0392909216929092020190555b50600880546001600160701b03878116600160701b027fffffffff0000000000000000000000000000000000000000000000000000000090921690891617179055600b805463ffffffff90921663ffffffff19909216919091179055611ee6565b6000611e906001600160701b03851687612619565b90508015611eaf57600654611eaf906001600160a01b03163383611bd6565b6000611ec46001600160701b03851687612619565b90508015611ee357600754611ee3906001600160a01b03163383611bd6565b50505b600854604080516001600160701b038084168252600160701b90930490921660208301527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a15050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526001602052604081208054839290611fc6908490612619565b90915550506001600160a01b03821660009081526001602052604081208054839290611ff390849061273d565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611f9191815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b991906126ba565b600e546001600160a01b03821615801594509192509061216a5780156121655760006120f4610eba6001600160701b03808816908916612679565b905060006121018361217e565b9050808211156121625760006121178284612619565b6000546121249190612679565b9050600082612134856005612679565b61213e919061273d565b9050600061214c82846126a6565b9050801561215e5761215e87826121ee565b5050505b50505b612176565b8015612176576000600e555b505092915050565b600060038211156121df57508060006121986002836126a6565b6121a390600161273d565b90505b818110156121d9579050806002816121be81866126a6565b6121c8919061273d565b6121d291906126a6565b90506121a6565b50919050565b81156121e9575060015b919050565b806000808282546121ff919061273d565b90915550506001600160a01b0382166000908152600160205260408120805483929061222c90849061273d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008183106122865781612288565b825b9392505050565b6001600160a01b038216600090815260016020526040812080548392906122b7908490612619565b92505081905550806000808282546122cf9190612619565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161226b565b6000610bd2600160701b6001600160701b038416612750565b60006122886001600160701b03831684612782565b6001600160a01b038116811461235557600080fd5b50565b60008060008060006080868803121561237057600080fd5b8535945060208601359350604086013561238981612340565b9250606086013567ffffffffffffffff808211156123a657600080fd5b818801915088601f8301126123ba57600080fd5b8135818111156123c957600080fd5b8960208285010111156123db57600080fd5b9699959850939650602001949392505050565b60005b838110156124095781810151838201526020016123f1565b50506000910152565b60208152600082518060208401526124318160408501602087016123ee565b601f01601f19169190910160400192915050565b6000806040838503121561245857600080fd5b823561246381612340565b946020939093013593505050565b60008060006060848603121561248657600080fd5b833561249181612340565b925060208401356124a181612340565b929592945050506040919091013590565b801515811461235557600080fd5b6000602082840312156124d257600080fd5b8135612288816124b2565b600080604083850312156124f057600080fd5b82356124fb81612340565b9150602083013561250b81612340565b809150509250929050565b60006020828403121561252857600080fd5b813561228881612340565b6000806040838503121561254657600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561257057600080fd5b873561257b81612340565b9650602088013561258b81612340565b95506040880135945060608801359350608088013560ff811681146125af57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156125df57600080fd5b8235612463816124b2565b6000602082840312156125fc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bd257610bd2612603565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b8082028115828204841417610bd257610bd2612603565b634e487b7160e01b600052601260045260246000fd5b6000826126b5576126b5612690565b500490565b6000602082840312156126cc57600080fd5b815161228881612340565b6000600182016126e9576126e9612603565b5060010190565b600082516127028184602087016123ee565b9190910192915050565b60006020828403121561271e57600080fd5b8151612288816124b2565b60008261273857612738612690565b500690565b80820180821115610bd257610bd2612603565b6001600160e01b0382811682821681810283169291811582850482141761277957612779612603565b50505092915050565b60006001600160e01b038084168061279c5761279c612690565b9216919091049291505056fea164736f6c6343000811000aa164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7872,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7875,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7882,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 7886,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}