{
  "language": "Solidity",
  "sources": {
    "contracts/libraries/openzeppelin/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.6;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary SafeMath {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(\n        uint256 a,\n        uint256 b\n    ) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(\n        uint256 a,\n        uint256 b\n    ) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(\n        uint256 a,\n        uint256 b\n    ) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(\n        uint256 a,\n        uint256 b\n    ) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(\n        uint256 a,\n        uint256 b\n    ) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(\n        uint256 a,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return\n                result +\n                (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(\n        uint256 value,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return\n                result +\n                (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(\n        uint256 value,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return\n                result +\n                (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(\n        uint256 value,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return\n                result +\n                (\n                    unsignedRoundsUp(rounding) && 1 << (result << 3) < value\n                        ? 1\n                        : 0\n                );\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "contracts/zUSD4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {SafeMath} from \"./libraries/openzeppelin/SafeMath.sol\";\n\ncontract ZetherUSDImplementation {\n    using SafeMath for uint256;\n    bool private initialized = false;\n\n    mapping(address => uint256) internal balances;\n    uint256 internal _totalSupply_;\n    string public constant name = \"Zether USD\";\n    string public constant symbol = \"zUSD\";\n    uint8 public constant decimals = 18;\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    address public owner;\n    address public proposedOwner;\n    bool public paused = false;\n    address public assetProtectionRole;\n    mapping(address => bool) internal frozen;\n\n    address public supplyController;\n\n    address public betaDelegateWhitelister;\n    mapping(address => bool) internal betaDelegateWhitelist;\n    mapping(address => uint256) internal nextSeqs;\n    // EIP191 header for EIP712 prefix\n    string internal constant EIP191_HEADER = \"\\x19\\x01\";\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 internal constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH =\n        keccak256(\"EIP712Domain(string name,address verifyingContract)\");\n    bytes32 internal constant EIP712_DELEGATED_TRANSFER_SCHEMA_HASH =\n        keccak256(\n            \"BetaDelegatedTransfer(address to,uint256 value,uint256 fee,uint256 seq,uint256 deadline)\"\n        );\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    event OwnershipTransferProposed(\n        address indexed currentOwner,\n        address indexed proposedOwner\n    );\n    event OwnershipTransferDisregarded(address indexed oldProposedOwner);\n    event OwnershipTransferred(\n        address indexed oldOwner,\n        address indexed newOwner\n    );\n\n    event Pause();\n    event Unpause();\n\n    event AddressFrozen(address indexed addr);\n    event AddressUnfrozen(address indexed addr);\n    event FrozenAddressWiped(address indexed addr);\n    event AssetProtectionRoleSet(\n        address indexed oldAssetProtectionRole,\n        address indexed newAssetProtectionRole\n    );\n\n    event SupplyIncreased(address indexed to, uint256 value);\n    event SupplyDecreased(address indexed from, uint256 value);\n    event SupplyControllerSet(\n        address indexed oldSupplyController,\n        address indexed newSupplyController\n    );\n\n    event BetaDelegatedTransfer(\n        address indexed from,\n        address indexed to,\n        uint256 value,\n        uint256 seq,\n        uint256 fee\n    );\n    event BetaDelegateWhitelisterSet(\n        address indexed oldWhitelister,\n        address indexed newWhitelister\n    );\n    event BetaDelegateWhitelisted(address indexed newDelegate);\n    event BetaDelegateUnwhitelisted(address indexed oldDelegate);\n\n    /**\n     * @dev sets 0 initials tokens, the owner, and the supplyController.\n     * this serves as the constructor for the proxy but compiles to the\n     * memory model of the Implementation contract.\n     */\n    function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        proposedOwner = address(0);\n        assetProtectionRole = address(0);\n        _totalSupply_ = 0;\n        supplyController = msg.sender;\n        initialized = true;\n    }\n\n    /**\n     * The constructor is used here to ensure that the implementation\n     * contract is initialized. An uncontrolled implementation\n     * contract might lead to misleading state\n     * for users who accidentally interact with it.\n     */\n    constructor() {\n        initialize();\n        initializeDomainSeparator();\n    }\n\n    /**\n     * @dev To be called when upgrading the contract using upgradeAndCall to add delegated transfers\n     */\n    function initializeDomainSeparator() public {\n        // hash the name context with the contract address\n        EIP712_DOMAIN_HASH = keccak256(\n            abi.encode( // solium-disable-line\n                    EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n                    keccak256(bytes(name)),\n                    address(this)\n                )\n        );\n    }\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply_;\n    }\n\n    /**\n     * @dev Transfer token to a specified address from msg.sender\n     * Note: the use of Safemath ensures that _value is nonnegative.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(\n        address _to,\n        uint256 _value\n    ) public whenNotPaused returns (bool) {\n        require(_to != address(0), \"cannot transfer to address zero\");\n        require(!frozen[_to] && !frozen[msg.sender], \"address frozen\");\n        require(_value <= balances[msg.sender], \"insufficient funds\");\n\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _addr The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _addr) public view returns (uint256) {\n        return balances[_addr];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     * @return boolean\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public whenNotPaused returns (bool) {\n        require(_to != address(0), \"cannot transfer to address zero\");\n        require(\n            !frozen[_to] && !frozen[_from] && !frozen[msg.sender],\n            \"address frozen\"\n        );\n        require(_value <= balances[_from], \"insufficient funds\");\n        require(_value <= allowed[_from][msg.sender], \"insufficient allowance\");\n\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     * @return boolean\n     */\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public whenNotPaused returns (bool) {\n        require(!frozen[_spender] && !frozen[msg.sender], \"address frozen\");\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    ) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to begin transferring control of the contract to a proposedOwner\n     * @param _proposedOwner The address to transfer ownership to.\n     */\n    function proposeOwner(address _proposedOwner) public onlyOwner {\n        require(\n            _proposedOwner != address(0),\n            \"cannot transfer ownership to address zero\"\n        );\n        require(msg.sender != _proposedOwner, \"caller already is owner\");\n        proposedOwner = _proposedOwner;\n        emit OwnershipTransferProposed(owner, proposedOwner);\n    }\n\n    /**\n     * @dev Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\n     */\n    function disregardProposeOwner() public {\n        require(\n            msg.sender == proposedOwner || msg.sender == owner,\n            \"only proposedOwner or owner\"\n        );\n        require(\n            proposedOwner != address(0),\n            \"can only disregard a proposed owner that was previously set\"\n        );\n        address _oldProposedOwner = proposedOwner;\n        proposedOwner = address(0);\n        emit OwnershipTransferDisregarded(_oldProposedOwner);\n    }\n\n    /**\n     * @dev Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\n     */\n    function claimOwnership() public {\n        require(msg.sender == proposedOwner, \"onlyProposedOwner\");\n        address _oldOwner = owner;\n        owner = proposedOwner;\n        proposedOwner = address(0);\n        emit OwnershipTransferred(_oldOwner, owner);\n    }\n\n    /**\n     * @dev Reclaim all USDZ at the contract address.\n     * This sends the USDZ tokens that this contract add holding to the owner.\n     * Note: this is not affected by freeze constraints.\n     */\n    function reclaimUSDZ() external onlyOwner {\n        uint256 _balance = balances[address(this)];\n        balances[address(this)] = 0;\n        balances[owner] = balances[owner] + _balance;\n        emit Transfer(address(this), owner, _balance);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"whenNotPaused\");\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner {\n        require(!paused, \"already paused\");\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner {\n        require(paused, \"already unpaused\");\n        paused = false;\n        emit Unpause();\n    }\n\n    /**\n     * @dev Sets a new asset Protection role address.\n     * @param _newAssetProtectionRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\n     */\n    function setAssetProtectionRole(address _newAssetProtectionRole) public {\n        require(\n            msg.sender == assetProtectionRole || msg.sender == owner,\n            \"only assetProtectionRole or Owner\"\n        );\n        emit AssetProtectionRoleSet(\n            assetProtectionRole,\n            _newAssetProtectionRole\n        );\n        assetProtectionRole = _newAssetProtectionRole;\n    }\n\n    modifier onlyAssetProtectionRole() {\n        require(msg.sender == assetProtectionRole, \"onlyAssetProtectionRole\");\n        _;\n    }\n\n    /**\n     * @dev Freezes an address balance from being transferred.\n     * @param _addr The new address to freeze.\n     */\n    function freeze(address _addr) public onlyAssetProtectionRole {\n        require(!frozen[_addr], \"address already frozen\");\n        frozen[_addr] = true;\n        emit AddressFrozen(_addr);\n    }\n\n    /**\n     * @dev Unfreezes an address balance allowing transfer.\n     * @param _addr The new address to unfreeze.\n     */\n    function unfreeze(address _addr) public onlyAssetProtectionRole {\n        require(frozen[_addr], \"address already unfrozen\");\n        frozen[_addr] = false;\n        emit AddressUnfrozen(_addr);\n    }\n\n    /**\n     * @dev Wipes the balance of a frozen address, burning the tokens\n     * and setting the approval to zero.\n     * @param _addr The new frozen address to wipe.\n     */\n    function wipeFrozenAddress(address _addr) public onlyAssetProtectionRole {\n        require(frozen[_addr], \"address is not frozen\");\n        uint256 _balance = balances[_addr];\n        balances[_addr] = 0;\n        _totalSupply_ = _totalSupply_ - _balance;\n        emit FrozenAddressWiped(_addr);\n        emit SupplyDecreased(_addr, _balance);\n        emit Transfer(_addr, address(0), _balance);\n    }\n\n    /**\n     * @dev Gets whether the address is currently frozen.\n     * @param _addr The address to check if frozen.\n     * @return A bool representing whether the given address is frozen.\n     */\n    function isFrozen(address _addr) public view returns (bool) {\n        return frozen[_addr];\n    }\n\n    /**\n     * @dev Sets a new supply controller address.\n     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.\n     */\n    function setSupplyController(address _newSupplyController) public {\n        require(\n            msg.sender == supplyController || msg.sender == owner,\n            \"only SupplyController or Owner\"\n        );\n        require(\n            _newSupplyController != address(0),\n            \"cannot set supply controller to address zero\"\n        );\n        emit SupplyControllerSet(supplyController, _newSupplyController);\n        supplyController = _newSupplyController;\n    }\n\n    modifier onlySupplyController() {\n        require(msg.sender == supplyController, \"onlySupplyController\");\n        _;\n    }\n\n    /**\n     * @dev Increases the total supply by minting the specified number of tokens to the supply controller account.\n     * @param _value The number of tokens to add.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function increaseSupply(\n        uint256 _value\n    ) public onlySupplyController returns (bool) {\n        _totalSupply_ = _totalSupply_ + _value;\n        balances[supplyController] = balances[supplyController] + _value;\n        emit SupplyIncreased(supplyController, _value);\n        emit Transfer(address(0), supplyController, _value);\n        return true;\n    }\n\n    /**\n     * @dev Decreases the total supply by burning the specified number of tokens from the supply controller account.\n     * @param _value The number of tokens to remove.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function decreaseSupply(\n        uint256 _value\n    ) public onlySupplyController returns (bool) {\n        require(_value <= balances[supplyController], \"not enough supply\");\n        balances[supplyController] = balances[supplyController] - _value;\n        _totalSupply_ = _totalSupply_ - _value;\n        emit SupplyDecreased(supplyController, _value);\n        emit Transfer(supplyController, address(0), _value);\n        return true;\n    }\n\n    /**\n     * @dev returns the next seq for a target address.\n     * The transactor must submit nextSeqOf(transactor) in the next transaction for it to be valid.\n     * Note: that the seq context is specific to this smart contract.\n     * @param target The target address.\n     * @return the seq.\n     */\n    //\n    function nextSeqOf(address target) public view returns (uint256) {\n        return nextSeqs[target];\n    }\n\n    /**\n     * @dev Performs a transfer on behalf of the from address, identified by its signature on the delegatedTransfer msg.\n     * Splits a signature byte array into r,s,v for convenience.\n     * @param sig the signature of the delgatedTransfer msg.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     * @param fee an optional ERC20 fee paid to the executor of betaDelegatedTransfer by the from address.\n     * @param seq a sequencing number included by the from address specific to this contract to protect from replays.\n     * @param deadline a block number after which the pre-signed transaction has expired.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function betaDelegatedTransfer(\n        bytes memory sig,\n        address to,\n        uint256 value,\n        uint256 fee,\n        uint256 seq,\n        uint256 deadline\n    ) public returns (bool) {\n        require(sig.length == 65, \"signature should have length 65\");\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        require(\n            _betaDelegatedTransfer(r, s, v, to, value, fee, seq, deadline),\n            \"failed transfer\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Performs a transfer on behalf of the from address, identified by its signature on the betaDelegatedTransfer msg.\n     * Note: both the delegate and transactor sign in the fees. The transactor, however,\n     * has no control over the gas price, and therefore no control over the transaction time.\n     * Beta prefix chosen to avoid a name clash with an emerging standard in ERC865 or elsewhere.\n     * Internal to the contract - see betaDelegatedTransfer and betaDelegatedTransferBatch.\n     * @param r the r signature of the delgatedTransfer msg.\n     * @param s the s signature of the delgatedTransfer msg.\n     * @param v the v signature of the delgatedTransfer msg.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     * @param fee an optional ERC20 fee paid to the delegate of betaDelegatedTransfer by the from address.\n     * @param seq a sequencing number included by the from address specific to this contract to protect from replays.\n     * @param deadline a block number after which the pre-signed transaction has expired.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function _betaDelegatedTransfer(\n        bytes32 r,\n        bytes32 s,\n        uint8 v,\n        address to,\n        uint256 value,\n        uint256 fee,\n        uint256 seq,\n        uint256 deadline\n    ) internal whenNotPaused returns (bool) {\n        require(\n            betaDelegateWhitelist[msg.sender],\n            \"Beta feature only accepts whitelisted delegates\"\n        );\n        require(\n            value > 0 || fee > 0,\n            \"cannot transfer zero tokens with zero fee\"\n        );\n        require(block.number <= deadline, \"transaction expired\");\n        // prevent sig malleability from ecrecover()\n        require(\n            uint256(s) <=\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"signature incorrect\"\n        );\n        require(v == 27 || v == 28, \"signature incorrect\");\n\n        // EIP712 scheme: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md\n        bytes32 delegatedTransferHash = keccak256(\n            abi.encodePacked( // solium-disable-line\n                    EIP712_DELEGATED_TRANSFER_SCHEMA_HASH,\n                    to,\n                    value,\n                    fee,\n                    seq,\n                    deadline //TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n                )\n        );\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                EIP191_HEADER,\n                EIP712_DOMAIN_HASH,\n                delegatedTransferHash\n            )\n        );\n        address _from = ecrecover(hash, v, r, s);\n\n        require(\n            _from != address(0),\n            \"error determining from address from signature\"\n        );\n        require(to != address(0), \"canno use address zero\");\n        require(\n            !frozen[to] && !frozen[_from] && !frozen[msg.sender],\n            \"address frozen\"\n        );\n        require(value + fee <= balances[_from], \"insufficent fund\");\n        require(nextSeqs[_from] == seq, \"incorrect seq\");\n\n        nextSeqs[_from] = nextSeqs[_from] + 1;\n        balances[_from] = balances[_from] - (value + fee);\n\n        if (fee != 0) {\n            balances[msg.sender] = balances[msg.sender] + (fee);\n            emit Transfer(_from, msg.sender, fee);\n        }\n\n        balances[to] = balances[to] + (value);\n        emit Transfer(_from, to, value);\n\n        emit BetaDelegatedTransfer(_from, to, value, seq, fee);\n        return true;\n    }\n\n    /**\n     * @dev Performs an atomic batch of transfers on behalf of the from addresses, identified by their signatures.\n     * Lack of nested array support in arguments requires all arguments to be passed as equal size arrays where\n     * delegated transfer number i is the combination of all arguments at index i\n     * @param r the r signatures of the delgatedTransfer msg.\n     * @param s the s signatures of the delgatedTransfer msg.\n     * @param v the v signatures of the delgatedTransfer msg.\n     * @param to The addresses to transfer to.\n     * @param value The amounts to be transferred.\n     * @param fee optional ERC20 fees paid to the delegate of betaDelegatedTransfer by the from address.\n     * @param seq sequencing numbers included by the from address specific to this contract to protect from replays.\n     * @param deadline block numbers after which the pre-signed transactions have expired.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function betaDelegatedTransferBatch(\n        bytes32[] memory r,\n        bytes32[] memory s,\n        uint8[] memory v,\n        address[] memory to,\n        uint256[] memory value,\n        uint256[] memory fee,\n        uint256[] memory seq,\n        uint256[] memory deadline\n    ) public returns (bool) {\n        require(\n            r.length == s.length &&\n                r.length == v.length &&\n                r.length == to.length &&\n                r.length == value.length,\n            \"length mismatch\"\n        );\n        require(\n            r.length == fee.length &&\n                r.length == seq.length &&\n                r.length == deadline.length,\n            \"length mismatch\"\n        );\n\n        for (uint i = 0; i < r.length; i++) {\n            require(\n                _betaDelegatedTransfer(\n                    r[i],\n                    s[i],\n                    v[i],\n                    to[i],\n                    value[i],\n                    fee[i],\n                    seq[i],\n                    deadline[i]\n                ),\n                \"failed transfer\"\n            );\n        }\n        return true;\n    }\n\n    /**\n     * @dev Gets whether the address is currently whitelisted for betaDelegateTransfer.\n     * @param _addr The address to check if whitelisted.\n     * @return A bool representing whether the given address is whitelisted.\n     */\n    function isWhitelistedBetaDelegate(\n        address _addr\n    ) public view returns (bool) {\n        return betaDelegateWhitelist[_addr];\n    }\n\n    /**\n     * @dev Sets a new betaDelegate whitelister.\n     * @param _newWhitelister The address allowed to whitelist betaDelegates.\n     */\n    function setBetaDelegateWhitelister(address _newWhitelister) public {\n        require(\n            msg.sender == betaDelegateWhitelister || msg.sender == owner,\n            \"only Whitelister or Owner\"\n        );\n        betaDelegateWhitelister = _newWhitelister;\n        emit BetaDelegateWhitelisterSet(\n            betaDelegateWhitelister,\n            _newWhitelister\n        );\n    }\n\n    modifier onlyBetaDelegateWhitelister() {\n        require(\n            msg.sender == betaDelegateWhitelister,\n            \"onlyBetaDelegateWhitelister\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Whitelists an address to allow calling BetaDelegatedTransfer.\n     * @param _addr The new address to whitelist.\n     */\n    function whitelistBetaDelegate(\n        address _addr\n    ) public onlyBetaDelegateWhitelister {\n        require(!betaDelegateWhitelist[_addr], \"delegate already whitelisted\");\n        betaDelegateWhitelist[_addr] = true;\n        emit BetaDelegateWhitelisted(_addr);\n    }\n\n    /**\n     * @dev Unwhitelists an address to disallow calling BetaDelegatedTransfer.\n     * @param _addr The new address to whitelist.\n     */\n    function unwhitelistBetaDelegate(\n        address _addr\n    ) public onlyBetaDelegateWhitelister {\n        require(betaDelegateWhitelist[_addr], \"delegate not whitelisted\");\n        betaDelegateWhitelist[_addr] = false;\n        emit BetaDelegateUnwhitelisted(_addr);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 777
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}