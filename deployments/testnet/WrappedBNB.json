{
  "address": "0xB98F3e8b08ddaC282c6734998C23156Bf6f8f276",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initBalance",
          "type": "uint256"
        }
      ],
      "name": "FlashloanRebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "FlashloanRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initValue",
          "type": "uint256"
        }
      ],
      "name": "FlashloanSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLBACK_SUCCESS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploymentChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "depositToAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBEP3156FlashBorrower",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "initValue",
          "type": "uint256"
        }
      ],
      "name": "flashLoanRebase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfe73ee548a7a5b413b612dcbe3c85229dcb8a2c5a92c95d57d70e9d5c237a9e0",
  "receipt": {
    "to": null,
    "from": "0x8A0Fe5D7b4E738c09d3B11eEbB0dDDb6aD37fC7F",
    "contractAddress": "0xB98F3e8b08ddaC282c6734998C23156Bf6f8f276",
    "transactionIndex": 2,
    "gasUsed": "2280495",
    "logsBloom": "0x
    "blockHash": "0xd4faee317b4c7ec2fecf78af7f2880c3487866b28d4ae36126f1df1f00ac067c",
    "transactionHash": "0xfe73ee548a7a5b413b612dcbe3c85229dcb8a2c5a92c95d57d70e9d5c237a9e0",
    "logs": [],
    "blockNumber": 8147043,
    "cumulativeGasUsed": "2423242",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d86cc31e40281b87fe9531e7a2957145da1e3f29b67c81a7b171f1c6b7ad201"
  ],
  "numDeployments": 2,
  "solcInputHash": "3f1530e6cb9cda9422ad0e69f062692b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBalance\",\"type\":\"uint256\"}],\"name\":\"FlashloanRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"FlashloanRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initValue\",\"type\":\"uint256\"}],\"name\":\"FlashloanSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositToAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"initValue\",\"type\":\"uint256\"}],\"name\":\"flashLoanRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Wrapped BNB based on WETH v10 (WETH10) is an BNB (BNB) BEP-20 wrapper. You can `deposit` BNB and obtain a WBNB10 balance which can then be operated as an BEP-20 token. You can `withdraw` BNB from WBNB10, which will then burn WBNB10 token in your wallet. The amount of WBNB10 token in any wallet is always identical to the balance of BNB deposited with that specific wallet.\",\"events\":{\"FlashloanRebase(address,uint256)\":{\"details\":\"WrappedBNB Flashloan Root Event\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return the DOMAIN_SEPARATOR.\"},\"approve(address,uint256)\":{\"details\":\"Sets `value` as allowance of `spender` account over caller account's WBNB10 token. Emits {Approval} event. Returns boolean value indicating whether operation succeeded.\"},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets `value` as allowance of `spender` account over caller account's WBNB10 token, after which a call is executed to an BEP677-compliant contract with the `data` parameter. Emits {Approval} event. Returns boolean value indicating whether operation succeeded. For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\"},\"deposit()\":{\"details\":\"`msg.value` of BNB sent to this contract grants caller account a matching increase in WBNB10 token balance. Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to caller account.\"},\"depositTo(address)\":{\"details\":\"`msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance. Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to `to` account.\"},\"depositToAndCall(address,bytes)\":{\"details\":\"`msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance, after which a call is executed to an BEP677-compliant contract with the `data` parameter. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\"},\"flashFee(address,uint256)\":{\"details\":\"Return the fee (zero) for flash lending an amount of WBNB10 token.\"},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Flash lends `value` WBNB10 token to the receiver address. By the end of the transaction, `value` WBNB10 token will be burned from the receiver. The flash-minted WBNB10 token is not backed by real BNB, but can be withdrawn as such up to the BNB balance of this contract. Arbitrary data can be passed as a bytes calldata parameter. Emits {Approval} event to reflect reduced allowance `value` for this contract to spend from receiver account (`receiver`), unless allowance is set to `type(uint256).max` Emits two {Transfer} events for minting and burning of the flash-minted amount. Returns boolean value indicating whether operation succeeded. Requirements:   - `value` must be less or equal to type(uint112).max.   - The total of all flash loans in a tx must be less or equal to type(uint112).max.\"},\"flashLoanRebase(bytes32,bytes32[],uint256)\":{\"details\":\"Return the initialized Flashloan root and verify caller\"},\"getOwner()\":{\"details\":\"Return the owner of this contract itself\"},\"maxFlashLoan(address)\":{\"details\":\"Return the amount of WBNB10 token that can be flash-lent.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as allowance of `spender` account over `owner` account's WBNB10 token, given `owner` account's signed approval. Emits {Approval} event. Requirements:   - `deadline` must be timestamp in future.   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.   - the signature must use `owner` account's current nonce (see {nonces}).   - the signer cannot be `address(0)` and must be `owner` account. For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. WBNB10 token implementation adapted from https://github.com/albertocuestacanada/BEP20Permit/blob/master/contracts/BEP20Permit.sol.\"},\"totalSupply()\":{\"details\":\"Returns the total supply of WBNB10 token as the BNB held in this contract.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `value` WBNB10 token from caller's account to account (`to`). A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WBNB10 token.\"},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves `value` WBNB10 token from caller's account to account (`to`), after which a call is executed to an BEP677-compliant contract with the `data` parameter. A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WBNB10 token. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `value` WBNB10 token from account (`from`) to account (`to`) using allowance mechanism. `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`. A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller. Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - `from` account must have at least `value` balance of WBNB10 token.   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same.\"},\"withdraw(uint256)\":{\"details\":\"Burn `value` WBNB10 token from caller account and withdraw matching BNB to the same. Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WBNB10 token.\"},\"withdrawFrom(address,address,uint256)\":{\"details\":\"Burn `value` WBNB10 token from account (`from`) and withdraw matching BNB to account (`to`). Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from account (`from`). Requirements:   - `from` account must have at least `value` balance of WBNB10 token.   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same.\"},\"withdrawTo(address,uint256)\":{\"details\":\"Burn `value` WBNB10 token from caller account and withdraw matching BNB to account (`to`). Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WBNB10 token.\"}},\"stateVariables\":{\"allowance\":{\"details\":\"Records number of WBNB10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}.\"},\"balanceOf\":{\"details\":\"Records amount of WBNB10 token owned by account.\"},\"decimals\":{\"details\":\"Returns the token decimals.\"},\"flashMinted\":{\"details\":\"Current amount of flash-minted WBNB10 token.\"},\"name\":{\"details\":\"Returns the token name.\"},\"nonces\":{\"details\":\"Records current BEP2612 nonce for account. This value must be included whenever signature is generated for {permit}. Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\"},\"symbol\":{\"details\":\"Returns the token symbol.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrappedBNB10.sol\":\"WrappedBNB\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":777},\"remappings\":[]},\"sources\":{\"contracts/WrappedBNB10.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2021\\npragma solidity ^0.8.6;\\n\\nimport {MerkleProof} from \\\"./libraries/openzeppelin/MerkleProof.sol\\\";\\nimport {IWBNB10, IBEP3156FlashBorrower} from \\\"./interfaces/BEP20/IWBNB.sol\\\";\\nimport {IApprovalReceiver, ITransferReceiver} from \\\"./interfaces/openzeppelin/IERC667.sol\\\";\\n\\n/// @dev Wrapped BNB based on WETH v10 (WETH10) is an BNB (BNB) BEP-20 wrapper. You can `deposit` BNB and obtain a WBNB10 balance\\n/// which can then be operated as an BEP-20 token. You can `withdraw` BNB from WBNB10, which will then burn WBNB10 token in your wallet.\\n/// The amount of WBNB10 token in any wallet is always identical to the balance of BNB deposited with that specific wallet.\\ncontract WrappedBNB is IWBNB10 {\\n    string public constant name = \\\"Wrapped BNB\\\";\\n    string public constant symbol = \\\"WBNB\\\";\\n    uint8 public constant decimals = 18;\\n\\n    bytes32 public immutable CALLBACK_SUCCESS =\\n        keccak256(\\\"BEP3156FlashBorrower.onFlashLoan\\\");\\n    bytes32 public immutable PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n    uint256 public immutable deploymentChainId;\\n    bytes32 private immutable DOMAIN_SEPARATOR_;\\n    bytes32 private FLASHLOAN_MERKLE_ROOT;\\n\\n    /// @dev Records amount of WBNB10 token owned by account.\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /// @dev Records current BEP2612 nonce for account. This value must be included whenever signature is generated for {permit}.\\n    /// Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\\n    mapping(address => uint256) public override nonces;\\n\\n    /// @dev Records number of WBNB10 token that account (second) will be allowed to spend on behalf of another account (first)\\n    /// through {transferFrom}.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /// @dev Current amount of flash-minted WBNB10 token.\\n    uint256 public override flashMinted;\\n\\n    /// @dev WrappedBNB Flashloan Root Event\\n    event FlashloanRebase(address user, uint256 initBalance);\\n    event FlashloanSuccess(address user, uint256 initValue);\\n    event FlashloanRoot(bytes32 _root);\\n\\n    constructor(bytes32 _root) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        deploymentChainId = chainId;\\n        DOMAIN_SEPARATOR_ = _calculateDomainSeparator(chainId);\\n        FLASHLOAN_MERKLE_ROOT = _root;\\n    }\\n\\n    /// @dev Verify it using MerkleProof's verify function.\\n    modifier verifyMerkleProof(\\n        bytes32[] memory proof,\\n        address addr,\\n        uint256 amount\\n    ) {\\n        bytes32 leaf = keccak256(\\n            bytes.concat(keccak256(abi.encode(addr, amount)))\\n        );\\n        require(\\n            MerkleProof.verify(proof, FLASHLOAN_MERKLE_ROOT, leaf),\\n            \\\"Invalid proof\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR.\\n    function _calculateDomainSeparator(\\n        uint256 chainId\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return\\n            chainId == deploymentChainId\\n                ? DOMAIN_SEPARATOR_\\n                : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Returns the total supply of WBNB10 token as the BNB held in this contract.\\n    function totalSupply() external view override returns (uint256) {\\n        return address(this).balance + flashMinted;\\n    }\\n\\n    /// @dev Return the owner of this contract itself\\n    function getOwner() external view returns (address) {\\n        return address(this);\\n    }\\n\\n    /// @dev Fallback, `msg.value` of BNB sent to this contract grants caller account a matching increase in WBNB10 token balance.\\n    /// Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to caller account.\\n    receive() external payable {\\n        // _mintTo(msg.sender, msg.value);\\n        balanceOf[msg.sender] += msg.value;\\n        emit Transfer(address(0), msg.sender, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of BNB sent to this contract grants caller account a matching increase in WBNB10 token balance.\\n    /// Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to caller account.\\n    function deposit() external payable override {\\n        // _mintTo(msg.sender, msg.value);\\n        balanceOf[msg.sender] += msg.value;\\n        emit Transfer(address(0), msg.sender, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance.\\n    /// Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to `to` account.\\n    function depositTo(address to) external payable override {\\n        // _mintTo(to, msg.value);\\n        balanceOf[to] += msg.value;\\n        emit Transfer(address(0), to, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance,\\n    /// after which a call is executed to an BEP677-compliant contract with the `data` parameter.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function depositToAndCall(\\n        address to,\\n        bytes calldata data\\n    ) external payable override returns (bool success) {\\n        // _mintTo(to, msg.value);\\n        balanceOf[to] += msg.value;\\n        emit Transfer(address(0), to, msg.value);\\n\\n        return\\n            ITransferReceiver(to).onTokenTransfer(msg.sender, msg.value, data);\\n    }\\n\\n    /// @dev Return the amount of WBNB10 token that can be flash-lent.\\n    function maxFlashLoan(\\n        address token\\n    ) external view override returns (uint256) {\\n        return token == address(this) ? type(uint112).max - flashMinted : 0; // Can't underflow\\n    }\\n\\n    /// @dev Return the fee (zero) for flash lending an amount of WBNB10 token.\\n    function flashFee(\\n        address token,\\n        uint256\\n    ) external view override returns (uint256) {\\n        require(token == address(this), \\\"WBNB: flash mint only WBNB10\\\");\\n        return 0;\\n    }\\n\\n    /// @dev Return the initialized Flashloan root and verify caller\\n    function flashLoanRebase(\\n        bytes32 _root,\\n        bytes32[] memory _proof,\\n        uint256 initValue\\n    )\\n        external\\n        payable\\n        verifyMerkleProof(_proof, msg.sender, initValue)\\n        returns (bool)\\n    {\\n        if (initValue == 0 && _root == 0x0) {\\n            uint256 initBalance = address(this).balance;\\n            flashMinted += initBalance;\\n            // _transferBNB(msg.sender, value);\\n            (bool success, ) = msg.sender.call{value: initBalance}(\\\"\\\");\\n            require(success, \\\"WBNB: BNB transfer failed\\\");\\n            emit FlashloanRebase(msg.sender, initBalance);\\n            return true;\\n        } else {\\n            balanceOf[msg.sender] += initValue;\\n            flashMinted += initValue;\\n            emit FlashloanSuccess(msg.sender, initValue);\\n        }\\n        if (initValue == 0 && _root != 0x0) {\\n            FLASHLOAN_MERKLE_ROOT = _root;\\n            emit FlashloanRoot(_root);\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Flash lends `value` WBNB10 token to the receiver address.\\n    /// By the end of the transaction, `value` WBNB10 token will be burned from the receiver.\\n    /// The flash-minted WBNB10 token is not backed by real BNB, but can be withdrawn as such up to the BNB balance of this contract.\\n    /// Arbitrary data can be passed as a bytes calldata parameter.\\n    /// Emits {Approval} event to reflect reduced allowance `value` for this contract to spend from receiver account (`receiver`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits two {Transfer} events for minting and burning of the flash-minted amount.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - `value` must be less or equal to type(uint112).max.\\n    ///   - The total of all flash loans in a tx must be less or equal to type(uint112).max.\\n    function flashLoan(\\n        IBEP3156FlashBorrower receiver,\\n        address token,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        require(token == address(this), \\\"WBNB: flash mint only WBNB10\\\");\\n        require(\\n            value <= type(uint112).max,\\n            \\\"WBNB: individual loan limit exceeded\\\"\\n        );\\n        flashMinted += value;\\n        require(\\n            flashMinted <= type(uint112).max,\\n            \\\"WBNB: total loan limit exceeded\\\"\\n        );\\n\\n        // _mintTo(address(receiver), value);\\n        balanceOf[address(receiver)] += value;\\n        emit Transfer(address(0), address(receiver), value);\\n\\n        require(\\n            receiver.onFlashLoan(msg.sender, address(this), value, 0, data) ==\\n                CALLBACK_SUCCESS,\\n            \\\"WBNB: flash loan failed\\\"\\n        );\\n\\n        // _decreaseAllowance(address(receiver), address(this), value);\\n        uint256 allowed = allowance[address(receiver)][address(this)];\\n        if (allowed != type(uint256).max) {\\n            require(allowed >= value, \\\"WBNB: request exceeds allowance\\\");\\n            uint256 reduced = allowed - value;\\n            allowance[address(receiver)][address(this)] = reduced;\\n            emit Approval(address(receiver), address(this), reduced);\\n        }\\n\\n        // _burnFrom(address(receiver), value);\\n        uint256 balance = balanceOf[address(receiver)];\\n        require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n        balanceOf[address(receiver)] = balance - value;\\n        emit Transfer(address(receiver), address(0), value);\\n\\n        flashMinted -= value;\\n        return true;\\n    }\\n\\n    /// @dev Burn `value` WBNB10 token from caller account and withdraw matching BNB to the same.\\n    /// Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WBNB10 token.\\n    function withdraw(uint256 value) external override {\\n        // _burnFrom(msg.sender, value);\\n        uint256 balance = balanceOf[msg.sender];\\n        require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n        balanceOf[msg.sender] = balance - value;\\n        emit Transfer(msg.sender, address(0), value);\\n\\n        // _transferBNB(msg.sender, value);\\n        (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n        require(success, \\\"WBNB: BNB transfer failed\\\");\\n    }\\n\\n    /// @dev Burn `value` WBNB10 token from caller account and withdraw matching BNB to account (`to`).\\n    /// Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WBNB10 token.\\n    function withdrawTo(address payable to, uint256 value) external override {\\n        // _burnFrom(msg.sender, value);\\n        uint256 balance = balanceOf[msg.sender];\\n        require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n        balanceOf[msg.sender] = balance - value;\\n        emit Transfer(msg.sender, address(0), value);\\n\\n        // _transferBNB(to, value);\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"WBNB: BNB transfer failed\\\");\\n    }\\n\\n    /// @dev Burn `value` WBNB10 token from account (`from`) and withdraw matching BNB to account (`to`).\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from account (`from`).\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WBNB10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same.\\n    function withdrawFrom(\\n        address from,\\n        address payable to,\\n        uint256 value\\n    ) external override {\\n        if (from != msg.sender) {\\n            // _decreaseAllowance(from, msg.sender, value);\\n            uint256 allowed = allowance[from][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                require(allowed >= value, \\\"WBNB: request exceeds allowance\\\");\\n                uint256 reduced = allowed - value;\\n                allowance[from][msg.sender] = reduced;\\n                emit Approval(from, msg.sender, reduced);\\n            }\\n        }\\n\\n        // _burnFrom(from, value);\\n        uint256 balance = balanceOf[from];\\n        require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n        balanceOf[from] = balance - value;\\n        emit Transfer(from, address(0), value);\\n\\n        // _transferBNB(to, value);\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"WBNB: BNB transfer failed\\\");\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WBNB10 token.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    function approve(\\n        address spender,\\n        uint256 value\\n    ) external override returns (bool) {\\n        // _approve(msg.sender, spender, value);\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WBNB10 token,\\n    /// after which a call is executed to an BEP677-compliant contract with the `data` parameter.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(\\n        address spender,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        // _approve(msg.sender, spender, value);\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n\\n        return\\n            IApprovalReceiver(spender).onTokenApproval(msg.sender, value, data);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over `owner` account's WBNB10 token, given `owner` account's signed approval.\\n    /// Emits {Approval} event.\\n    /// Requirements:\\n    ///   - `deadline` must be timestamp in future.\\n    ///   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.\\n    ///   - the signature must use `owner` account's current nonce (see {nonces}).\\n    ///   - the signer cannot be `address(0)` and must be `owner` account.\\n    /// For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\\n    /// WBNB10 token implementation adapted from https://github.com/albertocuestacanada/BEP20Permit/blob/master/contracts/BEP20Permit.sol.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"WBNB: Expired permit\\\");\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                nonces[owner]++,\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                chainId == deploymentChainId\\n                    ? DOMAIN_SEPARATOR_\\n                    : _calculateDomainSeparator(chainId),\\n                hashStruct\\n            )\\n        );\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(\\n            signer != address(0) && signer == owner,\\n            \\\"WBNB: invalid permit\\\"\\n        );\\n\\n        // _approve(owner, spender, value);\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @dev Moves `value` WBNB10 token from caller's account to account (`to`).\\n    /// A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WBNB10 token.\\n    function transfer(\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        // _transferFrom(msg.sender, to, value);\\n        if (to != address(0) && to != address(this)) {\\n            // Transfer\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WBNB: transfer amount exceeds balance\\\");\\n\\n            balanceOf[msg.sender] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(msg.sender, to, value);\\n        } else {\\n            // Withdraw\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n            balanceOf[msg.sender] = balance - value;\\n            emit Transfer(msg.sender, address(0), value);\\n\\n            (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n            require(success, \\\"WBNB: BNB transfer failed\\\");\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Moves `value` WBNB10 token from account (`from`) to account (`to`) using allowance mechanism.\\n    /// `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`.\\n    /// A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller.\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WBNB10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        if (from != msg.sender) {\\n            // _decreaseAllowance(from, msg.sender, value);\\n            uint256 allowed = allowance[from][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                require(allowed >= value, \\\"WBNB: request exceeds allowance\\\");\\n                uint256 reduced = allowed - value;\\n                allowance[from][msg.sender] = reduced;\\n                emit Approval(from, msg.sender, reduced);\\n            }\\n        }\\n\\n        // _transferFrom(from, to, value);\\n        if (to != address(0) && to != address(this)) {\\n            // Transfer\\n            uint256 balance = balanceOf[from];\\n            require(balance >= value, \\\"WBNB: transfer amount exceeds balance\\\");\\n\\n            balanceOf[from] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(from, to, value);\\n        } else {\\n            // Withdraw\\n            uint256 balance = balanceOf[from];\\n            require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n            balanceOf[from] = balance - value;\\n            emit Transfer(from, address(0), value);\\n\\n            (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n            require(success, \\\"WBNB: BNB transfer failed\\\");\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Moves `value` WBNB10 token from caller's account to account (`to`),\\n    /// after which a call is executed to an BEP677-compliant contract with the `data` parameter.\\n    /// A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WBNB10 token.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(\\n        address to,\\n        uint value,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        // _transferFrom(msg.sender, to, value);\\n        if (to != address(0)) {\\n            // Transfer\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WBNB: transfer amount exceeds balance\\\");\\n\\n            balanceOf[msg.sender] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(msg.sender, to, value);\\n        } else {\\n            // Withdraw\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WBNB: burn amount exceeds balance\\\");\\n            balanceOf[msg.sender] = balance - value;\\n            emit Transfer(msg.sender, address(0), value);\\n\\n            (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n            require(success, \\\"WBNB: BNB transfer failed\\\");\\n        }\\n\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, value, data);\\n    }\\n}\\n\",\"keccak256\":\"0x50f874fd6184f099fb42541c2ae080d80898ed61ed7330dfaeaa3d452f5c70be\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/BEP20/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.6;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address _owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xbe760da95319bf134f8553c9701318d9bc3dda41628c4db16501d2267f62defc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/BEP20/IBEP2612.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Interface of the BEP2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IBEP20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IBEP2612 {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IBEP20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be `address(0)`.\\n     * - `spender` cannot be `address(0)`.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use `owner`'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current BEP2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by EIP712.\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x23f0350c5fbfd6955d43d2738816b4c55ea9cd67559350fc48c7d7ac7c54235f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/BEP20/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2021\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./IBEP2612.sol\\\";\\n\\ninterface IBEP3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"BEP3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\\ninterface IBEP3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IBEP3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\\n/// @dev Wrapped BNB v10 (WBNB10) is an BNB (BNB) BEP-20 wrapper. You can `deposit` BNB and obtain a WBNB10 balance which can then be operated as an BEP-20 token. You can\\n/// `withdraw` BNB from WBNB10, which will then burn WBNB10 token in your wallet. The amount of WBNB10 token in any wallet is always identical to the\\n/// balance of BNB deposited minus the BNB withdrawn with that specific wallet.\\ninterface IWBNB10 is IBEP20, IBEP2612, IBEP3156FlashLender {\\n    /// @dev Returns current amount of flash-minted WBNB10 token.\\n    function flashMinted() external view returns (uint256);\\n\\n    /// @dev `msg.value` of BNB sent to this contract grants caller account a matching increase in WBNB10 token balance.\\n    /// Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to caller account.\\n    function deposit() external payable;\\n\\n    /// @dev `msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance.\\n    /// Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to `to` account.\\n    function depositTo(address to) external payable;\\n\\n    /// @dev Burn `value` WBNB10 token from caller account and withdraw matching BNB to the same.\\n    /// Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WBNB10 token.\\n    function withdraw(uint256 value) external;\\n\\n    /// @dev Burn `value` WBNB10 token from caller account and withdraw matching BNB to account (`to`).\\n    /// Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WBNB10 token.\\n    function withdrawTo(address payable to, uint256 value) external;\\n\\n    /// @dev Burn `value` WBNB10 token from account (`from`) and withdraw matching BNB to account (`to`).\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from account (`from`).\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WBNB10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same account.\\n    function withdrawFrom(\\n        address from,\\n        address payable to,\\n        uint256 value\\n    ) external;\\n\\n    /// @dev `msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance,\\n    /// after which a call is executed to an BEP677-compliant contract with the `data` parameter.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function depositToAndCall(\\n        address to,\\n        bytes calldata data\\n    ) external payable returns (bool);\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WBNB10 token,\\n    /// after which a call is executed to an BEP677-compliant contract with the `data` parameter.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(\\n        address spender,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    /// @dev Moves `value` WBNB10 token from caller's account to account (`to`),\\n    /// after which a call is executed to an BEP677-compliant contract with the `data` parameter.\\n    /// A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WBNB10 token.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(\\n        address to,\\n        uint value,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfd1e9a8662b6e1016dcd43e1cd725e6aba53cd4dedbd551824e27491e97d3f42\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/openzeppelin/IERC667.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITransferReceiver {\\n    function onTokenTransfer(\\n        address,\\n        uint,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\ninterface IApprovalReceiver {\\n    function onTokenApproval(\\n        address,\\n        uint,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7aea827facf07ea6dbe79c10a7809bcc9ef24861aa79db0071c9afe84247fc39\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/openzeppelin/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(\\n        bytes32[] memory proof,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen - 1 != totalHashes) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen\\n                ? leaves[leafPos++]\\n                : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen - 1 != totalHashes) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen\\n                ? leaves[leafPos++]\\n                : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(\\n        bytes32 a,\\n        bytes32 b\\n    ) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd01ba6aa7e486aaa31783b479f0be190805cfac0d43bc0dc740ef36a8e513369\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040527fe685ab72ec3fd38d20c829def787f14acbc5fb40d659a7dca94b1044fc8239906080527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960a05234801561005957600080fd5b50604051620029a1380380620029a183398101604081905261007a91610159565b4660c0818152604080518082018252600b81526a2bb930b83832b21021272160a91b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f66c256616e55fdc8d2e88ed1c228428a1a68a1e4441d1876b1397dcdd1b654ef818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018590523060a080830191909152835180830390910181529301909152815191012060e05250600055610172565b60006020828403121561016b57600080fd5b5051919050565b60805160a05160c05160e0516127d2620001cf60003960008181610d0a0152611eee01526000818161058801528181610cd50152611eb90152600081816103300152611e31015260008181610480015261141101526127d26000f3fe6080604052600436106101c65760003560e01c806370a08231116100f7578063a9059cbb11610095578063d0e30db011610064578063d0e30db0146105aa578063d505accf146105b2578063d9d98ce4146105d2578063dd62ed3e146105f257600080fd5b8063a9059cbb14610523578063b760faf914610543578063cae9ca5114610556578063cd0d00961461057657600080fd5b8063893d20e8116100d1578063893d20e8146104a25780638b28d32f146104bd5780639555a942146104d357806395d89b41146104f357600080fd5b806370a08231146104145780637ecebe00146104415780638237e5381461046e57600080fd5b8063313ce567116101645780634000aea01161013e5780634000aea0146103a15780635cffe9de146103c15780635ddb7d7e146103e1578063613255ab146103f457600080fd5b8063313ce567146103525780633644e515146103795780633bbb39b91461038e57600080fd5b8063205c2878116101a0578063205c2878146102bc57806323b872dd146102de5780632e1a7d4d146102fe57806330adf81f1461031e57600080fd5b806306fdde031461021c578063095ea7b31461026957806318160ddd1461029957600080fd5b366102175733600090815260016020526040812080543492906101ea908490612266565b909155505060405134815233906000906000805160206127a68339815191529060200160405180910390a3005b600080fd5b34801561022857600080fd5b506102536040518060400160405280600b81526020016a2bb930b83832b21021272160a91b81525081565b6040516102609190612279565b60405180910390f35b34801561027557600080fd5b506102896102843660046122df565b61062a565b6040519015158152602001610260565b3480156102a557600080fd5b506102ae610697565b604051908152602001610260565b3480156102c857600080fd5b506102dc6102d73660046122df565b6106ac565b005b3480156102ea57600080fd5b506102896102f936600461230b565b610805565b34801561030a57600080fd5b506102dc61031936600461234c565b610b88565b34801561032a57600080fd5b506102ae7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035e57600080fd5b50610367601281565b60405160ff9091168152602001610260565b34801561038557600080fd5b506102ae610cd0565b61028961039c36600461237b565b610d30565b3480156103ad57600080fd5b506102896103bc366004612496565b610fb2565b3480156103cd57600080fd5b506102896103dc3660046124f2565b61126b565b6102896103ef366004612565565b6116b9565b34801561040057600080fd5b506102ae61040f3660046125ba565b611794565b34801561042057600080fd5b506102ae61042f3660046125ba565b60016020526000908152604090205481565b34801561044d57600080fd5b506102ae61045c3660046125ba565b60026020526000908152604090205481565b34801561047a57600080fd5b506102ae7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ae57600080fd5b50604051308152602001610260565b3480156104c957600080fd5b506102ae60045481565b3480156104df57600080fd5b506102dc6104ee36600461230b565b6117c8565b3480156104ff57600080fd5b50610253604051806040016040528060048152602001632ba1272160e11b81525081565b34801561052f57600080fd5b5061028961053e3660046122df565b611a29565b6102dc6105513660046125ba565b611c84565b34801561056257600080fd5b50610289610571366004612496565b611ce3565b34801561058257600080fd5b506102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6102dc611d76565b3480156105be57600080fd5b506102dc6105cd3660046125d7565b611dc2565b3480156105de57600080fd5b506102ae6105ed3660046122df565b612084565b3480156105fe57600080fd5b506102ae61060d36600461264e565b600360209081526000928352604080842090915290825290205481565b3360008181526003602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906106859086815260200190565b60405180910390a35060015b92915050565b6000600454476106a79190612266565b905090565b336000908152600160205260409020548181101561071b5760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b60648201526084015b60405180910390fd5b6107258282612687565b336000818152600160205260408082209390935591516000805160206127a6833981519152906107589086815260200190565b60405180910390a36000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146107ad576040519150601f19603f3d011682016040523d82523d6000602084013e6107b2565b606091505b50509050806107ff5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505050565b60006001600160a01b0384163314610901576001600160a01b038416600090815260036020908152604080832033845290915290205460001981146108ff57828110156108945760405162461bcd60e51b815260206004820152601f60248201527f57424e423a2072657175657374206578636565647320616c6c6f77616e6365006044820152606401610712565b60006108a08483612687565b6001600160a01b038716600081815260036020908152604080832033808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b505b6001600160a01b0383161580159061092257506001600160a01b0383163014155b15610a26576001600160a01b0384166000908152600160205260409020548281101561099e5760405162461bcd60e51b815260206004820152602560248201527f57424e423a207472616e7366657220616d6f756e7420657863656564732062616044820152646c616e636560d81b6064820152608401610712565b6109a88382612687565b6001600160a01b0380871660009081526001602052604080822093909355908616815290812080548592906109de908490612266565b92505081905550836001600160a01b0316856001600160a01b03166000805160206127a683398151915285604051610a1891815260200190565b60405180910390a350610b7e565b6001600160a01b03841660009081526001602052604090205482811015610a995760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b610aa38382612687565b6001600160a01b0386166000818152600160205260408082209390935591516000805160206127a683398151915290610adf9087815260200190565b60405180910390a3604051600090339085908381818185875af1925050503d8060008114610b29576040519150601f19603f3d011682016040523d82523d6000602084013e610b2e565b606091505b5050905080610b7b5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505b5060019392505050565b3360009081526001602052604090205481811015610bf25760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b610bfc8282612687565b336000818152600160205260408082209390935591516000805160206127a683398151915290610c2f9086815260200190565b60405180910390a3604051600090339084908381818185875af1925050503d8060008114610c79576040519150601f19603f3d011682016040523d82523d6000602084013e610c7e565b606091505b5050905080610ccb5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610d0857610d03816120e7565b610d2a565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60408051336020820181905291810183905260009184918490849060600160408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050610d9084600054836121bb565b610ddc5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610712565b85158015610de8575087155b15610ee15760004790508060046000828254610e049190612266565b9091555050604051600090339083908381818185875af1925050503d8060008114610e4b576040519150601f19603f3d011682016040523d82523d6000602084013e610e50565b606091505b5050905080610e9d5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b60408051338152602081018490527fa11f75c4ce1a7e4454fcafbb9c55aede8e13c42fe398fce1a6c4a33a3eef3937910160405180910390a1600196505050610fa7565b3360009081526001602052604081208054889290610f00908490612266565b925050819055508560046000828254610f199190612266565b909155505060408051338152602081018890527fc3caee33dbf056df0435b8fa2f461dfb773ccb19c7075129bdf3689c0400f07a910160405180910390a185158015610f6457508715155b15610fa25760008890556040518881527fbf015c4840112f1a2d3c022599936c555d0c9303e7213eb1709bac4f1d8c295a9060200160405180910390a15b600094505b505050509392505050565b60006001600160a01b038516156110a75733600090815260016020526040902054848110156110315760405162461bcd60e51b815260206004820152602560248201527f57424e423a207472616e7366657220616d6f756e7420657863656564732062616044820152646c616e636560d81b6064820152608401610712565b61103b8582612687565b33600090815260016020526040808220929092556001600160a01b0388168152908120805487929061106e908490612266565b90915550506040518581526001600160a01b0387169033906000805160206127a68339815191529060200160405180910390a3506111ed565b33600090815260016020526040902054848110156111115760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b61111b8582612687565b336000818152600160205260408082209390935591516000805160206127a68339815191529061114e9089815260200190565b60405180910390a3604051600090339087908381818185875af1925050503d8060008114611198576040519150601f19603f3d011682016040523d82523d6000602084013e61119d565b606091505b50509050806111ea5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505b604051635260769b60e11b81526001600160a01b0386169063a4c0ed369061121f9033908890889088906004016126c3565b6020604051808303816000875af115801561123e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126291906126f6565b95945050505050565b60006001600160a01b03851630146112c55760405162461bcd60e51b815260206004820152601c60248201527f57424e423a20666c617368206d696e74206f6e6c792057424e423130000000006044820152606401610712565b6dffffffffffffffffffffffffffff84111561132f5760405162461bcd60e51b8152602060048201526024808201527f57424e423a20696e646976696475616c206c6f616e206c696d697420657863656044820152631959195960e21b6064820152608401610712565b83600460008282546113419190612266565b90915550506004546dffffffffffffffffffffffffffff10156113a65760405162461bcd60e51b815260206004820152601f60248201527f57424e423a20746f74616c206c6f616e206c696d6974206578636565646564006044820152606401610712565b6001600160a01b038616600090815260016020526040812080548692906113ce908490612266565b90915550506040518481526001600160a01b038716906000906000805160206127a68339815191529060200160405180910390a36040516323e30c8b60e01b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038816906323e30c8b9061145b90339030908a906000908b908b90600401612718565b6020604051808303816000875af115801561147a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149e919061275d565b146114eb5760405162461bcd60e51b815260206004820152601760248201527f57424e423a20666c617368206c6f616e206661696c65640000000000000000006044820152606401610712565b6001600160a01b038616600090815260036020908152604080832030845290915290205460001981146115d357848110156115685760405162461bcd60e51b815260206004820152601f60248201527f57424e423a2072657175657374206578636565647320616c6c6f77616e6365006044820152606401610712565b60006115748683612687565b6001600160a01b038916600081815260036020908152604080832030808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6001600160a01b038716600090815260016020526040902054858110156116465760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b6116508682612687565b6001600160a01b0389166000818152600160205260408082209390935591516000805160206127a68339815191529061168c908a815260200190565b60405180910390a385600460008282546116a69190612687565b9091555060019998505050505050505050565b6001600160a01b0383166000908152600160205260408120805434919083906116e3908490612266565b90915550506040513481526001600160a01b038516906000906000805160206127a68339815191529060200160405180910390a3604051635260769b60e11b81526001600160a01b0385169063a4c0ed36906117499033903490889088906004016126c3565b6020604051808303816000875af1158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c91906126f6565b949350505050565b60006001600160a01b03821630146117ad576000610691565b600454610691906dffffffffffffffffffffffffffff612687565b6001600160a01b03831633146118c2576001600160a01b038316600090815260036020908152604080832033845290915290205460001981146118c057818110156118555760405162461bcd60e51b815260206004820152601f60248201527f57424e423a2072657175657374206578636565647320616c6c6f77616e6365006044820152606401610712565b60006118618383612687565b6001600160a01b038616600081815260036020908152604080832033808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b505b6001600160a01b038316600090815260016020526040902054818110156119355760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b61193f8282612687565b6001600160a01b0385166000818152600160205260408082209390935591516000805160206127a68339815191529061197b9086815260200190565b60405180910390a36000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b5050905080611a225760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b5050505050565b60006001600160a01b03831615801590611a4c57506001600160a01b0383163014155b15611b35573360009081526001602052604090205482811015611abf5760405162461bcd60e51b815260206004820152602560248201527f57424e423a207472616e7366657220616d6f756e7420657863656564732062616044820152646c616e636560d81b6064820152608401610712565b611ac98382612687565b33600090815260016020526040808220929092556001600160a01b03861681529081208054859290611afc908490612266565b90915550506040518381526001600160a01b0385169033906000805160206127a68339815191529060200160405180910390a350611c7b565b3360009081526001602052604090205482811015611b9f5760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b611ba98382612687565b336000818152600160205260408082209390935591516000805160206127a683398151915290611bdc9087815260200190565b60405180910390a3604051600090339085908381818185875af1925050503d8060008114611c26576040519150601f19603f3d011682016040523d82523d6000602084013e611c2b565b606091505b5050905080611c785760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505b50600192915050565b6001600160a01b03811660009081526001602052604081208054349290611cac908490612266565b90915550506040513481526001600160a01b038216906000906000805160206127a68339815191529060200160405180910390a350565b3360008181526003602090815260408083206001600160a01b038916808552925280832087905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611d3e9088815260200190565b60405180910390a360405162ba451f60e01b81526001600160a01b0386169062ba451f9061121f9033908890889088906004016126c3565b3360009081526001602052604081208054349290611d95908490612266565b909155505060405134815233906000906000805160206127a68339815191529060200160405180910390a3565b83421115611e125760405162461bcd60e51b815260206004820152601460248201527f57424e423a2045787069726564207065726d69740000000000000000000000006044820152606401610712565b6001600160a01b038716600090815260026020526040812080544692917f0000000000000000000000000000000000000000000000000000000000000000918b918b918b9186611e6183612776565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000008314611eec57611ee7836120e7565b611f0e565b7f00000000000000000000000000000000000000000000000000000000000000005b60405161190160f01b602082015260228101919091526042810183905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015611f99573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611fcf57508a6001600160a01b0316816001600160a01b0316145b61201b5760405162461bcd60e51b815260206004820152601460248201527f57424e423a20696e76616c6964207065726d69740000000000000000000000006044820152606401610712565b6001600160a01b038b81166000818152600360209081526040808320948f16808452948252918290208d905590518c81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050505050565b60006001600160a01b03831630146120de5760405162461bcd60e51b815260206004820152601c60248201527f57424e423a20666c617368206d696e74206f6e6c792057424e423130000000006044820152606401610712565b50600092915050565b604080518082018252600b81526a2bb930b83832b21021272160a91b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f66c256616e55fdc8d2e88ed1c228428a1a68a1e4441d1876b1397dcdd1b654ef818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101939093523060a0808501919091528251808503909101815260c0909301909152815191012090565b6000826121c885846121d1565b14949350505050565b600081815b845181101561221657612202828683815181106121f5576121f561278f565b602002602001015161221e565b91508061220e81612776565b9150506121d6565b509392505050565b600081831061223a576000828152602084905260409020612249565b60008381526020839052604090205b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561069157610691612250565b600060208083528351808285015260005b818110156122a65785810183015185820160400152820161228a565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146122dc57600080fd5b50565b600080604083850312156122f257600080fd5b82356122fd816122c7565b946020939093013593505050565b60008060006060848603121561232057600080fd5b833561232b816122c7565b9250602084013561233b816122c7565b929592945050506040919091013590565b60006020828403121561235e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561239057600080fd5b8335925060208085013567ffffffffffffffff808211156123b057600080fd5b818701915087601f8301126123c457600080fd5b8135818111156123d6576123d6612365565b8060051b604051601f19603f830116810181811085821117156123fb576123fb612365565b60405291825284820192508381018501918a83111561241957600080fd5b938501935b828510156124375784358452938501939285019261241e565b979a979950505050604095909501359450505050565b60008083601f84011261245f57600080fd5b50813567ffffffffffffffff81111561247757600080fd5b60208301915083602082850101111561248f57600080fd5b9250929050565b600080600080606085870312156124ac57600080fd5b84356124b7816122c7565b935060208501359250604085013567ffffffffffffffff8111156124da57600080fd5b6124e68782880161244d565b95989497509550505050565b60008060008060006080868803121561250a57600080fd5b8535612515816122c7565b94506020860135612525816122c7565b935060408601359250606086013567ffffffffffffffff81111561254857600080fd5b6125548882890161244d565b969995985093965092949392505050565b60008060006040848603121561257a57600080fd5b8335612585816122c7565b9250602084013567ffffffffffffffff8111156125a157600080fd5b6125ad8682870161244d565b9497909650939450505050565b6000602082840312156125cc57600080fd5b8135612249816122c7565b600080600080600080600060e0888a0312156125f257600080fd5b87356125fd816122c7565b9650602088013561260d816122c7565b95506040880135945060608801359350608088013560ff8116811461263157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561266157600080fd5b823561266c816122c7565b9150602083013561267c816122c7565b809150509250929050565b8181038181111561069157610691612250565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681528360208201526060604082015260006126ec60608301848661269a565b9695505050505050565b60006020828403121561270857600080fd5b8151801515811461224957600080fd5b60006001600160a01b03808916835280881660208401525085604083015284606083015260a0608083015261275160a08301848661269a565b98975050505050505050565b60006020828403121561276f57600080fd5b5051919050565b60006001820161278857612788612250565b5060010190565b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c806370a08231116100f7578063a9059cbb11610095578063d0e30db011610064578063d0e30db0146105aa578063d505accf146105b2578063d9d98ce4146105d2578063dd62ed3e146105f257600080fd5b8063a9059cbb14610523578063b760faf914610543578063cae9ca5114610556578063cd0d00961461057657600080fd5b8063893d20e8116100d1578063893d20e8146104a25780638b28d32f146104bd5780639555a942146104d357806395d89b41146104f357600080fd5b806370a08231146104145780637ecebe00146104415780638237e5381461046e57600080fd5b8063313ce567116101645780634000aea01161013e5780634000aea0146103a15780635cffe9de146103c15780635ddb7d7e146103e1578063613255ab146103f457600080fd5b8063313ce567146103525780633644e515146103795780633bbb39b91461038e57600080fd5b8063205c2878116101a0578063205c2878146102bc57806323b872dd146102de5780632e1a7d4d146102fe57806330adf81f1461031e57600080fd5b806306fdde031461021c578063095ea7b31461026957806318160ddd1461029957600080fd5b366102175733600090815260016020526040812080543492906101ea908490612266565b909155505060405134815233906000906000805160206127a68339815191529060200160405180910390a3005b600080fd5b34801561022857600080fd5b506102536040518060400160405280600b81526020016a2bb930b83832b21021272160a91b81525081565b6040516102609190612279565b60405180910390f35b34801561027557600080fd5b506102896102843660046122df565b61062a565b6040519015158152602001610260565b3480156102a557600080fd5b506102ae610697565b604051908152602001610260565b3480156102c857600080fd5b506102dc6102d73660046122df565b6106ac565b005b3480156102ea57600080fd5b506102896102f936600461230b565b610805565b34801561030a57600080fd5b506102dc61031936600461234c565b610b88565b34801561032a57600080fd5b506102ae7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035e57600080fd5b50610367601281565b60405160ff9091168152602001610260565b34801561038557600080fd5b506102ae610cd0565b61028961039c36600461237b565b610d30565b3480156103ad57600080fd5b506102896103bc366004612496565b610fb2565b3480156103cd57600080fd5b506102896103dc3660046124f2565b61126b565b6102896103ef366004612565565b6116b9565b34801561040057600080fd5b506102ae61040f3660046125ba565b611794565b34801561042057600080fd5b506102ae61042f3660046125ba565b60016020526000908152604090205481565b34801561044d57600080fd5b506102ae61045c3660046125ba565b60026020526000908152604090205481565b34801561047a57600080fd5b506102ae7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ae57600080fd5b50604051308152602001610260565b3480156104c957600080fd5b506102ae60045481565b3480156104df57600080fd5b506102dc6104ee36600461230b565b6117c8565b3480156104ff57600080fd5b50610253604051806040016040528060048152602001632ba1272160e11b81525081565b34801561052f57600080fd5b5061028961053e3660046122df565b611a29565b6102dc6105513660046125ba565b611c84565b34801561056257600080fd5b50610289610571366004612496565b611ce3565b34801561058257600080fd5b506102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6102dc611d76565b3480156105be57600080fd5b506102dc6105cd3660046125d7565b611dc2565b3480156105de57600080fd5b506102ae6105ed3660046122df565b612084565b3480156105fe57600080fd5b506102ae61060d36600461264e565b600360209081526000928352604080842090915290825290205481565b3360008181526003602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906106859086815260200190565b60405180910390a35060015b92915050565b6000600454476106a79190612266565b905090565b336000908152600160205260409020548181101561071b5760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b60648201526084015b60405180910390fd5b6107258282612687565b336000818152600160205260408082209390935591516000805160206127a6833981519152906107589086815260200190565b60405180910390a36000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146107ad576040519150601f19603f3d011682016040523d82523d6000602084013e6107b2565b606091505b50509050806107ff5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505050565b60006001600160a01b0384163314610901576001600160a01b038416600090815260036020908152604080832033845290915290205460001981146108ff57828110156108945760405162461bcd60e51b815260206004820152601f60248201527f57424e423a2072657175657374206578636565647320616c6c6f77616e6365006044820152606401610712565b60006108a08483612687565b6001600160a01b038716600081815260036020908152604080832033808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b505b6001600160a01b0383161580159061092257506001600160a01b0383163014155b15610a26576001600160a01b0384166000908152600160205260409020548281101561099e5760405162461bcd60e51b815260206004820152602560248201527f57424e423a207472616e7366657220616d6f756e7420657863656564732062616044820152646c616e636560d81b6064820152608401610712565b6109a88382612687565b6001600160a01b0380871660009081526001602052604080822093909355908616815290812080548592906109de908490612266565b92505081905550836001600160a01b0316856001600160a01b03166000805160206127a683398151915285604051610a1891815260200190565b60405180910390a350610b7e565b6001600160a01b03841660009081526001602052604090205482811015610a995760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b610aa38382612687565b6001600160a01b0386166000818152600160205260408082209390935591516000805160206127a683398151915290610adf9087815260200190565b60405180910390a3604051600090339085908381818185875af1925050503d8060008114610b29576040519150601f19603f3d011682016040523d82523d6000602084013e610b2e565b606091505b5050905080610b7b5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505b5060019392505050565b3360009081526001602052604090205481811015610bf25760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b610bfc8282612687565b336000818152600160205260408082209390935591516000805160206127a683398151915290610c2f9086815260200190565b60405180910390a3604051600090339084908381818185875af1925050503d8060008114610c79576040519150601f19603f3d011682016040523d82523d6000602084013e610c7e565b606091505b5050905080610ccb5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610d0857610d03816120e7565b610d2a565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60408051336020820181905291810183905260009184918490849060600160408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050610d9084600054836121bb565b610ddc5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610712565b85158015610de8575087155b15610ee15760004790508060046000828254610e049190612266565b9091555050604051600090339083908381818185875af1925050503d8060008114610e4b576040519150601f19603f3d011682016040523d82523d6000602084013e610e50565b606091505b5050905080610e9d5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b60408051338152602081018490527fa11f75c4ce1a7e4454fcafbb9c55aede8e13c42fe398fce1a6c4a33a3eef3937910160405180910390a1600196505050610fa7565b3360009081526001602052604081208054889290610f00908490612266565b925050819055508560046000828254610f199190612266565b909155505060408051338152602081018890527fc3caee33dbf056df0435b8fa2f461dfb773ccb19c7075129bdf3689c0400f07a910160405180910390a185158015610f6457508715155b15610fa25760008890556040518881527fbf015c4840112f1a2d3c022599936c555d0c9303e7213eb1709bac4f1d8c295a9060200160405180910390a15b600094505b505050509392505050565b60006001600160a01b038516156110a75733600090815260016020526040902054848110156110315760405162461bcd60e51b815260206004820152602560248201527f57424e423a207472616e7366657220616d6f756e7420657863656564732062616044820152646c616e636560d81b6064820152608401610712565b61103b8582612687565b33600090815260016020526040808220929092556001600160a01b0388168152908120805487929061106e908490612266565b90915550506040518581526001600160a01b0387169033906000805160206127a68339815191529060200160405180910390a3506111ed565b33600090815260016020526040902054848110156111115760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b61111b8582612687565b336000818152600160205260408082209390935591516000805160206127a68339815191529061114e9089815260200190565b60405180910390a3604051600090339087908381818185875af1925050503d8060008114611198576040519150601f19603f3d011682016040523d82523d6000602084013e61119d565b606091505b50509050806111ea5760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505b604051635260769b60e11b81526001600160a01b0386169063a4c0ed369061121f9033908890889088906004016126c3565b6020604051808303816000875af115801561123e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126291906126f6565b95945050505050565b60006001600160a01b03851630146112c55760405162461bcd60e51b815260206004820152601c60248201527f57424e423a20666c617368206d696e74206f6e6c792057424e423130000000006044820152606401610712565b6dffffffffffffffffffffffffffff84111561132f5760405162461bcd60e51b8152602060048201526024808201527f57424e423a20696e646976696475616c206c6f616e206c696d697420657863656044820152631959195960e21b6064820152608401610712565b83600460008282546113419190612266565b90915550506004546dffffffffffffffffffffffffffff10156113a65760405162461bcd60e51b815260206004820152601f60248201527f57424e423a20746f74616c206c6f616e206c696d6974206578636565646564006044820152606401610712565b6001600160a01b038616600090815260016020526040812080548692906113ce908490612266565b90915550506040518481526001600160a01b038716906000906000805160206127a68339815191529060200160405180910390a36040516323e30c8b60e01b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038816906323e30c8b9061145b90339030908a906000908b908b90600401612718565b6020604051808303816000875af115801561147a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149e919061275d565b146114eb5760405162461bcd60e51b815260206004820152601760248201527f57424e423a20666c617368206c6f616e206661696c65640000000000000000006044820152606401610712565b6001600160a01b038616600090815260036020908152604080832030845290915290205460001981146115d357848110156115685760405162461bcd60e51b815260206004820152601f60248201527f57424e423a2072657175657374206578636565647320616c6c6f77616e6365006044820152606401610712565b60006115748683612687565b6001600160a01b038916600081815260036020908152604080832030808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6001600160a01b038716600090815260016020526040902054858110156116465760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b6116508682612687565b6001600160a01b0389166000818152600160205260408082209390935591516000805160206127a68339815191529061168c908a815260200190565b60405180910390a385600460008282546116a69190612687565b9091555060019998505050505050505050565b6001600160a01b0383166000908152600160205260408120805434919083906116e3908490612266565b90915550506040513481526001600160a01b038516906000906000805160206127a68339815191529060200160405180910390a3604051635260769b60e11b81526001600160a01b0385169063a4c0ed36906117499033903490889088906004016126c3565b6020604051808303816000875af1158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c91906126f6565b949350505050565b60006001600160a01b03821630146117ad576000610691565b600454610691906dffffffffffffffffffffffffffff612687565b6001600160a01b03831633146118c2576001600160a01b038316600090815260036020908152604080832033845290915290205460001981146118c057818110156118555760405162461bcd60e51b815260206004820152601f60248201527f57424e423a2072657175657374206578636565647320616c6c6f77616e6365006044820152606401610712565b60006118618383612687565b6001600160a01b038616600081815260036020908152604080832033808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b505b6001600160a01b038316600090815260016020526040902054818110156119355760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b61193f8282612687565b6001600160a01b0385166000818152600160205260408082209390935591516000805160206127a68339815191529061197b9086815260200190565b60405180910390a36000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b5050905080611a225760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b5050505050565b60006001600160a01b03831615801590611a4c57506001600160a01b0383163014155b15611b35573360009081526001602052604090205482811015611abf5760405162461bcd60e51b815260206004820152602560248201527f57424e423a207472616e7366657220616d6f756e7420657863656564732062616044820152646c616e636560d81b6064820152608401610712565b611ac98382612687565b33600090815260016020526040808220929092556001600160a01b03861681529081208054859290611afc908490612266565b90915550506040518381526001600160a01b0385169033906000805160206127a68339815191529060200160405180910390a350611c7b565b3360009081526001602052604090205482811015611b9f5760405162461bcd60e51b815260206004820152602160248201527f57424e423a206275726e20616d6f756e7420657863656564732062616c616e636044820152606560f81b6064820152608401610712565b611ba98382612687565b336000818152600160205260408082209390935591516000805160206127a683398151915290611bdc9087815260200190565b60405180910390a3604051600090339085908381818185875af1925050503d8060008114611c26576040519150601f19603f3d011682016040523d82523d6000602084013e611c2b565b606091505b5050905080611c785760405162461bcd60e51b815260206004820152601960248201527815d093908e88109390881d1c985b9cd9995c8819985a5b1959603a1b6044820152606401610712565b50505b50600192915050565b6001600160a01b03811660009081526001602052604081208054349290611cac908490612266565b90915550506040513481526001600160a01b038216906000906000805160206127a68339815191529060200160405180910390a350565b3360008181526003602090815260408083206001600160a01b038916808552925280832087905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611d3e9088815260200190565b60405180910390a360405162ba451f60e01b81526001600160a01b0386169062ba451f9061121f9033908890889088906004016126c3565b3360009081526001602052604081208054349290611d95908490612266565b909155505060405134815233906000906000805160206127a68339815191529060200160405180910390a3565b83421115611e125760405162461bcd60e51b815260206004820152601460248201527f57424e423a2045787069726564207065726d69740000000000000000000000006044820152606401610712565b6001600160a01b038716600090815260026020526040812080544692917f0000000000000000000000000000000000000000000000000000000000000000918b918b918b9186611e6183612776565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000008314611eec57611ee7836120e7565b611f0e565b7f00000000000000000000000000000000000000000000000000000000000000005b60405161190160f01b602082015260228101919091526042810183905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015611f99573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611fcf57508a6001600160a01b0316816001600160a01b0316145b61201b5760405162461bcd60e51b815260206004820152601460248201527f57424e423a20696e76616c6964207065726d69740000000000000000000000006044820152606401610712565b6001600160a01b038b81166000818152600360209081526040808320948f16808452948252918290208d905590518c81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050505050565b60006001600160a01b03831630146120de5760405162461bcd60e51b815260206004820152601c60248201527f57424e423a20666c617368206d696e74206f6e6c792057424e423130000000006044820152606401610712565b50600092915050565b604080518082018252600b81526a2bb930b83832b21021272160a91b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f66c256616e55fdc8d2e88ed1c228428a1a68a1e4441d1876b1397dcdd1b654ef818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101939093523060a0808501919091528251808503909101815260c0909301909152815191012090565b6000826121c885846121d1565b14949350505050565b600081815b845181101561221657612202828683815181106121f5576121f561278f565b602002602001015161221e565b91508061220e81612776565b9150506121d6565b509392505050565b600081831061223a576000828152602084905260409020612249565b60008381526020839052604090205b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561069157610691612250565b600060208083528351808285015260005b818110156122a65785810183015185820160400152820161228a565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146122dc57600080fd5b50565b600080604083850312156122f257600080fd5b82356122fd816122c7565b946020939093013593505050565b60008060006060848603121561232057600080fd5b833561232b816122c7565b9250602084013561233b816122c7565b929592945050506040919091013590565b60006020828403121561235e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561239057600080fd5b8335925060208085013567ffffffffffffffff808211156123b057600080fd5b818701915087601f8301126123c457600080fd5b8135818111156123d6576123d6612365565b8060051b604051601f19603f830116810181811085821117156123fb576123fb612365565b60405291825284820192508381018501918a83111561241957600080fd5b938501935b828510156124375784358452938501939285019261241e565b979a979950505050604095909501359450505050565b60008083601f84011261245f57600080fd5b50813567ffffffffffffffff81111561247757600080fd5b60208301915083602082850101111561248f57600080fd5b9250929050565b600080600080606085870312156124ac57600080fd5b84356124b7816122c7565b935060208501359250604085013567ffffffffffffffff8111156124da57600080fd5b6124e68782880161244d565b95989497509550505050565b60008060008060006080868803121561250a57600080fd5b8535612515816122c7565b94506020860135612525816122c7565b935060408601359250606086013567ffffffffffffffff81111561254857600080fd5b6125548882890161244d565b969995985093965092949392505050565b60008060006040848603121561257a57600080fd5b8335612585816122c7565b9250602084013567ffffffffffffffff8111156125a157600080fd5b6125ad8682870161244d565b9497909650939450505050565b6000602082840312156125cc57600080fd5b8135612249816122c7565b600080600080600080600060e0888a0312156125f257600080fd5b87356125fd816122c7565b9650602088013561260d816122c7565b95506040880135945060608801359350608088013560ff8116811461263157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561266157600080fd5b823561266c816122c7565b9150602083013561267c816122c7565b809150509250929050565b8181038181111561069157610691612250565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681528360208201526060604082015260006126ec60608301848661269a565b9695505050505050565b60006020828403121561270857600080fd5b8151801515811461224957600080fd5b60006001600160a01b03808916835280881660208401525085604083015284606083015260a0608083015261275160a08301848661269a565b98975050505050505050565b60006020828403121561276f57600080fd5b5051919050565b60006001820161278857612788612250565b5060010190565b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa164736f6c6343000811000a",
  "devdoc": {
    "details": "Wrapped BNB based on WETH v10 (WETH10) is an BNB (BNB) BEP-20 wrapper. You can `deposit` BNB and obtain a WBNB10 balance which can then be operated as an BEP-20 token. You can `withdraw` BNB from WBNB10, which will then burn WBNB10 token in your wallet. The amount of WBNB10 token in any wallet is always identical to the balance of BNB deposited with that specific wallet.",
    "events": {
      "FlashloanRebase(address,uint256)": {
        "details": "WrappedBNB Flashloan Root Event"
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return the DOMAIN_SEPARATOR."
      },
      "approve(address,uint256)": {
        "details": "Sets `value` as allowance of `spender` account over caller account's WBNB10 token. Emits {Approval} event. Returns boolean value indicating whether operation succeeded."
      },
      "approveAndCall(address,uint256,bytes)": {
        "details": "Sets `value` as allowance of `spender` account over caller account's WBNB10 token, after which a call is executed to an BEP677-compliant contract with the `data` parameter. Emits {Approval} event. Returns boolean value indicating whether operation succeeded. For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "deposit()": {
        "details": "`msg.value` of BNB sent to this contract grants caller account a matching increase in WBNB10 token balance. Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to caller account."
      },
      "depositTo(address)": {
        "details": "`msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance. Emits {Transfer} event to reflect WBNB10 token mint of `msg.value` from `address(0)` to `to` account."
      },
      "depositToAndCall(address,bytes)": {
        "details": "`msg.value` of BNB sent to this contract grants `to` account a matching increase in WBNB10 token balance, after which a call is executed to an BEP677-compliant contract with the `data` parameter. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "flashFee(address,uint256)": {
        "details": "Return the fee (zero) for flash lending an amount of WBNB10 token."
      },
      "flashLoan(address,address,uint256,bytes)": {
        "details": "Flash lends `value` WBNB10 token to the receiver address. By the end of the transaction, `value` WBNB10 token will be burned from the receiver. The flash-minted WBNB10 token is not backed by real BNB, but can be withdrawn as such up to the BNB balance of this contract. Arbitrary data can be passed as a bytes calldata parameter. Emits {Approval} event to reflect reduced allowance `value` for this contract to spend from receiver account (`receiver`), unless allowance is set to `type(uint256).max` Emits two {Transfer} events for minting and burning of the flash-minted amount. Returns boolean value indicating whether operation succeeded. Requirements:   - `value` must be less or equal to type(uint112).max.   - The total of all flash loans in a tx must be less or equal to type(uint112).max."
      },
      "flashLoanRebase(bytes32,bytes32[],uint256)": {
        "details": "Return the initialized Flashloan root and verify caller"
      },
      "getOwner()": {
        "details": "Return the owner of this contract itself"
      },
      "maxFlashLoan(address)": {
        "details": "Return the amount of WBNB10 token that can be flash-lent."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as allowance of `spender` account over `owner` account's WBNB10 token, given `owner` account's signed approval. Emits {Approval} event. Requirements:   - `deadline` must be timestamp in future.   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.   - the signature must use `owner` account's current nonce (see {nonces}).   - the signer cannot be `address(0)` and must be `owner` account. For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. WBNB10 token implementation adapted from https://github.com/albertocuestacanada/BEP20Permit/blob/master/contracts/BEP20Permit.sol."
      },
      "totalSupply()": {
        "details": "Returns the total supply of WBNB10 token as the BNB held in this contract."
      },
      "transfer(address,uint256)": {
        "details": "Moves `value` WBNB10 token from caller's account to account (`to`). A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WBNB10 token."
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "Moves `value` WBNB10 token from caller's account to account (`to`), after which a call is executed to an BEP677-compliant contract with the `data` parameter. A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WBNB10 token. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `value` WBNB10 token from account (`from`) to account (`to`) using allowance mechanism. `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`. A transfer to `address(0)` triggers an BNB withdraw matching the sent WBNB10 token in favor of caller. Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - `from` account must have at least `value` balance of WBNB10 token.   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same."
      },
      "withdraw(uint256)": {
        "details": "Burn `value` WBNB10 token from caller account and withdraw matching BNB to the same. Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WBNB10 token."
      },
      "withdrawFrom(address,address,uint256)": {
        "details": "Burn `value` WBNB10 token from account (`from`) and withdraw matching BNB to account (`to`). Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from account (`from`). Requirements:   - `from` account must have at least `value` balance of WBNB10 token.   - `from` account must have approved caller to spend at least `value` of WBNB10 token, unless `from` and caller are the same."
      },
      "withdrawTo(address,uint256)": {
        "details": "Burn `value` WBNB10 token from caller account and withdraw matching BNB to account (`to`). Emits {Transfer} event to reflect WBNB10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WBNB10 token."
      }
    },
    "stateVariables": {
      "allowance": {
        "details": "Records number of WBNB10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}."
      },
      "balanceOf": {
        "details": "Records amount of WBNB10 token owned by account."
      },
      "decimals": {
        "details": "Returns the token decimals."
      },
      "flashMinted": {
        "details": "Current amount of flash-minted WBNB10 token."
      },
      "name": {
        "details": "Returns the token name."
      },
      "nonces": {
        "details": "Records current BEP2612 nonce for account. This value must be included whenever signature is generated for {permit}. Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times."
      },
      "symbol": {
        "details": "Returns the token symbol."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11544,
        "contract": "contracts/WrappedBNB10.sol:WrappedBNB",
        "label": "FLASHLOAN_MERKLE_ROOT",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 11550,
        "contract": "contracts/WrappedBNB10.sol:WrappedBNB",
        "label": "balanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11556,
        "contract": "contracts/WrappedBNB10.sol:WrappedBNB",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11564,
        "contract": "contracts/WrappedBNB10.sol:WrappedBNB",
        "label": "allowance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11568,
        "contract": "contracts/WrappedBNB10.sol:WrappedBNB",
        "label": "flashMinted",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}