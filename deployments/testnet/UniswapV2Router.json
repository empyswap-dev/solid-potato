{
  "address": "0xF67702Ee0E53dB21402ed2d1F6271493F2922d72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0ff83f286b7d9b6c54a72a0a37ebd5a60acec1523eb53893e221a579969b763e",
  "receipt": {
    "to": null,
    "from": "0xa9E18d77af04b33ff5F3558e84003e7Cf4b84631",
    "contractAddress": "0xF67702Ee0E53dB21402ed2d1F6271493F2922d72",
    "transactionIndex": 1,
    "gasUsed": "3918590",
    "logsBloom": "0x
    "blockHash": "0xbe634825118abf4b5b89d884494087e5ae995432a8e19cc054e9a229d03e1373",
    "transactionHash": "0x0ff83f286b7d9b6c54a72a0a37ebd5a60acec1523eb53893e221a579969b763e",
    "logs": [],
    "blockNumber": 8088520,
    "cumulativeGasUsed": "3982603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xea96F9004051cB3E04282B10CF58603c2a1b5a55",
    "0xb532F8a65F8A86e30752B49647b5aDAF691989b0"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c3ab9f629a42a66663a365c36426c8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Router.sol\":\"UniswapV2Router\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":777},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2Factory} from \\\"./interfaces/uniswapV2/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Router} from \\\"./interfaces/uniswapV2/IUniswapV2Router.sol\\\";\\nimport {IUniswapV2Pair} from \\\"./interfaces/uniswapV2/IUniswapV2Pair.sol\\\";\\nimport {IERC20} from \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport {IWETH} from \\\"./interfaces/ERC20/IWETH.sol\\\";\\n\\nimport {TransferHelper} from \\\"./libraries/uniswapV2/TransferHelper.sol\\\";\\nimport {UniswapV2Library} from \\\"./libraries/uniswapV2/UniswapV2Library.sol\\\";\\n\\ncontract UniswapV2Router is IUniswapV2Router {\\n    //solhint-disable-next-line immutable-vars-naming\\n    address public immutable override factory;\\n    address public immutable override WETH;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"UniswapV2Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\\n        // create the pair if it doesn't exist yet\\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(\\n            factory,\\n            tokenA,\\n            tokenB\\n        );\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = UniswapV2Library.quote(\\n                amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal <= amountBDesired) {\\n                require(\\n                    amountBOptimal >= amountBMin,\\n                    \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\"\\n                );\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = UniswapV2Library.quote(\\n                    amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                assert(amountAOptimal <= amountADesired);\\n                require(\\n                    amountAOptimal >= amountAMin,\\n                    \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\"\\n                );\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity)\\n    {\\n        (amountA, amountB) = _addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin\\n        );\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = IUniswapV2Pair(pair).mint(to);\\n    }\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)\\n    {\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            WETH,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\n        liquidity = IUniswapV2Pair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH)\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\\n        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0\\n            ? (amount0, amount1)\\n            : (amount1, amount0);\\n        require(\\n            amountA >= amountAMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\"\\n        );\\n        require(\\n            amountB >= amountBMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\"\\n        );\\n    }\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256 amountToken, uint256 amountETH)\\n    {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override returns (uint256 amountA, uint256 amountB) {\\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IUniswapV2Pair(pair).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        (amountA, amountB) = removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        virtual\\n        override\\n        returns (uint256 amountToken, uint256 amountETH)\\n    {\\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IUniswapV2Pair(pair).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        (amountToken, amountETH) = removeLiquidityETH(\\n            token,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\\n        (, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(\\n            token,\\n            to,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override returns (uint256 amountETH) {\\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IUniswapV2Pair(pair).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n            token,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[0] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(\\n            IWETH(WETH).transfer(\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[0] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= msg.value,\\n            \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(\\n            IWETH(WETH).transfer(\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0])\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output)\\n            );\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n                amountInput =\\n                    IERC20(input).balanceOf(address(pair)) -\\n                    reserveInput;\\n                amountOutput = UniswapV2Library.getAmountOut(\\n                    amountInput,\\n                    reserveInput,\\n                    reserveOutput\\n                );\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\\n            amountIn\\n        );\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >=\\n                amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) {\\n        require(path[0] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        uint256 amountIn = msg.value;\\n        IWETH(WETH).deposit{value: amountIn}();\\n        assert(\\n            IWETH(WETH).transfer(\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amountIn\\n            )\\n        );\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >=\\n                amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        require(path[path.length - 1] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\\n            amountIn\\n        );\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(\\n            amountOut >= amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n    // **** LIBRARY FUNCTIONS ****\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) public pure virtual override returns (uint256 amountB) {\\n        return UniswapV2Library.quote(amountA, reserveA, reserveB);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure virtual override returns (uint256 amountOut) {\\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure virtual override returns (uint256 amountIn) {\\n        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) public view virtual override returns (uint256[] memory amounts) {\\n        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] memory path\\n    ) public view virtual override returns (uint256[] memory amounts) {\\n        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n    }\\n}\\n\",\"keccak256\":\"0xfd5d5f2873d0a47313773a94a2f77208a06189c4e32ba41af3fb461f35ab3a13\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x263d9f7f138636c2651a153781d726b2ea81594e13325dd322c312d55224cbba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ERC20/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x3c7acf06c71d9871c6eea7f70e63da0dc83caf36ac20b5ce0cb716df60354abf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe0601b522703bdc708e1aecd650b0e8d1af06294861be5cdc59e816dea67b60\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x3633dc98b0fa29fdc2d08f8312a099a3ba4bdb46a40b296f1f63daec3a5d9f66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2ERC20} from \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function getPredicts(\\n        bool _switch\\n    ) external view returns (uint256 _price0Predict, uint256 _price1Predict);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    function updateFee(bool _feeOn, uint256 feeAmount) external;\\n\\n    function updatePredict(uint256 _predict0, uint256 _predict1) external;\\n}\\n\",\"keccak256\":\"0x663b0e8223f22993c89136c39b331c8645bfbc6d179072e6a8e3581045ab97af\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2Router01} from \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e0ee54ae1cc6e253dacf4ec6b6f1e1c6b928e4915dea7f149fa66fc41a2b89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswapV2/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n//solhint-disable func-name-mixedcase\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x0b69395e783d242489f7c546595cc7c4fc238c4ca5c43f22543697d04b5b038c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/uniswapV2/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc891edd9b6455e8773a668c2d2933ec01695ad017417615bb65fe222d7114962\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/uniswapV2/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n//solhint-disable reason-string\\n\\nimport {IUniswapV2Pair} from \\\"../../interfaces/uniswapV2/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"3d31509ef86f669cb331d1ce6afc2ed8809dcb1b0c4ba6121a4f9128c22b1c1f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x366bcfd3930d6df45f69ede1d9532682da99d514bccfd6a3b0a2371ff815b707\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200485738038062004857833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051614624620002336000396000818161019f015281816103ad0152818161057c015281816105cb015281816106a50152818161093c01528181610d0f01528181610eba015281816112a5015281816113b8015281816114a701528181611558015281816116ea0152818161177801528181611a3c01528181611af401528181611ba301528181611c5001528181611cc4015281816121bc01528181612403015281816124590152818161248d0152818161252201528181612679015281816127fb015261288901526000818161046c015281816107510152818161086701528181610a2201528181610a5b01528181610b8a01528181610dbb01528181610e980152818161100701528181611603015281816117aa0152818161191301528181611cf601528181611f480152818161216a0152818161219a015281816122fb0152818161243701528181612724015281816128bb0152818161322c0152818161327c01528181613547015281816136fe01528181613af701528181613b990152613c1001526146246000f3fe60806040526004361061018f5760003560e01c80638803dbee116100d6578063c45a01551161007f578063e8e3370011610059578063e8e33700146104ce578063f305d71914610509578063fb3bdb411461051c57600080fd5b8063c45a01551461045a578063d06ca61f1461048e578063ded9382a146104ae57600080fd5b8063af2979eb116100b0578063af2979eb14610407578063b6f9de9514610427578063baa2abde1461043a57600080fd5b80638803dbee1461037b578063ad5c46481461039b578063ad615dec146103e757600080fd5b80634a25d94a11610138578063791ac94711610112578063791ac947146103285780637ff36ab51461034857806385f8c2591461035b57600080fd5b80634a25d94a146102c85780635b0d5984146102e85780635c11d7951461030857600080fd5b80631f00ca74116101695780631f00ca74146102685780632195995c1461028857806338ed1739146102a857600080fd5b806302751cec146101d3578063054d50d41461020d57806318cbafe51461023b57600080fd5b366101ce57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101cc576101cc613e43565b005b600080fd5b3480156101df57600080fd5b506101f36101ee366004613e81565b61052f565b604080519283526020830191909152015b60405180910390f35b34801561021957600080fd5b5061022d610228366004613edf565b610645565b604051908152602001610204565b34801561024757600080fd5b5061025b610256366004613f50565b61065a565b6040516102049190613fc3565b34801561027457600080fd5b5061025b61028336600461401d565b610a1b565b34801561029457600080fd5b506101f36102a336600461410d565b610a51565b3480156102b457600080fd5b5061025b6102c3366004613f50565b610b44565b3480156102d457600080fd5b5061025b6102e3366004613f50565b610cc4565b3480156102f457600080fd5b5061022d6103033660046141b7565b610e90565b34801561031457600080fd5b506101cc610323366004613f50565b610f97565b34801561033457600080fd5b506101cc610343366004613f50565b61125c565b61025b61035636600461424d565b611515565b34801561036757600080fd5b5061022d610376366004613edf565b6118c0565b34801561038757600080fd5b5061025b610396366004613f50565b6118cd565b3480156103a757600080fd5b506103cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610204565b3480156103f357600080fd5b5061022d610402366004613edf565b6119e8565b34801561041357600080fd5b5061022d610422366004613e81565b6119f5565b6101cc61043536600461424d565b611b62565b34801561044657600080fd5b506101f36104553660046142b4565b611eff565b34801561046657600080fd5b506103cf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561049a57600080fd5b5061025b6104a936600461401d565b612163565b3480156104ba57600080fd5b506101f36104c93660046141b7565b612190565b3480156104da57600080fd5b506104ee6104e9366004614326565b61229d565b60408051938452602084019290925290820152606001610204565b6104ee610517366004613e81565b6123b9565b61025b61052a36600461424d565b612636565b60008082428110156105765760405162461bcd60e51b815260206004820152601860248201526000805160206145f883398151915260448201526064015b60405180910390fd5b6105a5897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611eff565b90935091506105b5898685612a13565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b505050506106398583612b69565b50965096945050505050565b6000610652848484612c51565b949350505050565b6060814281101561069b5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866106d26001826143b8565b8181106106e1576106e16143cb565b90506020020160208101906106f691906143e1565b6001600160a01b03161461074c5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b6107aa7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d8392505050565b91508682600184516107bc91906143b8565b815181106107cc576107cc6143cb565b602002602001015110156108365760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b6108fb8686600081811061084c5761084c6143cb565b905060200201602081019061086191906143e1565b336108db7f00000000000000000000000000000000000000000000000000000000000000008a8a6000818110610899576108996143cb565b90506020020160208101906108ae91906143e1565b8b8b60018181106108c1576108c16143cb565b90506020020160208101906108d691906143e1565b612f0e565b856000815181106108ee576108ee6143cb565b6020026020010151612fea565b61093a82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613149915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161097891906143b8565b81518110610988576109886143cb565b60200260200101516040518263ffffffff1660e01b81526004016109ae91815260200190565b600060405180830381600087803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b50505050610a108483600185516109f391906143b8565b81518110610a0357610a036143cb565b6020026020010151612b69565b509695505050505050565b6060610a487f00000000000000000000000000000000000000000000000000000000000000008484613351565b90505b92915050565b6000806000610a817f00000000000000000000000000000000000000000000000000000000000000008f8f612f0e565b9050600087610a90578c610a94565b6000195b60405163d505accf60e01b815233600482015230602482015260448101829052606481018b905260ff8916608482015260a4810188905260c481018790529091506001600160a01b0383169063d505accf9060e401600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b50505050610b2a8f8f8f8f8f8f8f611eff565b809450819550505050509b509b9950505050505050505050565b60608142811015610b855760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b610be37f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d8392505050565b9150868260018451610bf591906143b8565b81518110610c0557610c056143cb565b60200260200101511015610c6f5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b610c858686600081811061084c5761084c6143cb565b610a1082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613149915050565b60608142811015610d055760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610d3c6001826143b8565b818110610d4b57610d4b6143cb565b9050602002016020810190610d6091906143e1565b6001600160a01b031614610db65760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b610e147f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061335192505050565b91508682600081518110610e2a57610e2a6143cb565b602002602001015111156108365760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161056d565b600080610ede7f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612f0e565b9050600086610eed578b610ef1565b6000195b60405163d505accf60e01b815233600482015230602482015260448101829052606481018a905260ff8816608482015260a4810187905260c481018690529091506001600160a01b0383169063d505accf9060e401600060405180830381600087803b158015610f6057600080fd5b505af1158015610f74573d6000803e3d6000fd5b50505050610f868d8d8d8d8d8d6119f5565b9d9c50505050505050505050505050565b8042811015610fd65760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b61106785856000818110610fec57610fec6143cb565b905060200201602081019061100191906143e1565b336110617f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b905060200201602081019061104e91906143e1565b8a8a60018181106108c1576108c16143cb565b8a612fea565b600085856110766001826143b8565b818110611085576110856143cb565b905060200201602081019061109a91906143e1565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190614405565b90506111468686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892506134d2915050565b868187876111556001826143b8565b818110611164576111646143cb565b905060200201602081019061117991906143e1565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a08231906024015b602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190614405565b6111f091906143b8565b10156112525760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b5050505050505050565b804281101561129b5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856112d26001826143b8565b8181106112e1576112e16143cb565b90506020020160208101906112f691906143e1565b6001600160a01b03161461134c5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b61136285856000818110610fec57610fec6143cb565b6113a08585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506134d2915050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190614405565b9050868110156114915760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156114f357600080fd5b505af1158015611507573d6000803e3d6000fd5b505050506112528482612b69565b606081428110156115565760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110611593576115936143cb565b90506020020160208101906115a891906143e1565b6001600160a01b0316146115fe5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b61165c7f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d8392505050565b915086826001845161166e91906143b8565b8151811061167e5761167e6143cb565b602002602001015110156116e85760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061172a5761172a6143cb565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6117dc7f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b846000815181106117ef576117ef6143cb565b60200260200101516040518363ffffffff1660e01b81526004016118289291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186b919061441e565b61187757611877613e43565b6118b682878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613149915050565b5095945050505050565b60006106528484846137ba565b6060814281101561190e5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b61196c7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061335192505050565b91508682600081518110611982576119826143cb565b60200260200101511115610c6f5760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161056d565b60006106528484846138f1565b60008142811015611a365760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b611a65887f00000000000000000000000000000000000000000000000000000000000000008989893089611eff565b6040516370a0823160e01b8152306004820152909350611ade9150899086906001600160a01b038316906370a0823190602401602060405180830381865afa158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190614405565b612a13565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611b4057600080fd5b505af1158015611b54573d6000803e3d6000fd5b50505050610a108483612b69565b8042811015611ba15760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685856000818110611bde57611bde6143cb565b9050602002016020810190611bf391906143e1565b6001600160a01b031614611c495760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ca957600080fd5b505af1158015611cbd573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611d287f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db1919061441e565b611dbd57611dbd613e43565b60008686611dcc6001826143b8565b818110611ddb57611ddb6143cb565b9050602002016020810190611df091906143e1565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa158015611e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5c9190614405565b9050611e9c8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506134d2915050565b87818888611eab6001826143b8565b818110611eba57611eba6143cb565b9050602002016020810190611ecf91906143e1565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024016111a5565b6000808242811015611f415760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6000611f6e7f00000000000000000000000000000000000000000000000000000000000000008c8c612f0e565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe8919061441e565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015612035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612059919061443b565b9150915060006120698e8e6139d2565b509050806001600160a01b03168e6001600160a01b03161461208c57818361208f565b82825b90975095508a8710156120f35760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161056d565b898610156121525760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161056d565b505050505097509795505050505050565b6060610a487f00000000000000000000000000000000000000000000000000000000000000008484612d83565b60008060006121e07f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612f0e565b90506000876121ef578c6121f3565b6000195b60405163d505accf60e01b815233600482015230602482015260448101829052606481018b905260ff8916608482015260a4810188905260c481018790529091506001600160a01b0383169063d505accf9060e401600060405180830381600087803b15801561226257600080fd5b505af1158015612276573d6000803e3d6000fd5b505050506122888e8e8e8e8e8e61052f565b909f909e509c50505050505050505050505050565b600080600083428110156122e15760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6122ef8c8c8c8c8c8c613ac9565b909450925060006123217f00000000000000000000000000000000000000000000000000000000000000008e8e612f0e565b905061232f8d338388612fea565b61233b8c338387612fea565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015612383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a79190614405565b92505050985098509895505050505050565b600080600083428110156123fd5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b61242b8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613ac9565b9094509250600061247d7f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612f0e565b905061248b8b338388612fea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156124e657600080fd5b505af11580156124fa573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af115801561256f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612593919061441e565b61259f5761259f613e43565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190614405565b925083341115612628576126283361262386346143b8565b612b69565b505096509650969350505050565b606081428110156126775760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106126b4576126b46143cb565b90506020020160208101906126c991906143e1565b6001600160a01b03161461271f5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b61277d7f00000000000000000000000000000000000000000000000000000000000000008888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061335192505050565b91503482600081518110612793576127936143cb565b602002602001015111156127f95760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061283b5761283b6143cb565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561286e57600080fd5b505af1158015612882573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6128ed7f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b84600081518110612900576129006143cb565b60200260200101516040518363ffffffff1660e01b81526004016129399291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c919061441e565b61298857612988613e43565b6129c782878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613149915050565b816000815181106129da576129da6143cb565b60200260200101513411156118b6576118b63383600081518110612a0057612a006143cb565b60200260200101513461262391906143b8565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691612a849190614483565b6000604051808303816000865af19150503d8060008114612ac1576040519150601f19603f3d011682016040523d82523d6000602084013e612ac6565b606091505b5091509150818015612af0575080511580612af0575080806020019051810190612af0919061441e565b612b625760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161056d565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051612b939190614483565b60006040518083038185875af1925050503d8060008114612bd0576040519150601f19603f3d011682016040523d82523d6000602084013e612bd5565b606091505b5050905080612c4c5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c6564000000000000000000000000606482015260840161056d565b505050565b6000808411612cc85760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161056d565b600083118015612cd85750600082115b612d355760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161056d565b6000612d43856103e561449f565b90506000612d51848361449f565b9050600082612d62876103e861449f565b612d6c91906144b6565b9050612d7881836144c9565b979650505050505050565b6060600282511015612dd75760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161056d565b815167ffffffffffffffff811115612df157612df1614007565b604051908082528060200260200182016040528015612e1a578160200160208202803683370190505b5090508281600081518110612e3157612e316143cb565b60200260200101818152505060005b60018351612e4e91906143b8565b811015612f0657600080612ea187868581518110612e6e57612e6e6143cb565b602002602001015187866001612e8491906144b6565b81518110612e9457612e946143cb565b6020026020010151613d6b565b91509150612ec9848481518110612eba57612eba6143cb565b60200260200101518383612c51565b84612ed58560016144b6565b81518110612ee557612ee56143cb565b60200260200101818152505050508080612efe906144eb565b915050612e40565b509392505050565b6000806000612f1d85856139d2565b604080516bffffffffffffffffffffffff19606085811b821660208085019190915285821b83166034850152845180850360280181526048850190955284519401939093207fff000000000000000000000000000000000000000000000000000000000000006068840152928b901b166069820152607d8101919091527f3d31509ef86f669cb331d1ce6afc2ed8809dcb1b0c4ba6121a4f9128c22b1c1f609d820152919350915060bd0160408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916130639190614483565b6000604051808303816000865af19150503d80600081146130a0576040519150601f19603f3d011682016040523d82523d6000602084013e6130a5565b606091505b50915091508180156130cf5750805115806130cf5750808060200190518101906130cf919061441e565b6131415760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840161056d565b505050505050565b60005b6001835161315a91906143b8565b81101561334b57600080848381518110613176576131766143cb565b60200260200101518584600161318c91906144b6565b8151811061319c5761319c6143cb565b60200260200101519150915060006131b483836139d2565b5090506000876131c58660016144b6565b815181106131d5576131d56143cb565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461320357826000613207565b6000835b91509150600060028a5161321b91906143b8565b88106132275788613275565b6132757f0000000000000000000000000000000000000000000000000000000000000000878c6132588c60026144b6565b81518110613268576132686143cb565b6020026020010151612f0e565b90506132a27f00000000000000000000000000000000000000000000000000000000000000008888612f0e565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f1916602001820160405280156132df576020820181803683370190505b506040518563ffffffff1660e01b81526004016132ff9493929190614504565b600060405180830381600087803b15801561331957600080fd5b505af115801561332d573d6000803e3d6000fd5b50505050505050505050508080613343906144eb565b91505061314c565b50505050565b60606002825110156133a55760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161056d565b815167ffffffffffffffff8111156133bf576133bf614007565b6040519080825280602002602001820160405280156133e8578160200160208202803683370190505b5090508281600183516133fb91906143b8565b8151811061340b5761340b6143cb565b60200260200101818152505060006001835161342791906143b8565b90505b8015612f065760008061346d87866134436001876143b8565b81518110613453576134536143cb565b6020026020010151878681518110612e9457612e946143cb565b91509150613495848481518110613486576134866143cb565b602002602001015183836137ba565b846134a16001866143b8565b815181106134b1576134b16143cb565b602002602001018181525050505080806134ca90614555565b91505061342a565b60005b600183516134e391906143b8565b811015612c4c576000808483815181106134ff576134ff6143cb565b60200260200101518584600161351591906144b6565b81518110613525576135256143cb565b602002602001015191509150600061353d83836139d2565b509050600061356d7f00000000000000000000000000000000000000000000000000000000000000008585612f0e565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156135b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d7919061458a565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080876001600160a01b03168a6001600160a01b03161461361f578284613622565b83835b6040516370a0823160e01b81526001600160a01b038a8116600483015292945090925083918c16906370a0823190602401602060405180830381865afa158015613670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136949190614405565b61369e91906143b8565b95506136ab868383612c51565b945050505050600080856001600160a01b0316886001600160a01b0316146136d5578260006136d9565b6000835b91509150600060028c516136ed91906143b8565b8a106136f9578a61372a565b61372a7f0000000000000000000000000000000000000000000000000000000000000000898e6132588e60026144b6565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f9061376c9086908690869060248101614504565b600060405180830381600087803b15801561378657600080fd5b505af115801561379a573d6000803e3d6000fd5b5050505050505050505050505080806137b2906144eb565b9150506134d5565b60008084116138315760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e540000000000000000000000000000000000000000606482015260840161056d565b6000831180156138415750600082115b61389e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161056d565b60006138aa858561449f565b6138b6906103e861449f565b905060006138c486856143b8565b6138d0906103e561449f565b90506138dc81836144c9565b6138e79060016144b6565b9695505050505050565b60008084116139505760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b606482015260840161056d565b6000831180156139605750600082115b6139bd5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161056d565b826139c8838661449f565b61065291906144c9565b600080826001600160a01b0316846001600160a01b031603613a445760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b606482015260840161056d565b826001600160a01b0316846001600160a01b031610613a64578284613a67565b83835b90925090506001600160a01b038216613ac25760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161056d565b9250929050565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015613b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6491906145da565b6001600160a01b031603613c08576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af1158015613be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0691906145da565b505b600080613c367f00000000000000000000000000000000000000000000000000000000000000008b8b613d6b565b91509150816000148015613c48575080155b15613c5857879350869250613d5e565b6000613c658984846138f1565b9050878111613cd85785811015613ccd5760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161056d565b889450925082613d5c565b6000613ce58984866138f1565b905089811115613cf757613cf7613e43565b87811015613d565760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161056d565b94508793505b505b5050965096945050505050565b6000806000613d7a85856139d2565b509050600080613d8b888888612f0e565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dec919061458a565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b031614613e31578082613e34565b81815b90999098509650505050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114613e6e57600080fd5b50565b8035613e7c81613e59565b919050565b60008060008060008060c08789031215613e9a57600080fd5b8635613ea581613e59565b95506020870135945060408701359350606087013592506080870135613eca81613e59565b8092505060a087013590509295509295509295565b600080600060608486031215613ef457600080fd5b505081359360208301359350604090920135919050565b60008083601f840112613f1d57600080fd5b50813567ffffffffffffffff811115613f3557600080fd5b6020830191508360208260051b8501011115613ac257600080fd5b60008060008060008060a08789031215613f6957600080fd5b8635955060208701359450604087013567ffffffffffffffff811115613f8e57600080fd5b613f9a89828a01613f0b565b9095509350506060870135613fae81613e59565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613ffb57835183529284019291840191600101613fdf565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561403057600080fd5b8235915060208084013567ffffffffffffffff8082111561405057600080fd5b818601915086601f83011261406457600080fd5b81358181111561407657614076614007565b8060051b604051601f19603f8301168101818110858211171561409b5761409b614007565b6040529182528482019250838101850191898311156140b957600080fd5b938501935b828510156140de576140cf85613e71565b845293850193928501926140be565b8096505050505050509250929050565b8015158114613e6e57600080fd5b803560ff81168114613e7c57600080fd5b60008060008060008060008060008060006101608c8e03121561412f57600080fd5b8b3561413a81613e59565b9a5060208c013561414a81613e59565b995060408c0135985060608c0135975060808c0135965060a08c013561416f81613e59565b955060c08c0135945060e08c0135614186816140ee565b93506141956101008d016140fc565b92506101208c013591506101408c013590509295989b509295989b9093969950565b6000806000806000806000806000806101408b8d0312156141d757600080fd5b8a356141e281613e59565b995060208b0135985060408b0135975060608b0135965060808b013561420781613e59565b955060a08b0135945060c08b013561421e816140ee565b935061422c60e08c016140fc565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060008060006080868803121561426557600080fd5b85359450602086013567ffffffffffffffff81111561428357600080fd5b61428f88828901613f0b565b90955093505060408601356142a381613e59565b949793965091946060013592915050565b600080600080600080600060e0888a0312156142cf57600080fd5b87356142da81613e59565b965060208801356142ea81613e59565b955060408801359450606088013593506080880135925060a088013561430f81613e59565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b03121561434357600080fd5b883561434e81613e59565b9750602089013561435e81613e59565b965060408901359550606089013594506080890135935060a0890135925060c089013561438a81613e59565b8092505060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4b57610a4b6143a2565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156143f357600080fd5b81356143fe81613e59565b9392505050565b60006020828403121561441757600080fd5b5051919050565b60006020828403121561443057600080fd5b81516143fe816140ee565b6000806040838503121561444e57600080fd5b505080516020909101519092909150565b60005b8381101561447a578181015183820152602001614462565b50506000910152565b6000825161449581846020870161445f565b9190910192915050565b8082028115828204841417610a4b57610a4b6143a2565b80820180821115610a4b57610a4b6143a2565b6000826144e657634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016144fd576144fd6143a2565b5060010190565b8481528360208201526001600160a01b0383166040820152608060608201526000825180608084015261453e8160a085016020870161445f565b601f01601f19169190910160a00195945050505050565b600081614564576145646143a2565b506000190190565b80516dffffffffffffffffffffffffffff81168114613e7c57600080fd5b60008060006060848603121561459f57600080fd5b6145a88461456c565b92506145b66020850161456c565b9150604084015163ffffffff811681146145cf57600080fd5b809150509250925092565b6000602082840312156145ec57600080fd5b81516143fe81613e5956fe556e69737761705632526f757465723a20455850495245440000000000000000a164736f6c6343000814000a",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80638803dbee116100d6578063c45a01551161007f578063e8e3370011610059578063e8e33700146104ce578063f305d71914610509578063fb3bdb411461051c57600080fd5b8063c45a01551461045a578063d06ca61f1461048e578063ded9382a146104ae57600080fd5b8063af2979eb116100b0578063af2979eb14610407578063b6f9de9514610427578063baa2abde1461043a57600080fd5b80638803dbee1461037b578063ad5c46481461039b578063ad615dec146103e757600080fd5b80634a25d94a11610138578063791ac94711610112578063791ac947146103285780637ff36ab51461034857806385f8c2591461035b57600080fd5b80634a25d94a146102c85780635b0d5984146102e85780635c11d7951461030857600080fd5b80631f00ca74116101695780631f00ca74146102685780632195995c1461028857806338ed1739146102a857600080fd5b806302751cec146101d3578063054d50d41461020d57806318cbafe51461023b57600080fd5b366101ce57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101cc576101cc613e43565b005b600080fd5b3480156101df57600080fd5b506101f36101ee366004613e81565b61052f565b604080519283526020830191909152015b60405180910390f35b34801561021957600080fd5b5061022d610228366004613edf565b610645565b604051908152602001610204565b34801561024757600080fd5b5061025b610256366004613f50565b61065a565b6040516102049190613fc3565b34801561027457600080fd5b5061025b61028336600461401d565b610a1b565b34801561029457600080fd5b506101f36102a336600461410d565b610a51565b3480156102b457600080fd5b5061025b6102c3366004613f50565b610b44565b3480156102d457600080fd5b5061025b6102e3366004613f50565b610cc4565b3480156102f457600080fd5b5061022d6103033660046141b7565b610e90565b34801561031457600080fd5b506101cc610323366004613f50565b610f97565b34801561033457600080fd5b506101cc610343366004613f50565b61125c565b61025b61035636600461424d565b611515565b34801561036757600080fd5b5061022d610376366004613edf565b6118c0565b34801561038757600080fd5b5061025b610396366004613f50565b6118cd565b3480156103a757600080fd5b506103cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610204565b3480156103f357600080fd5b5061022d610402366004613edf565b6119e8565b34801561041357600080fd5b5061022d610422366004613e81565b6119f5565b6101cc61043536600461424d565b611b62565b34801561044657600080fd5b506101f36104553660046142b4565b611eff565b34801561046657600080fd5b506103cf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561049a57600080fd5b5061025b6104a936600461401d565b612163565b3480156104ba57600080fd5b506101f36104c93660046141b7565b612190565b3480156104da57600080fd5b506104ee6104e9366004614326565b61229d565b60408051938452602084019290925290820152606001610204565b6104ee610517366004613e81565b6123b9565b61025b61052a36600461424d565b612636565b60008082428110156105765760405162461bcd60e51b815260206004820152601860248201526000805160206145f883398151915260448201526064015b60405180910390fd5b6105a5897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611eff565b90935091506105b5898685612a13565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b505050506106398583612b69565b50965096945050505050565b6000610652848484612c51565b949350505050565b6060814281101561069b5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866106d26001826143b8565b8181106106e1576106e16143cb565b90506020020160208101906106f691906143e1565b6001600160a01b03161461074c5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b6107aa7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d8392505050565b91508682600184516107bc91906143b8565b815181106107cc576107cc6143cb565b602002602001015110156108365760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b6108fb8686600081811061084c5761084c6143cb565b905060200201602081019061086191906143e1565b336108db7f00000000000000000000000000000000000000000000000000000000000000008a8a6000818110610899576108996143cb565b90506020020160208101906108ae91906143e1565b8b8b60018181106108c1576108c16143cb565b90506020020160208101906108d691906143e1565b612f0e565b856000815181106108ee576108ee6143cb565b6020026020010151612fea565b61093a82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613149915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161097891906143b8565b81518110610988576109886143cb565b60200260200101516040518263ffffffff1660e01b81526004016109ae91815260200190565b600060405180830381600087803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b50505050610a108483600185516109f391906143b8565b81518110610a0357610a036143cb565b6020026020010151612b69565b509695505050505050565b6060610a487f00000000000000000000000000000000000000000000000000000000000000008484613351565b90505b92915050565b6000806000610a817f00000000000000000000000000000000000000000000000000000000000000008f8f612f0e565b9050600087610a90578c610a94565b6000195b60405163d505accf60e01b815233600482015230602482015260448101829052606481018b905260ff8916608482015260a4810188905260c481018790529091506001600160a01b0383169063d505accf9060e401600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b50505050610b2a8f8f8f8f8f8f8f611eff565b809450819550505050509b509b9950505050505050505050565b60608142811015610b855760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b610be37f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d8392505050565b9150868260018451610bf591906143b8565b81518110610c0557610c056143cb565b60200260200101511015610c6f5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b610c858686600081811061084c5761084c6143cb565b610a1082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613149915050565b60608142811015610d055760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610d3c6001826143b8565b818110610d4b57610d4b6143cb565b9050602002016020810190610d6091906143e1565b6001600160a01b031614610db65760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b610e147f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061335192505050565b91508682600081518110610e2a57610e2a6143cb565b602002602001015111156108365760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161056d565b600080610ede7f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612f0e565b9050600086610eed578b610ef1565b6000195b60405163d505accf60e01b815233600482015230602482015260448101829052606481018a905260ff8816608482015260a4810187905260c481018690529091506001600160a01b0383169063d505accf9060e401600060405180830381600087803b158015610f6057600080fd5b505af1158015610f74573d6000803e3d6000fd5b50505050610f868d8d8d8d8d8d6119f5565b9d9c50505050505050505050505050565b8042811015610fd65760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b61106785856000818110610fec57610fec6143cb565b905060200201602081019061100191906143e1565b336110617f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b905060200201602081019061104e91906143e1565b8a8a60018181106108c1576108c16143cb565b8a612fea565b600085856110766001826143b8565b818110611085576110856143cb565b905060200201602081019061109a91906143e1565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190614405565b90506111468686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892506134d2915050565b868187876111556001826143b8565b818110611164576111646143cb565b905060200201602081019061117991906143e1565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a08231906024015b602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190614405565b6111f091906143b8565b10156112525760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b5050505050505050565b804281101561129b5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856112d26001826143b8565b8181106112e1576112e16143cb565b90506020020160208101906112f691906143e1565b6001600160a01b03161461134c5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b61136285856000818110610fec57610fec6143cb565b6113a08585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506134d2915050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190614405565b9050868110156114915760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156114f357600080fd5b505af1158015611507573d6000803e3d6000fd5b505050506112528482612b69565b606081428110156115565760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110611593576115936143cb565b90506020020160208101906115a891906143e1565b6001600160a01b0316146115fe5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b61165c7f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d8392505050565b915086826001845161166e91906143b8565b8151811061167e5761167e6143cb565b602002602001015110156116e85760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061172a5761172a6143cb565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6117dc7f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b846000815181106117ef576117ef6143cb565b60200260200101516040518363ffffffff1660e01b81526004016118289291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186b919061441e565b61187757611877613e43565b6118b682878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613149915050565b5095945050505050565b60006106528484846137ba565b6060814281101561190e5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b61196c7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061335192505050565b91508682600081518110611982576119826143cb565b60200260200101511115610c6f5760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161056d565b60006106528484846138f1565b60008142811015611a365760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b611a65887f00000000000000000000000000000000000000000000000000000000000000008989893089611eff565b6040516370a0823160e01b8152306004820152909350611ade9150899086906001600160a01b038316906370a0823190602401602060405180830381865afa158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190614405565b612a13565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611b4057600080fd5b505af1158015611b54573d6000803e3d6000fd5b50505050610a108483612b69565b8042811015611ba15760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685856000818110611bde57611bde6143cb565b9050602002016020810190611bf391906143e1565b6001600160a01b031614611c495760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ca957600080fd5b505af1158015611cbd573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611d287f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db1919061441e565b611dbd57611dbd613e43565b60008686611dcc6001826143b8565b818110611ddb57611ddb6143cb565b9050602002016020810190611df091906143e1565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa158015611e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5c9190614405565b9050611e9c8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506134d2915050565b87818888611eab6001826143b8565b818110611eba57611eba6143cb565b9050602002016020810190611ecf91906143e1565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024016111a5565b6000808242811015611f415760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6000611f6e7f00000000000000000000000000000000000000000000000000000000000000008c8c612f0e565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe8919061441e565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015612035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612059919061443b565b9150915060006120698e8e6139d2565b509050806001600160a01b03168e6001600160a01b03161461208c57818361208f565b82825b90975095508a8710156120f35760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161056d565b898610156121525760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161056d565b505050505097509795505050505050565b6060610a487f00000000000000000000000000000000000000000000000000000000000000008484612d83565b60008060006121e07f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612f0e565b90506000876121ef578c6121f3565b6000195b60405163d505accf60e01b815233600482015230602482015260448101829052606481018b905260ff8916608482015260a4810188905260c481018790529091506001600160a01b0383169063d505accf9060e401600060405180830381600087803b15801561226257600080fd5b505af1158015612276573d6000803e3d6000fd5b505050506122888e8e8e8e8e8e61052f565b909f909e509c50505050505050505050505050565b600080600083428110156122e15760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b6122ef8c8c8c8c8c8c613ac9565b909450925060006123217f00000000000000000000000000000000000000000000000000000000000000008e8e612f0e565b905061232f8d338388612fea565b61233b8c338387612fea565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015612383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a79190614405565b92505050985098509895505050505050565b600080600083428110156123fd5760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b61242b8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613ac9565b9094509250600061247d7f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612f0e565b905061248b8b338388612fea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156124e657600080fd5b505af11580156124fa573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af115801561256f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612593919061441e565b61259f5761259f613e43565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190614405565b925083341115612628576126283361262386346143b8565b612b69565b505096509650969350505050565b606081428110156126775760405162461bcd60e51b815260206004820152601860248201526000805160206145f8833981519152604482015260640161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106126b4576126b46143cb565b90506020020160208101906126c991906143e1565b6001600160a01b03161461271f5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161056d565b61277d7f00000000000000000000000000000000000000000000000000000000000000008888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061335192505050565b91503482600081518110612793576127936143cb565b602002602001015111156127f95760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161056d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061283b5761283b6143cb565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561286e57600080fd5b505af1158015612882573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6128ed7f000000000000000000000000000000000000000000000000000000000000000089896000818110611039576110396143cb565b84600081518110612900576129006143cb565b60200260200101516040518363ffffffff1660e01b81526004016129399291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c919061441e565b61298857612988613e43565b6129c782878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613149915050565b816000815181106129da576129da6143cb565b60200260200101513411156118b6576118b63383600081518110612a0057612a006143cb565b60200260200101513461262391906143b8565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691612a849190614483565b6000604051808303816000865af19150503d8060008114612ac1576040519150601f19603f3d011682016040523d82523d6000602084013e612ac6565b606091505b5091509150818015612af0575080511580612af0575080806020019051810190612af0919061441e565b612b625760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161056d565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051612b939190614483565b60006040518083038185875af1925050503d8060008114612bd0576040519150601f19603f3d011682016040523d82523d6000602084013e612bd5565b606091505b5050905080612c4c5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c6564000000000000000000000000606482015260840161056d565b505050565b6000808411612cc85760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161056d565b600083118015612cd85750600082115b612d355760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161056d565b6000612d43856103e561449f565b90506000612d51848361449f565b9050600082612d62876103e861449f565b612d6c91906144b6565b9050612d7881836144c9565b979650505050505050565b6060600282511015612dd75760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161056d565b815167ffffffffffffffff811115612df157612df1614007565b604051908082528060200260200182016040528015612e1a578160200160208202803683370190505b5090508281600081518110612e3157612e316143cb565b60200260200101818152505060005b60018351612e4e91906143b8565b811015612f0657600080612ea187868581518110612e6e57612e6e6143cb565b602002602001015187866001612e8491906144b6565b81518110612e9457612e946143cb565b6020026020010151613d6b565b91509150612ec9848481518110612eba57612eba6143cb565b60200260200101518383612c51565b84612ed58560016144b6565b81518110612ee557612ee56143cb565b60200260200101818152505050508080612efe906144eb565b915050612e40565b509392505050565b6000806000612f1d85856139d2565b604080516bffffffffffffffffffffffff19606085811b821660208085019190915285821b83166034850152845180850360280181526048850190955284519401939093207fff000000000000000000000000000000000000000000000000000000000000006068840152928b901b166069820152607d8101919091527f3d31509ef86f669cb331d1ce6afc2ed8809dcb1b0c4ba6121a4f9128c22b1c1f609d820152919350915060bd0160408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916130639190614483565b6000604051808303816000865af19150503d80600081146130a0576040519150601f19603f3d011682016040523d82523d6000602084013e6130a5565b606091505b50915091508180156130cf5750805115806130cf5750808060200190518101906130cf919061441e565b6131415760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840161056d565b505050505050565b60005b6001835161315a91906143b8565b81101561334b57600080848381518110613176576131766143cb565b60200260200101518584600161318c91906144b6565b8151811061319c5761319c6143cb565b60200260200101519150915060006131b483836139d2565b5090506000876131c58660016144b6565b815181106131d5576131d56143cb565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461320357826000613207565b6000835b91509150600060028a5161321b91906143b8565b88106132275788613275565b6132757f0000000000000000000000000000000000000000000000000000000000000000878c6132588c60026144b6565b81518110613268576132686143cb565b6020026020010151612f0e565b90506132a27f00000000000000000000000000000000000000000000000000000000000000008888612f0e565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f1916602001820160405280156132df576020820181803683370190505b506040518563ffffffff1660e01b81526004016132ff9493929190614504565b600060405180830381600087803b15801561331957600080fd5b505af115801561332d573d6000803e3d6000fd5b50505050505050505050508080613343906144eb565b91505061314c565b50505050565b60606002825110156133a55760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161056d565b815167ffffffffffffffff8111156133bf576133bf614007565b6040519080825280602002602001820160405280156133e8578160200160208202803683370190505b5090508281600183516133fb91906143b8565b8151811061340b5761340b6143cb565b60200260200101818152505060006001835161342791906143b8565b90505b8015612f065760008061346d87866134436001876143b8565b81518110613453576134536143cb565b6020026020010151878681518110612e9457612e946143cb565b91509150613495848481518110613486576134866143cb565b602002602001015183836137ba565b846134a16001866143b8565b815181106134b1576134b16143cb565b602002602001018181525050505080806134ca90614555565b91505061342a565b60005b600183516134e391906143b8565b811015612c4c576000808483815181106134ff576134ff6143cb565b60200260200101518584600161351591906144b6565b81518110613525576135256143cb565b602002602001015191509150600061353d83836139d2565b509050600061356d7f00000000000000000000000000000000000000000000000000000000000000008585612f0e565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156135b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d7919061458a565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080876001600160a01b03168a6001600160a01b03161461361f578284613622565b83835b6040516370a0823160e01b81526001600160a01b038a8116600483015292945090925083918c16906370a0823190602401602060405180830381865afa158015613670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136949190614405565b61369e91906143b8565b95506136ab868383612c51565b945050505050600080856001600160a01b0316886001600160a01b0316146136d5578260006136d9565b6000835b91509150600060028c516136ed91906143b8565b8a106136f9578a61372a565b61372a7f0000000000000000000000000000000000000000000000000000000000000000898e6132588e60026144b6565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f9061376c9086908690869060248101614504565b600060405180830381600087803b15801561378657600080fd5b505af115801561379a573d6000803e3d6000fd5b5050505050505050505050505080806137b2906144eb565b9150506134d5565b60008084116138315760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e540000000000000000000000000000000000000000606482015260840161056d565b6000831180156138415750600082115b61389e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161056d565b60006138aa858561449f565b6138b6906103e861449f565b905060006138c486856143b8565b6138d0906103e561449f565b90506138dc81836144c9565b6138e79060016144b6565b9695505050505050565b60008084116139505760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b606482015260840161056d565b6000831180156139605750600082115b6139bd5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161056d565b826139c8838661449f565b61065291906144c9565b600080826001600160a01b0316846001600160a01b031603613a445760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b606482015260840161056d565b826001600160a01b0316846001600160a01b031610613a64578284613a67565b83835b90925090506001600160a01b038216613ac25760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161056d565b9250929050565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015613b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6491906145da565b6001600160a01b031603613c08576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af1158015613be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0691906145da565b505b600080613c367f00000000000000000000000000000000000000000000000000000000000000008b8b613d6b565b91509150816000148015613c48575080155b15613c5857879350869250613d5e565b6000613c658984846138f1565b9050878111613cd85785811015613ccd5760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161056d565b889450925082613d5c565b6000613ce58984866138f1565b905089811115613cf757613cf7613e43565b87811015613d565760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161056d565b94508793505b505b5050965096945050505050565b6000806000613d7a85856139d2565b509050600080613d8b888888612f0e565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dec919061458a565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b031614613e31578082613e34565b81815b90999098509650505050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114613e6e57600080fd5b50565b8035613e7c81613e59565b919050565b60008060008060008060c08789031215613e9a57600080fd5b8635613ea581613e59565b95506020870135945060408701359350606087013592506080870135613eca81613e59565b8092505060a087013590509295509295509295565b600080600060608486031215613ef457600080fd5b505081359360208301359350604090920135919050565b60008083601f840112613f1d57600080fd5b50813567ffffffffffffffff811115613f3557600080fd5b6020830191508360208260051b8501011115613ac257600080fd5b60008060008060008060a08789031215613f6957600080fd5b8635955060208701359450604087013567ffffffffffffffff811115613f8e57600080fd5b613f9a89828a01613f0b565b9095509350506060870135613fae81613e59565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613ffb57835183529284019291840191600101613fdf565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561403057600080fd5b8235915060208084013567ffffffffffffffff8082111561405057600080fd5b818601915086601f83011261406457600080fd5b81358181111561407657614076614007565b8060051b604051601f19603f8301168101818110858211171561409b5761409b614007565b6040529182528482019250838101850191898311156140b957600080fd5b938501935b828510156140de576140cf85613e71565b845293850193928501926140be565b8096505050505050509250929050565b8015158114613e6e57600080fd5b803560ff81168114613e7c57600080fd5b60008060008060008060008060008060006101608c8e03121561412f57600080fd5b8b3561413a81613e59565b9a5060208c013561414a81613e59565b995060408c0135985060608c0135975060808c0135965060a08c013561416f81613e59565b955060c08c0135945060e08c0135614186816140ee565b93506141956101008d016140fc565b92506101208c013591506101408c013590509295989b509295989b9093969950565b6000806000806000806000806000806101408b8d0312156141d757600080fd5b8a356141e281613e59565b995060208b0135985060408b0135975060608b0135965060808b013561420781613e59565b955060a08b0135945060c08b013561421e816140ee565b935061422c60e08c016140fc565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060008060006080868803121561426557600080fd5b85359450602086013567ffffffffffffffff81111561428357600080fd5b61428f88828901613f0b565b90955093505060408601356142a381613e59565b949793965091946060013592915050565b600080600080600080600060e0888a0312156142cf57600080fd5b87356142da81613e59565b965060208801356142ea81613e59565b955060408801359450606088013593506080880135925060a088013561430f81613e59565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b03121561434357600080fd5b883561434e81613e59565b9750602089013561435e81613e59565b965060408901359550606089013594506080890135935060a0890135925060c089013561438a81613e59565b8092505060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4b57610a4b6143a2565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156143f357600080fd5b81356143fe81613e59565b9392505050565b60006020828403121561441757600080fd5b5051919050565b60006020828403121561443057600080fd5b81516143fe816140ee565b6000806040838503121561444e57600080fd5b505080516020909101519092909150565b60005b8381101561447a578181015183820152602001614462565b50506000910152565b6000825161449581846020870161445f565b9190910192915050565b8082028115828204841417610a4b57610a4b6143a2565b80820180821115610a4b57610a4b6143a2565b6000826144e657634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016144fd576144fd6143a2565b5060010190565b8481528360208201526001600160a01b0383166040820152608060608201526000825180608084015261453e8160a085016020870161445f565b601f01601f19169190910160a00195945050505050565b600081614564576145646143a2565b506000190190565b80516dffffffffffffffffffffffffffff81168114613e7c57600080fd5b60008060006060848603121561459f57600080fd5b6145a88461456c565b92506145b66020850161456c565b9150604084015163ffffffff811681146145cf57600080fd5b809150509250925092565b6000602082840312156145ec57600080fd5b81516143fe81613e5956fe556e69737761705632526f757465723a20455850495245440000000000000000a164736f6c6343000814000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}