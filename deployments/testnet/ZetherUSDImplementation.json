{
  "address": "0x76A8AA8276246E761Cc03C4c2C6C6D8Bb33f35DF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddressFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddressUnfrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAssetProtectionRole",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAssetProtectionRole",
          "type": "address"
        }
      ],
      "name": "AssetProtectionRoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldDelegate",
          "type": "address"
        }
      ],
      "name": "BetaDelegateUnwhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDelegate",
          "type": "address"
        }
      ],
      "name": "BetaDelegateWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldWhitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWhitelister",
          "type": "address"
        }
      ],
      "name": "BetaDelegateWhitelisterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seq",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "BetaDelegatedTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FrozenAddressWiped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldProposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferDisregarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSupplyController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSupplyController",
          "type": "address"
        }
      ],
      "name": "SupplyControllerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SupplyDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SupplyIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetProtectionRole",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betaDelegateWhitelister",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "betaDelegatedTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "value",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fee",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "seq",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deadline",
          "type": "uint256[]"
        }
      ],
      "name": "betaDelegatedTransferBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "decreaseSupply",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disregardProposeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseSupply",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isWhitelistedBetaDelegate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "nextSeqOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedOwner",
          "type": "address"
        }
      ],
      "name": "proposeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reclaimUSDZ",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAssetProtectionRole",
          "type": "address"
        }
      ],
      "name": "setAssetProtectionRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWhitelister",
          "type": "address"
        }
      ],
      "name": "setBetaDelegateWhitelister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSupplyController",
          "type": "address"
        }
      ],
      "name": "setSupplyController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "unwhitelistBetaDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "whitelistBetaDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "wipeFrozenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02cc3a7099539c5423043cfb28514fdaa64ddb3e9b8d1b89b70d7128c2bd7811",
  "receipt": {
    "to": null,
    "from": "0x964f223Ee3E166F26a91F4Bc5fCf7c3712349d76",
    "contractAddress": "0x76A8AA8276246E761Cc03C4c2C6C6D8Bb33f35DF",
    "transactionIndex": 2,
    "gasUsed": "2784707",
    "logsBloom": "0x
    "blockHash": "0x3048913e5b689565e7edc006285d06fe62eb33186cf42c9de21223a1b7ea9004",
    "transactionHash": "0x02cc3a7099539c5423043cfb28514fdaa64ddb3e9b8d1b89b70d7128c2bd7811",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8088532,
        "transactionHash": "0x02cc3a7099539c5423043cfb28514fdaa64ddb3e9b8d1b89b70d7128c2bd7811",
        "address": "0x76A8AA8276246E761Cc03C4c2C6C6D8Bb33f35DF",
        "topics": [
          "0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3048913e5b689565e7edc006285d06fe62eb33186cf42c9de21223a1b7ea9004"
      }
    ],
    "blockNumber": 8088532,
    "cumulativeGasUsed": "2895312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c3ab9f629a42a66663a365c36426c8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAssetProtectionRole\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAssetProtectionRole\",\"type\":\"address\"}],\"name\":\"AssetProtectionRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"}],\"name\":\"BetaDelegateUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"BetaDelegateWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"BetaDelegateWhitelisterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BetaDelegatedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FrozenAddressWiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferDisregarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSupplyController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSupplyController\",\"type\":\"address\"}],\"name\":\"SupplyControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetProtectionRole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betaDelegateWhitelister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"betaDelegatedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seq\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadline\",\"type\":\"uint256[]\"}],\"name\":\"betaDelegatedTransferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disregardProposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelistedBetaDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"nextSeqOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimUSDZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAssetProtectionRole\",\"type\":\"address\"}],\"name\":\"setAssetProtectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"setBetaDelegateWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSupplyController\",\"type\":\"address\"}],\"name\":\"setSupplyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unwhitelistBetaDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"whitelistBetaDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"wipeFrozenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"boolean\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_addr\":\"The address to query the the balance of.\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address.\"}},\"betaDelegatedTransfer(bytes,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Performs a transfer on behalf of the from address, identified by its signature on the delegatedTransfer msg. Splits a signature byte array into r,s,v for convenience.\",\"params\":{\"deadline\":\"a block number after which the pre-signed transaction has expired.\",\"fee\":\"an optional ERC20 fee paid to the executor of betaDelegatedTransfer by the from address.\",\"seq\":\"a sequencing number included by the from address specific to this contract to protect from replays.\",\"sig\":\"the signature of the delgatedTransfer msg.\",\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"betaDelegatedTransferBatch(bytes32[],bytes32[],uint8[],address[],uint256[],uint256[],uint256[],uint256[])\":{\"details\":\"Performs an atomic batch of transfers on behalf of the from addresses, identified by their signatures. Lack of nested array support in arguments requires all arguments to be passed as equal size arrays where delegated transfer number i is the combination of all arguments at index i\",\"params\":{\"deadline\":\"block numbers after which the pre-signed transactions have expired.\",\"fee\":\"optional ERC20 fees paid to the delegate of betaDelegatedTransfer by the from address.\",\"r\":\"the r signatures of the delgatedTransfer msg.\",\"s\":\"the s signatures of the delgatedTransfer msg.\",\"seq\":\"sequencing numbers included by the from address specific to this contract to protect from replays.\",\"to\":\"The addresses to transfer to.\",\"v\":\"the v signatures of the delgatedTransfer msg.\",\"value\":\"The amounts to be transferred.\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"claimOwnership()\":{\"details\":\"Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\"},\"decreaseSupply(uint256)\":{\"details\":\"Decreases the total supply by burning the specified number of tokens from the supply controller account.\",\"params\":{\"_value\":\"The number of tokens to remove.\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"disregardProposeOwner()\":{\"details\":\"Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\"},\"freeze(address)\":{\"details\":\"Freezes an address balance from being transferred.\",\"params\":{\"_addr\":\"The new address to freeze.\"}},\"increaseSupply(uint256)\":{\"details\":\"Increases the total supply by minting the specified number of tokens to the supply controller account.\",\"params\":{\"_value\":\"The number of tokens to add.\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"initialize()\":{\"details\":\"sets 0 initials tokens, the owner, and the supplyController. this serves as the constructor for the proxy but compiles to the memory model of the Implementation contract.\"},\"initializeDomainSeparator()\":{\"details\":\"To be called when upgrading the contract using upgradeAndCall to add delegated transfers\"},\"isFrozen(address)\":{\"details\":\"Gets whether the address is currently frozen.\",\"params\":{\"_addr\":\"The address to check if frozen.\"},\"returns\":{\"_0\":\"A bool representing whether the given address is frozen.\"}},\"isWhitelistedBetaDelegate(address)\":{\"details\":\"Gets whether the address is currently whitelisted for betaDelegateTransfer.\",\"params\":{\"_addr\":\"The address to check if whitelisted.\"},\"returns\":{\"_0\":\"A bool representing whether the given address is whitelisted.\"}},\"nextSeqOf(address)\":{\"details\":\"returns the next seq for a target address. The transactor must submit nextSeqOf(transactor) in the next transaction for it to be valid. Note: that the seq context is specific to this smart contract.\",\"params\":{\"target\":\"The target address.\"},\"returns\":{\"_0\":\"the seq.\"}},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"proposeOwner(address)\":{\"details\":\"Allows the current owner to begin transferring control of the contract to a proposedOwner\",\"params\":{\"_proposedOwner\":\"The address to transfer ownership to.\"}},\"reclaimUSDZ()\":{\"details\":\"Reclaim all USDZ at the contract address. This sends the USDZ tokens that this contract add holding to the owner. Note: this is not affected by freeze constraints.\"},\"setAssetProtectionRole(address)\":{\"details\":\"Sets a new asset Protection role address.\",\"params\":{\"_newAssetProtectionRole\":\"The new address allowed to freeze/unfreeze addresses and seize their tokens.\"}},\"setBetaDelegateWhitelister(address)\":{\"details\":\"Sets a new betaDelegate whitelister.\",\"params\":{\"_newWhitelister\":\"The address allowed to whitelist betaDelegates.\"}},\"setSupplyController(address)\":{\"details\":\"Sets a new supply controller address.\",\"params\":{\"_newSupplyController\":\"The address allowed to burn/mint tokens to control supply.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token to a specified address from msg.sender Note: the use of Safemath ensures that _value is nonnegative.\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"},\"returns\":{\"_0\":\"boolean\"}},\"unfreeze(address)\":{\"details\":\"Unfreezes an address balance allowing transfer.\",\"params\":{\"_addr\":\"The new address to unfreeze.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"unwhitelistBetaDelegate(address)\":{\"details\":\"Unwhitelists an address to disallow calling BetaDelegatedTransfer.\",\"params\":{\"_addr\":\"The new address to whitelist.\"}},\"whitelistBetaDelegate(address)\":{\"details\":\"Whitelists an address to allow calling BetaDelegatedTransfer.\",\"params\":{\"_addr\":\"The new address to whitelist.\"}},\"wipeFrozenAddress(address)\":{\"details\":\"Wipes the balance of a frozen address, burning the tokens and setting the approval to zero.\",\"params\":{\"_addr\":\"The new frozen address to wipe.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"The constructor is used here to ensure that the implementation contract is initialized. An uncontrolled implementation contract might lead to misleading state for users who accidentally interact with it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zUSD4.sol\":\"ZetherUSDImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":777},\"remappings\":[]},\"sources\":{\"contracts/libraries/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(\\n        uint256 a,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return\\n                result +\\n                (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return\\n                result +\\n                (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return\\n                result +\\n                (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return\\n                result +\\n                (\\n                    unsignedRoundsUp(rounding) && 1 << (result << 3) < value\\n                        ? 1\\n                        : 0\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x2b71c2967721b308a22e275b3004100d6cdbe41b92b54c0f694af4036c5c96c6\",\"license\":\"MIT\"},\"contracts/zUSD4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {SafeMath} from \\\"./libraries/openzeppelin/SafeMath.sol\\\";\\n\\ncontract ZetherUSDImplementation {\\n    using SafeMath for uint256;\\n    bool private initialized = false;\\n\\n    mapping(address => uint256) internal balances;\\n    uint256 internal _totalSupply_;\\n    string public constant name = \\\"Zether USD\\\";\\n    string public constant symbol = \\\"zUSD\\\";\\n    uint8 public constant decimals = 18;\\n\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n\\n    address public owner;\\n    address public proposedOwner;\\n    bool public paused = false;\\n    address public assetProtectionRole;\\n    mapping(address => bool) internal frozen;\\n\\n    address public supplyController;\\n\\n    address public betaDelegateWhitelister;\\n    mapping(address => bool) internal betaDelegateWhitelist;\\n    mapping(address => uint256) internal nextSeqs;\\n    // EIP191 header for EIP712 prefix\\n    string internal constant EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n    // Hash of the EIP712 Domain Separator Schema\\n    bytes32 internal constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH =\\n        keccak256(\\\"EIP712Domain(string name,address verifyingContract)\\\");\\n    bytes32 internal constant EIP712_DELEGATED_TRANSFER_SCHEMA_HASH =\\n        keccak256(\\n            \\\"BetaDelegatedTransfer(address to,uint256 value,uint256 fee,uint256 seq,uint256 deadline)\\\"\\n        );\\n    // Hash of the EIP712 Domain Separator data\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public EIP712_DOMAIN_HASH;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event OwnershipTransferProposed(\\n        address indexed currentOwner,\\n        address indexed proposedOwner\\n    );\\n    event OwnershipTransferDisregarded(address indexed oldProposedOwner);\\n    event OwnershipTransferred(\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n    event Pause();\\n    event Unpause();\\n\\n    event AddressFrozen(address indexed addr);\\n    event AddressUnfrozen(address indexed addr);\\n    event FrozenAddressWiped(address indexed addr);\\n    event AssetProtectionRoleSet(\\n        address indexed oldAssetProtectionRole,\\n        address indexed newAssetProtectionRole\\n    );\\n\\n    event SupplyIncreased(address indexed to, uint256 value);\\n    event SupplyDecreased(address indexed from, uint256 value);\\n    event SupplyControllerSet(\\n        address indexed oldSupplyController,\\n        address indexed newSupplyController\\n    );\\n\\n    event BetaDelegatedTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value,\\n        uint256 seq,\\n        uint256 fee\\n    );\\n    event BetaDelegateWhitelisterSet(\\n        address indexed oldWhitelister,\\n        address indexed newWhitelister\\n    );\\n    event BetaDelegateWhitelisted(address indexed newDelegate);\\n    event BetaDelegateUnwhitelisted(address indexed oldDelegate);\\n\\n    /**\\n     * @dev sets 0 initials tokens, the owner, and the supplyController.\\n     * this serves as the constructor for the proxy but compiles to the\\n     * memory model of the Implementation contract.\\n     */\\n    function initialize() public {\\n        require(!initialized, \\\"already initialized\\\");\\n        owner = msg.sender;\\n        proposedOwner = address(0);\\n        assetProtectionRole = address(0);\\n        _totalSupply_ = 0;\\n        supplyController = msg.sender;\\n        initialized = true;\\n    }\\n\\n    /**\\n     * The constructor is used here to ensure that the implementation\\n     * contract is initialized. An uncontrolled implementation\\n     * contract might lead to misleading state\\n     * for users who accidentally interact with it.\\n     */\\n    constructor() {\\n        initialize();\\n        pause();\\n        initializeDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev To be called when upgrading the contract using upgradeAndCall to add delegated transfers\\n     */\\n    function initializeDomainSeparator() public {\\n        // hash the name context with the contract address\\n        EIP712_DOMAIN_HASH = keccak256(\\n            abi.encode( // solium-disable-line\\n                    EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n                    keccak256(bytes(name)),\\n                    address(this)\\n                )\\n        );\\n    }\\n\\n    /**\\n     * @dev Total number of tokens in existence\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply_;\\n    }\\n\\n    /**\\n     * @dev Transfer token to a specified address from msg.sender\\n     * Note: the use of Safemath ensures that _value is nonnegative.\\n     * @param _to The address to transfer to.\\n     * @param _value The amount to be transferred.\\n     */\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    ) public whenNotPaused returns (bool) {\\n        require(_to != address(0), \\\"cannot transfer to address zero\\\");\\n        require(!frozen[_to] && !frozen[msg.sender], \\\"address frozen\\\");\\n        require(_value <= balances[msg.sender], \\\"insufficient funds\\\");\\n\\n        balances[msg.sender] = balances[msg.sender] - _value;\\n        balances[_to] = balances[_to] + _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _addr The address to query the the balance of.\\n     * @return An uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address _addr) public view returns (uint256) {\\n        return balances[_addr];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     * @return boolean\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public whenNotPaused returns (bool) {\\n        require(_to != address(0), \\\"cannot transfer to address zero\\\");\\n        require(\\n            !frozen[_to] && !frozen[_from] && !frozen[msg.sender],\\n            \\\"address frozen\\\"\\n        );\\n        require(_value <= balances[_from], \\\"insufficient funds\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"insufficient allowance\\\");\\n\\n        balances[_from] = balances[_from] - _value;\\n        balances[_to] = balances[_to] + _value;\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return boolean\\n     */\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) public whenNotPaused returns (bool) {\\n        require(!frozen[_spender] && !frozen[msg.sender], \\\"address frozen\\\");\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"onlyOwner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to begin transferring control of the contract to a proposedOwner\\n     * @param _proposedOwner The address to transfer ownership to.\\n     */\\n    function proposeOwner(address _proposedOwner) public onlyOwner {\\n        require(\\n            _proposedOwner != address(0),\\n            \\\"cannot transfer ownership to address zero\\\"\\n        );\\n        require(msg.sender != _proposedOwner, \\\"caller already is owner\\\");\\n        proposedOwner = _proposedOwner;\\n        emit OwnershipTransferProposed(owner, proposedOwner);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\\n     */\\n    function disregardProposeOwner() public {\\n        require(\\n            msg.sender == proposedOwner || msg.sender == owner,\\n            \\\"only proposedOwner or owner\\\"\\n        );\\n        require(\\n            proposedOwner != address(0),\\n            \\\"can only disregard a proposed owner that was previously set\\\"\\n        );\\n        address _oldProposedOwner = proposedOwner;\\n        proposedOwner = address(0);\\n        emit OwnershipTransferDisregarded(_oldProposedOwner);\\n    }\\n\\n    /**\\n     * @dev Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\\n     */\\n    function claimOwnership() public {\\n        require(msg.sender == proposedOwner, \\\"onlyProposedOwner\\\");\\n        address _oldOwner = owner;\\n        owner = proposedOwner;\\n        proposedOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, owner);\\n    }\\n\\n    /**\\n     * @dev Reclaim all USDZ at the contract address.\\n     * This sends the USDZ tokens that this contract add holding to the owner.\\n     * Note: this is not affected by freeze constraints.\\n     */\\n    function reclaimUSDZ() external onlyOwner {\\n        uint256 _balance = balances[address(this)];\\n        balances[address(this)] = 0;\\n        balances[owner] = balances[owner] + _balance;\\n        emit Transfer(address(this), owner, _balance);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"whenNotPaused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() public onlyOwner {\\n        require(!paused, \\\"already paused\\\");\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() public onlyOwner {\\n        require(paused, \\\"already unpaused\\\");\\n        paused = false;\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @dev Sets a new asset Protection role address.\\n     * @param _newAssetProtectionRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\\n     */\\n    function setAssetProtectionRole(address _newAssetProtectionRole) public {\\n        require(\\n            msg.sender == assetProtectionRole || msg.sender == owner,\\n            \\\"only assetProtectionRole or Owner\\\"\\n        );\\n        emit AssetProtectionRoleSet(\\n            assetProtectionRole,\\n            _newAssetProtectionRole\\n        );\\n        assetProtectionRole = _newAssetProtectionRole;\\n    }\\n\\n    modifier onlyAssetProtectionRole() {\\n        require(msg.sender == assetProtectionRole, \\\"onlyAssetProtectionRole\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Freezes an address balance from being transferred.\\n     * @param _addr The new address to freeze.\\n     */\\n    function freeze(address _addr) public onlyAssetProtectionRole {\\n        require(!frozen[_addr], \\\"address already frozen\\\");\\n        frozen[_addr] = true;\\n        emit AddressFrozen(_addr);\\n    }\\n\\n    /**\\n     * @dev Unfreezes an address balance allowing transfer.\\n     * @param _addr The new address to unfreeze.\\n     */\\n    function unfreeze(address _addr) public onlyAssetProtectionRole {\\n        require(frozen[_addr], \\\"address already unfrozen\\\");\\n        frozen[_addr] = false;\\n        emit AddressUnfrozen(_addr);\\n    }\\n\\n    /**\\n     * @dev Wipes the balance of a frozen address, burning the tokens\\n     * and setting the approval to zero.\\n     * @param _addr The new frozen address to wipe.\\n     */\\n    function wipeFrozenAddress(address _addr) public onlyAssetProtectionRole {\\n        require(frozen[_addr], \\\"address is not frozen\\\");\\n        uint256 _balance = balances[_addr];\\n        balances[_addr] = 0;\\n        _totalSupply_ = _totalSupply_ - _balance;\\n        emit FrozenAddressWiped(_addr);\\n        emit SupplyDecreased(_addr, _balance);\\n        emit Transfer(_addr, address(0), _balance);\\n    }\\n\\n    /**\\n     * @dev Gets whether the address is currently frozen.\\n     * @param _addr The address to check if frozen.\\n     * @return A bool representing whether the given address is frozen.\\n     */\\n    function isFrozen(address _addr) public view returns (bool) {\\n        return frozen[_addr];\\n    }\\n\\n    /**\\n     * @dev Sets a new supply controller address.\\n     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.\\n     */\\n    function setSupplyController(address _newSupplyController) public {\\n        require(\\n            msg.sender == supplyController || msg.sender == owner,\\n            \\\"only SupplyController or Owner\\\"\\n        );\\n        require(\\n            _newSupplyController != address(0),\\n            \\\"cannot set supply controller to address zero\\\"\\n        );\\n        emit SupplyControllerSet(supplyController, _newSupplyController);\\n        supplyController = _newSupplyController;\\n    }\\n\\n    modifier onlySupplyController() {\\n        require(msg.sender == supplyController, \\\"onlySupplyController\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Increases the total supply by minting the specified number of tokens to the supply controller account.\\n     * @param _value The number of tokens to add.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function increaseSupply(\\n        uint256 _value\\n    ) public onlySupplyController returns (bool) {\\n        _totalSupply_ = _totalSupply_ + _value;\\n        balances[supplyController] = balances[supplyController] + _value;\\n        emit SupplyIncreased(supplyController, _value);\\n        emit Transfer(address(0), supplyController, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the total supply by burning the specified number of tokens from the supply controller account.\\n     * @param _value The number of tokens to remove.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function decreaseSupply(\\n        uint256 _value\\n    ) public onlySupplyController returns (bool) {\\n        require(_value <= balances[supplyController], \\\"not enough supply\\\");\\n        balances[supplyController] = balances[supplyController] - _value;\\n        _totalSupply_ = _totalSupply_ - _value;\\n        emit SupplyDecreased(supplyController, _value);\\n        emit Transfer(supplyController, address(0), _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev returns the next seq for a target address.\\n     * The transactor must submit nextSeqOf(transactor) in the next transaction for it to be valid.\\n     * Note: that the seq context is specific to this smart contract.\\n     * @param target The target address.\\n     * @return the seq.\\n     */\\n    //\\n    function nextSeqOf(address target) public view returns (uint256) {\\n        return nextSeqs[target];\\n    }\\n\\n    /**\\n     * @dev Performs a transfer on behalf of the from address, identified by its signature on the delegatedTransfer msg.\\n     * Splits a signature byte array into r,s,v for convenience.\\n     * @param sig the signature of the delgatedTransfer msg.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     * @param fee an optional ERC20 fee paid to the executor of betaDelegatedTransfer by the from address.\\n     * @param seq a sequencing number included by the from address specific to this contract to protect from replays.\\n     * @param deadline a block number after which the pre-signed transaction has expired.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function betaDelegatedTransfer(\\n        bytes memory sig,\\n        address to,\\n        uint256 value,\\n        uint256 fee,\\n        uint256 seq,\\n        uint256 deadline\\n    ) public returns (bool) {\\n        require(sig.length == 65, \\\"signature should have length 65\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n        require(\\n            _betaDelegatedTransfer(r, s, v, to, value, fee, seq, deadline),\\n            \\\"failed transfer\\\"\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Performs a transfer on behalf of the from address, identified by its signature on the betaDelegatedTransfer msg.\\n     * Note: both the delegate and transactor sign in the fees. The transactor, however,\\n     * has no control over the gas price, and therefore no control over the transaction time.\\n     * Beta prefix chosen to avoid a name clash with an emerging standard in ERC865 or elsewhere.\\n     * Internal to the contract - see betaDelegatedTransfer and betaDelegatedTransferBatch.\\n     * @param r the r signature of the delgatedTransfer msg.\\n     * @param s the s signature of the delgatedTransfer msg.\\n     * @param v the v signature of the delgatedTransfer msg.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     * @param fee an optional ERC20 fee paid to the delegate of betaDelegatedTransfer by the from address.\\n     * @param seq a sequencing number included by the from address specific to this contract to protect from replays.\\n     * @param deadline a block number after which the pre-signed transaction has expired.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function _betaDelegatedTransfer(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        address to,\\n        uint256 value,\\n        uint256 fee,\\n        uint256 seq,\\n        uint256 deadline\\n    ) internal whenNotPaused returns (bool) {\\n        require(\\n            betaDelegateWhitelist[msg.sender],\\n            \\\"Beta feature only accepts whitelisted delegates\\\"\\n        );\\n        require(\\n            value > 0 || fee > 0,\\n            \\\"cannot transfer zero tokens with zero fee\\\"\\n        );\\n        require(block.number <= deadline, \\\"transaction expired\\\");\\n        // prevent sig malleability from ecrecover()\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"signature incorrect\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"signature incorrect\\\");\\n\\n        // EIP712 scheme: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md\\n        bytes32 delegatedTransferHash = keccak256(\\n            abi.encodePacked( // solium-disable-line\\n                    EIP712_DELEGATED_TRANSFER_SCHEMA_HASH,\\n                    to,\\n                    value,\\n                    fee,\\n                    seq,\\n                    deadline //TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n                )\\n        );\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                EIP191_HEADER,\\n                EIP712_DOMAIN_HASH,\\n                delegatedTransferHash\\n            )\\n        );\\n        address _from = ecrecover(hash, v, r, s);\\n\\n        require(\\n            _from != address(0),\\n            \\\"error determining from address from signature\\\"\\n        );\\n        require(to != address(0), \\\"canno use address zero\\\");\\n        require(\\n            !frozen[to] && !frozen[_from] && !frozen[msg.sender],\\n            \\\"address frozen\\\"\\n        );\\n        require(value + fee <= balances[_from], \\\"insufficent fund\\\");\\n        require(nextSeqs[_from] == seq, \\\"incorrect seq\\\");\\n\\n        nextSeqs[_from] = nextSeqs[_from] + 1;\\n        balances[_from] = balances[_from] - (value + fee);\\n\\n        if (fee != 0) {\\n            balances[msg.sender] = balances[msg.sender] + (fee);\\n            emit Transfer(_from, msg.sender, fee);\\n        }\\n\\n        balances[to] = balances[to] + (value);\\n        emit Transfer(_from, to, value);\\n\\n        emit BetaDelegatedTransfer(_from, to, value, seq, fee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Performs an atomic batch of transfers on behalf of the from addresses, identified by their signatures.\\n     * Lack of nested array support in arguments requires all arguments to be passed as equal size arrays where\\n     * delegated transfer number i is the combination of all arguments at index i\\n     * @param r the r signatures of the delgatedTransfer msg.\\n     * @param s the s signatures of the delgatedTransfer msg.\\n     * @param v the v signatures of the delgatedTransfer msg.\\n     * @param to The addresses to transfer to.\\n     * @param value The amounts to be transferred.\\n     * @param fee optional ERC20 fees paid to the delegate of betaDelegatedTransfer by the from address.\\n     * @param seq sequencing numbers included by the from address specific to this contract to protect from replays.\\n     * @param deadline block numbers after which the pre-signed transactions have expired.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function betaDelegatedTransferBatch(\\n        bytes32[] memory r,\\n        bytes32[] memory s,\\n        uint8[] memory v,\\n        address[] memory to,\\n        uint256[] memory value,\\n        uint256[] memory fee,\\n        uint256[] memory seq,\\n        uint256[] memory deadline\\n    ) public returns (bool) {\\n        require(\\n            r.length == s.length &&\\n                r.length == v.length &&\\n                r.length == to.length &&\\n                r.length == value.length,\\n            \\\"length mismatch\\\"\\n        );\\n        require(\\n            r.length == fee.length &&\\n                r.length == seq.length &&\\n                r.length == deadline.length,\\n            \\\"length mismatch\\\"\\n        );\\n\\n        for (uint i = 0; i < r.length; i++) {\\n            require(\\n                _betaDelegatedTransfer(\\n                    r[i],\\n                    s[i],\\n                    v[i],\\n                    to[i],\\n                    value[i],\\n                    fee[i],\\n                    seq[i],\\n                    deadline[i]\\n                ),\\n                \\\"failed transfer\\\"\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets whether the address is currently whitelisted for betaDelegateTransfer.\\n     * @param _addr The address to check if whitelisted.\\n     * @return A bool representing whether the given address is whitelisted.\\n     */\\n    function isWhitelistedBetaDelegate(\\n        address _addr\\n    ) public view returns (bool) {\\n        return betaDelegateWhitelist[_addr];\\n    }\\n\\n    /**\\n     * @dev Sets a new betaDelegate whitelister.\\n     * @param _newWhitelister The address allowed to whitelist betaDelegates.\\n     */\\n    function setBetaDelegateWhitelister(address _newWhitelister) public {\\n        require(\\n            msg.sender == betaDelegateWhitelister || msg.sender == owner,\\n            \\\"only Whitelister or Owner\\\"\\n        );\\n        betaDelegateWhitelister = _newWhitelister;\\n        emit BetaDelegateWhitelisterSet(\\n            betaDelegateWhitelister,\\n            _newWhitelister\\n        );\\n    }\\n\\n    modifier onlyBetaDelegateWhitelister() {\\n        require(\\n            msg.sender == betaDelegateWhitelister,\\n            \\\"onlyBetaDelegateWhitelister\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Whitelists an address to allow calling BetaDelegatedTransfer.\\n     * @param _addr The new address to whitelist.\\n     */\\n    function whitelistBetaDelegate(\\n        address _addr\\n    ) public onlyBetaDelegateWhitelister {\\n        require(!betaDelegateWhitelist[_addr], \\\"delegate already whitelisted\\\");\\n        betaDelegateWhitelist[_addr] = true;\\n        emit BetaDelegateWhitelisted(_addr);\\n    }\\n\\n    /**\\n     * @dev Unwhitelists an address to disallow calling BetaDelegatedTransfer.\\n     * @param _addr The new address to whitelist.\\n     */\\n    function unwhitelistBetaDelegate(\\n        address _addr\\n    ) public onlyBetaDelegateWhitelister {\\n        require(betaDelegateWhitelist[_addr], \\\"delegate not whitelisted\\\");\\n        betaDelegateWhitelist[_addr] = false;\\n        emit BetaDelegateUnwhitelisted(_addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8361ea36bf93cb098e0ee7191d045c534f300e63542940b6bbacb5b633e575\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff191690556005805460ff60a01b191690553480156200002857600080fd5b5062000033620000da565b6200003d62000179565b620000d4604080518082018252600a81526916995d1a195c881554d160b21b60209182015281517fee552a4f357a6d8ecee15fed74927d873616e6da31fd672327acf0916acc174a818301527fd7d2a9c92e79f472080135395889bedfa474d913c58eb5dd0d7ad27214f27be681840152306060808301919091528351808303909101815260809091019092528151910120600c55565b6200024c565b60005460ff1615620001335760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a65640000000000000000000000000060448201526064015b60405180910390fd5b60048054336001600160a01b031991821681179092556005805482169055600680548216905560006002819055600880549092169092179055805460ff19166001179055565b6004546001600160a01b03163314620001c15760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b60448201526064016200012a565b600554600160a01b900460ff16156200020e5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481c185d5cd95960921b60448201526064016200012a565b6005805460ff60a01b1916600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b612f33806200025c6000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c80638ceed9cb1161017b578063b921e163116100d8578063dd62ed3e1161008c578063e306f77911610071578063e306f77914610677578063e583983614610680578063e7ba1012146106ac57600080fd5b8063dd62ed3e1461062b578063e2f72f031461066457600080fd5b8063c84aa9cb116100bd578063c84aa9cb146105fd578063d153b60c14610605578063d990c6181461061857600080fd5b8063b921e163146105d7578063c4f62fee146105ea57600080fd5b806398e52f9a1161012f578063a9059cbb11610114578063a9059cbb1461059e578063ac69275c146105b1578063b5ed298a146105c457600080fd5b806398e52f9a1461055f578063a7d87ed01461057257600080fd5b80638da5cb5b116101605780638da5cb5b1461051657806395d89b411461052957806397d60d561461054c57600080fd5b80638ceed9cb146104f05780638d1fdf2f1461050357600080fd5b8063313ce567116102295780635c975abb116101dd5780638129fc1c116101c25780638129fc1c146104b75780638456cb59146104bf57806389f72c21146104c757600080fd5b80635c975abb1461047a57806370a082311461048e57600080fd5b806345c8b1a61161020e57806345c8b1a61461044c5780634e71e0c81461045f57806352875bc31461046757600080fd5b8063313ce5671461042a5780633f4ba83a1461044457600080fd5b806318160ddd1161028057806321ab11f71161026557806321ab11f71461036e57806323b872dd146103815780632ff791611461039457600080fd5b806318160ddd146103495780631b6705611461035b57600080fd5b806303acb448146102b257806306fdde03146102bc578063095ea7b3146102fb5780630a91b6011461031e575b600080fd5b6102ba6106bf565b005b6102e56040518060400160405280600a81526020016916995d1a195c881554d160b21b81525081565b6040516102f291906129ca565b60405180910390f35b61030e610309366004612a14565b6107fd565b60405190151581526020016102f2565b600654610331906001600160a01b031681565b6040516001600160a01b0390911681526020016102f2565b6002545b6040519081526020016102f2565b61030e610369366004612be1565b610926565b61030e61037c366004612d21565b610b33565b61030e61038f366004612dea565b610be6565b6102ba604080518082018252600a81526916995d1a195c881554d160b21b60209182015281517fee552a4f357a6d8ecee15fed74927d873616e6da31fd672327acf0916acc174a818301527fd7d2a9c92e79f472080135395889bedfa474d913c58eb5dd0d7ad27214f27be681840152306060808301919091528351808303909101815260809091019092528151910120600c55565b610432601281565b60405160ff90911681526020016102f2565b6102ba610efa565b6102ba61045a366004612e26565b610fd1565b6102ba6110dc565b6102ba610475366004612e26565b611193565b60055461030e90600160a01b900460ff1681565b61034d61049c366004612e26565b6001600160a01b031660009081526001602052604090205490565b6102ba6112da565b6102ba611373565b61034d6104d5366004612e26565b6001600160a01b03166000908152600b602052604090205490565b6102ba6104fe366004612e26565b611451565b6102ba610511366004612e26565b611526565b600454610331906001600160a01b031681565b6102e5604051806040016040528060048152602001631e9554d160e21b81525081565b6102ba61055a366004612e26565b611635565b61030e61056d366004612e48565b6116f0565b61030e610580366004612e26565b6001600160a01b03166000908152600a602052604090205460ff1690565b61030e6105ac366004612a14565b611898565b6102ba6105bf366004612e26565b611aa9565b6102ba6105d2366004612e26565b611bb8565b61030e6105e5366004612e48565b611d24565b600954610331906001600160a01b031681565b6102ba611e54565b600554610331906001600160a01b031681565b6102ba610626366004612e26565b611f2b565b61034d610639366004612e61565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6102ba610672366004612e26565b612036565b61034d600c5481565b61030e61068e366004612e26565b6001600160a01b031660009081526007602052604090205460ff1690565b600854610331906001600160a01b031681565b6005546001600160a01b03163314806106e257506004546001600160a01b031633145b6107335760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c792070726f706f7365644f776e6572206f72206f776e6572000000000060448201526064015b60405180910390fd5b6005546001600160a01b03166107b15760405162461bcd60e51b815260206004820152603b60248201527f63616e206f6e6c792064697372656761726420612070726f706f736564206f7760448201527f6e65722074686174207761732070726576696f75736c79207365740000000000606482015260840161072a565b600580546001600160a01b031981169091556040516001600160a01b039091169081907f24f4590b0077912a4db89e7430de7986175c27bede1b47ee039e3b421c2e798e90600090a250565b600554600090600160a01b900460ff161561084a5760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b6001600160a01b03831660009081526007602052604090205460ff1615801561088357503360009081526007602052604090205460ff16155b6108c05760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b3360008181526003602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060015b92915050565b60008751895114801561093a575086518951145b8015610947575085518951145b8015610954575084518951145b6109925760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161072a565b835189511480156109a4575082518951145b80156109b1575081518951145b6109ef5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161072a565b60005b8951811015610b2357610ad38a8281518110610a1057610a10612e94565b60200260200101518a8381518110610a2a57610a2a612e94565b60200260200101518a8481518110610a4457610a44612e94565b60200260200101518a8581518110610a5e57610a5e612e94565b60200260200101518a8681518110610a7857610a78612e94565b60200260200101518a8781518110610a9257610a92612e94565b60200260200101518a8881518110610aac57610aac612e94565b60200260200101518a8981518110610ac657610ac6612e94565b60200260200101516121e2565b610b115760405162461bcd60e51b815260206004820152600f60248201526e3330b4b632b2103a3930b739b332b960891b604482015260640161072a565b80610b1b81612ec0565b9150506109f2565b5060019998505050505050505050565b60008651604114610b865760405162461bcd60e51b815260206004820152601f60248201527f7369676e61747572652073686f756c642068617665206c656e67746820363500604482015260640161072a565b60208701516040880151606089015160001a610ba88383838c8c8c8c8c6121e2565b610b235760405162461bcd60e51b815260206004820152600f60248201526e3330b4b632b2103a3930b739b332b960891b604482015260640161072a565b600554600090600160a01b900460ff1615610c335760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b6001600160a01b038316610c895760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f74207472616e7366657220746f2061646472657373207a65726f00604482015260640161072a565b6001600160a01b03831660009081526007602052604090205460ff16158015610ccb57506001600160a01b03841660009081526007602052604090205460ff16155b8015610ce757503360009081526007602052604090205460ff16155b610d245760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b6001600160a01b038416600090815260016020526040902054821115610d8c5760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015260640161072a565b6001600160a01b0384166000908152600360209081526040808320338452909152902054821115610dff5760405162461bcd60e51b815260206004820152601660248201527f696e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015260640161072a565b6001600160a01b038416600090815260016020526040902054610e23908390612ed9565b6001600160a01b038086166000908152600160205260408082209390935590851681522054610e53908390612eec565b6001600160a01b038085166000908152600160209081526040808320949094559187168152600382528281203382529091522054610e92908390612ed9565b6001600160a01b03858116600081815260036020908152604080832033845282529182902094909455518581529186169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35060019392505050565b6004546001600160a01b03163314610f405760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b600554600160a01b900460ff16610f995760405162461bcd60e51b815260206004820152601060248201527f616c726561647920756e70617573656400000000000000000000000000000000604482015260640161072a565b6005805460ff60a01b191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6006546001600160a01b0316331461102b5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015260640161072a565b6001600160a01b03811660009081526007602052604090205460ff166110935760405162461bcd60e51b815260206004820152601860248201527f6164647265737320616c726561647920756e66726f7a656e0000000000000000604482015260640161072a565b6001600160a01b038116600081815260076020526040808220805460ff19169055517fc3776b472ebf54114339eec9e4dc924e7ce307a97f5c1ee72b6d474e6e5e8b7c9190a250565b6005546001600160a01b031633146111365760405162461bcd60e51b815260206004820152601160248201527f6f6e6c7950726f706f7365644f776e6572000000000000000000000000000000604482015260640161072a565b60048054600580546001600160a01b03198084166001600160a01b038381169182179096559116909155604051929091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6008546001600160a01b03163314806111b657506004546001600160a01b031633145b6112025760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c7920537570706c79436f6e74726f6c6c6572206f72204f776e65720000604482015260640161072a565b6001600160a01b03811661127e5760405162461bcd60e51b815260206004820152602c60248201527f63616e6e6f742073657420737570706c7920636f6e74726f6c6c657220746f2060448201527f61646472657373207a65726f0000000000000000000000000000000000000000606482015260840161072a565b6008546040516001600160a01b038084169216907f40d53b0b666e4424f29d55244e7e171a1dc332acc11d04ed4abd884629d8cc9790600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b60005460ff161561132d5760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015260640161072a565b60048054336001600160a01b031991821681179092556005805482169055600680548216905560006002819055600880549092169092179055805460ff19166001179055565b6004546001600160a01b031633146113b95760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b600554600160a01b900460ff16156114135760405162461bcd60e51b815260206004820152600e60248201527f616c726561647920706175736564000000000000000000000000000000000000604482015260640161072a565b6005805460ff60a01b1916600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6006546001600160a01b031633148061147457506004546001600160a01b031633145b6114ca5760405162461bcd60e51b815260206004820152602160248201527f6f6e6c7920617373657450726f74656374696f6e526f6c65206f72204f776e656044820152603960f91b606482015260840161072a565b6006546040516001600160a01b038084169216907fd0c36a0ac0fe0d375386bd568fa2947a2dae7523a0a0cfdab20b7532a105bd1b90600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146115805760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015260640161072a565b6001600160a01b03811660009081526007602052604090205460ff16156115e95760405162461bcd60e51b815260206004820152601660248201527f6164647265737320616c72656164792066726f7a656e00000000000000000000604482015260640161072a565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f90811a8edd3b3c17eeaefffc17f639cc69145d41a359c9843994dc25382036909190a250565b6009546001600160a01b031633148061165857506004546001600160a01b031633145b6116a45760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792057686974656c6973746572206f72204f776e657200000000000000604482015260640161072a565b600980546001600160a01b0319166001600160a01b03831690811790915560405181907f54e20b07412504aee4d17519747ae2f01b9924f7f30059793fe5576c4220a0c390600090a350565b6008546000906001600160a01b0316331461174d5760405162461bcd60e51b815260206004820152601460248201527f6f6e6c79537570706c79436f6e74726f6c6c6572000000000000000000000000604482015260640161072a565b6008546001600160a01b03166000908152600160205260409020548211156117b75760405162461bcd60e51b815260206004820152601160248201527f6e6f7420656e6f75676820737570706c79000000000000000000000000000000604482015260640161072a565b6008546001600160a01b03166000908152600160205260409020546117dd908390612ed9565b6008546001600160a01b0316600090815260016020526040902055600254611806908390612ed9565b6002556008546040518381526001600160a01b03909116907f1b7e18241beced0d7f41fbab1ea8ed468732edbcb74ec4420151654ca71c8a639060200160405180910390a26008546040518381526000916001600160a01b0316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35060015b919050565b600554600090600160a01b900460ff16156118e55760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b6001600160a01b03831661193b5760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f74207472616e7366657220746f2061646472657373207a65726f00604482015260640161072a565b6001600160a01b03831660009081526007602052604090205460ff1615801561197457503360009081526007602052604090205460ff16155b6119b15760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b33600090815260016020526040902054821115611a105760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015260640161072a565b33600090815260016020526040902054611a2b908390612ed9565b33600090815260016020526040808220929092556001600160a01b03851681522054611a58908390612eec565b6001600160a01b0384166000818152600160205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109149086815260200190565b6009546001600160a01b03163314611b035760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c794265746144656c656761746557686974656c69737465720000000000604482015260640161072a565b6001600160a01b0381166000908152600a602052604090205460ff1615611b6c5760405162461bcd60e51b815260206004820152601c60248201527f64656c656761746520616c72656164792077686974656c697374656400000000604482015260640161072a565b6001600160a01b0381166000818152600a6020526040808220805460ff19166001179055517f8a22e0d8ecb02260464e9a55b7d82b17482735ae1f765de59dee573dfec5b36d9190a250565b6004546001600160a01b03163314611bfe5760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b6001600160a01b038116611c7a5760405162461bcd60e51b815260206004820152602960248201527f63616e6e6f74207472616e73666572206f776e65727368697020746f2061646460448201527f72657373207a65726f0000000000000000000000000000000000000000000000606482015260840161072a565b6001600160a01b0381163303611cd25760405162461bcd60e51b815260206004820152601760248201527f63616c6c657220616c7265616479206973206f776e6572000000000000000000604482015260640161072a565b600580546001600160a01b0319166001600160a01b03838116918217909255600454604051919216907ff4e75b79500ab730f8a026ed3cba6d55331bcb64c9e9f60c548e371356e5e3c090600090a350565b6008546000906001600160a01b03163314611d815760405162461bcd60e51b815260206004820152601460248201527f6f6e6c79537570706c79436f6e74726f6c6c6572000000000000000000000000604482015260640161072a565b81600254611d8f9190612eec565b6002556008546001600160a01b0316600090815260016020526040902054611db8908390612eec565b600880546001600160a01b0390811660009081526001602090815260409182902094909455915491518581529116917ff5c174d57843e57fea3c649fdde37f015ef08750759cbee88060390566a98797910160405180910390a26008546040518381526001600160a01b03909116906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611887565b6004546001600160a01b03163314611e9a5760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b306000908152600160205260408082208054908390556004546001600160a01b03168352912054611ecc908290612eec565b600480546001600160a01b03908116600090815260016020908152604091829020949094559154915184815291169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350565b6009546001600160a01b03163314611f855760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c794265746144656c656761746557686974656c69737465720000000000604482015260640161072a565b6001600160a01b0381166000908152600a602052604090205460ff16611fed5760405162461bcd60e51b815260206004820152601860248201527f64656c6567617465206e6f742077686974656c69737465640000000000000000604482015260640161072a565b6001600160a01b0381166000818152600a6020526040808220805460ff19169055517f12acb305bec2ecc1e4568decc9c8e0423749ceb6ae249eaef4ef375ec174a49c9190a250565b6006546001600160a01b031633146120905760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015260640161072a565b6001600160a01b03811660009081526007602052604090205460ff166120f85760405162461bcd60e51b815260206004820152601560248201527f61646472657373206973206e6f742066726f7a656e0000000000000000000000604482015260640161072a565b6001600160a01b03811660009081526001602052604081208054919055600254612123908290612ed9565b6002556040516001600160a01b038316907ffc5960f1c5a5d2b60f031bf534af053b1bf7d9881989afaeb8b1d164db23aede90600090a2816001600160a01b03167f1b7e18241beced0d7f41fbab1ea8ed468732edbcb74ec4420151654ca71c8a638260405161219591815260200190565b60405180910390a26040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600554600090600160a01b900460ff161561222f5760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b336000908152600a602052604090205460ff166122b45760405162461bcd60e51b815260206004820152602f60248201527f426574612066656174757265206f6e6c7920616363657074732077686974656c60448201527f69737465642064656c6567617465730000000000000000000000000000000000606482015260840161072a565b60008511806122c35750600084115b6123355760405162461bcd60e51b815260206004820152602960248201527f63616e6e6f74207472616e73666572207a65726f20746f6b656e73207769746860448201527f207a65726f206665650000000000000000000000000000000000000000000000606482015260840161072a565b814311156123855760405162461bcd60e51b815260206004820152601360248201527f7472616e73616374696f6e206578706972656400000000000000000000000000604482015260640161072a565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08811156123f55760405162461bcd60e51b815260206004820152601360248201527f7369676e617475726520696e636f727265637400000000000000000000000000604482015260640161072a565b8660ff16601b148061240a57508660ff16601c145b6124565760405162461bcd60e51b815260206004820152601360248201527f7369676e617475726520696e636f727265637400000000000000000000000000604482015260640161072a565b604080517f4094ee93b87436e01a39cd5f9d33833f8e427f8830eacb6832f06f8536b54c0c60208201526bffffffffffffffffffffffff19606089901b169181019190915260548101869052607481018590526094810184905260b4810183905260009060d401604051602081830303815290604052805190602001209050600060405180604001604052806002815260200161190160f01b815250600c548360405160200161250893929190612eff565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8d1692840192909252606083018e9052608083018d90529092509060019060a0016020604051602081039080840390855afa158015612573573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166125fc5760405162461bcd60e51b815260206004820152602d60248201527f6572726f722064657465726d696e696e672066726f6d2061646472657373206660448201527f726f6d207369676e617475726500000000000000000000000000000000000000606482015260840161072a565b6001600160a01b0389166126525760405162461bcd60e51b815260206004820152601660248201527f63616e6e6f207573652061646472657373207a65726f00000000000000000000604482015260640161072a565b6001600160a01b03891660009081526007602052604090205460ff1615801561269457506001600160a01b03811660009081526007602052604090205460ff16155b80156126b057503360009081526007602052604090205460ff16155b6126ed5760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b6001600160a01b038116600090815260016020526040902054612710888a612eec565b111561275e5760405162461bcd60e51b815260206004820152601060248201527f696e737566666963656e742066756e6400000000000000000000000000000000604482015260640161072a565b6001600160a01b0381166000908152600b602052604090205486146127c55760405162461bcd60e51b815260206004820152600d60248201527f696e636f72726563742073657100000000000000000000000000000000000000604482015260640161072a565b6001600160a01b0381166000908152600b60205260409020546127e9906001612eec565b6001600160a01b0382166000908152600b602052604090205561280c8789612eec565b6001600160a01b03821660009081526001602052604090205461282f9190612ed9565b6001600160a01b03821660009081526001602052604090205586156128c35733600090815260016020526040902054612869908890612eec565b33600081815260016020526040908190209290925590516001600160a01b038316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906128ba908b815260200190565b60405180910390a35b6001600160a01b0389166000908152600160205260409020546128e7908990612eec565b6001600160a01b03808b1660008181526001602052604090819020939093559151908316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061293b908c815260200190565b60405180910390a360408051898152602081018890529081018890526001600160a01b03808b1691908316907fe526c2818be85606ab8e0ea3f317c198ef15baabbb4430bcf2d836eed3c7769b9060600160405180910390a35060019b9a5050505050505050505050565b60005b838110156129c15781810151838201526020016129a9565b50506000910152565b60208152600082518060208401526129e98160408501602087016129a6565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461189357600080fd5b60008060408385031215612a2757600080fd5b612a30836129fd565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a7d57612a7d612a3e565b604052919050565b600067ffffffffffffffff821115612a9f57612a9f612a3e565b5060051b60200190565b600082601f830112612aba57600080fd5b81356020612acf612aca83612a85565b612a54565b82815260059290921b84018101918181019086841115612aee57600080fd5b8286015b84811015612b095780358352918301918301612af2565b509695505050505050565b600082601f830112612b2557600080fd5b81356020612b35612aca83612a85565b82815260059290921b84018101918181019086841115612b5457600080fd5b8286015b84811015612b0957803560ff81168114612b725760008081fd5b8352918301918301612b58565b600082601f830112612b9057600080fd5b81356020612ba0612aca83612a85565b82815260059290921b84018101918181019086841115612bbf57600080fd5b8286015b84811015612b0957612bd4816129fd565b8352918301918301612bc3565b600080600080600080600080610100898b031215612bfe57600080fd5b883567ffffffffffffffff80821115612c1657600080fd5b612c228c838d01612aa9565b995060208b0135915080821115612c3857600080fd5b612c448c838d01612aa9565b985060408b0135915080821115612c5a57600080fd5b612c668c838d01612b14565b975060608b0135915080821115612c7c57600080fd5b612c888c838d01612b7f565b965060808b0135915080821115612c9e57600080fd5b612caa8c838d01612aa9565b955060a08b0135915080821115612cc057600080fd5b612ccc8c838d01612aa9565b945060c08b0135915080821115612ce257600080fd5b612cee8c838d01612aa9565b935060e08b0135915080821115612d0457600080fd5b50612d118b828c01612aa9565b9150509295985092959890939650565b60008060008060008060c08789031215612d3a57600080fd5b863567ffffffffffffffff80821115612d5257600080fd5b818901915089601f830112612d6657600080fd5b8135602082821115612d7a57612d7a612a3e565b612d8c601f8301601f19168201612a54565b92508183528b81838601011115612da257600080fd5b81818501828501376000818385010152829950612dc0818c016129fd565b999c999b505050506040880135976060810135976080820135975060a09091013595509350505050565b600080600060608486031215612dff57600080fd5b612e08846129fd565b9250612e16602085016129fd565b9150604084013590509250925092565b600060208284031215612e3857600080fd5b612e41826129fd565b9392505050565b600060208284031215612e5a57600080fd5b5035919050565b60008060408385031215612e7457600080fd5b612e7d836129fd565b9150612e8b602084016129fd565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612ed257612ed2612eaa565b5060010190565b8181038181111561092057610920612eaa565b8082018082111561092057610920612eaa565b60008451612f118184602089016129a6565b9190910192835250602082015260400191905056fea164736f6c6343000814000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c80638ceed9cb1161017b578063b921e163116100d8578063dd62ed3e1161008c578063e306f77911610071578063e306f77914610677578063e583983614610680578063e7ba1012146106ac57600080fd5b8063dd62ed3e1461062b578063e2f72f031461066457600080fd5b8063c84aa9cb116100bd578063c84aa9cb146105fd578063d153b60c14610605578063d990c6181461061857600080fd5b8063b921e163146105d7578063c4f62fee146105ea57600080fd5b806398e52f9a1161012f578063a9059cbb11610114578063a9059cbb1461059e578063ac69275c146105b1578063b5ed298a146105c457600080fd5b806398e52f9a1461055f578063a7d87ed01461057257600080fd5b80638da5cb5b116101605780638da5cb5b1461051657806395d89b411461052957806397d60d561461054c57600080fd5b80638ceed9cb146104f05780638d1fdf2f1461050357600080fd5b8063313ce567116102295780635c975abb116101dd5780638129fc1c116101c25780638129fc1c146104b75780638456cb59146104bf57806389f72c21146104c757600080fd5b80635c975abb1461047a57806370a082311461048e57600080fd5b806345c8b1a61161020e57806345c8b1a61461044c5780634e71e0c81461045f57806352875bc31461046757600080fd5b8063313ce5671461042a5780633f4ba83a1461044457600080fd5b806318160ddd1161028057806321ab11f71161026557806321ab11f71461036e57806323b872dd146103815780632ff791611461039457600080fd5b806318160ddd146103495780631b6705611461035b57600080fd5b806303acb448146102b257806306fdde03146102bc578063095ea7b3146102fb5780630a91b6011461031e575b600080fd5b6102ba6106bf565b005b6102e56040518060400160405280600a81526020016916995d1a195c881554d160b21b81525081565b6040516102f291906129ca565b60405180910390f35b61030e610309366004612a14565b6107fd565b60405190151581526020016102f2565b600654610331906001600160a01b031681565b6040516001600160a01b0390911681526020016102f2565b6002545b6040519081526020016102f2565b61030e610369366004612be1565b610926565b61030e61037c366004612d21565b610b33565b61030e61038f366004612dea565b610be6565b6102ba604080518082018252600a81526916995d1a195c881554d160b21b60209182015281517fee552a4f357a6d8ecee15fed74927d873616e6da31fd672327acf0916acc174a818301527fd7d2a9c92e79f472080135395889bedfa474d913c58eb5dd0d7ad27214f27be681840152306060808301919091528351808303909101815260809091019092528151910120600c55565b610432601281565b60405160ff90911681526020016102f2565b6102ba610efa565b6102ba61045a366004612e26565b610fd1565b6102ba6110dc565b6102ba610475366004612e26565b611193565b60055461030e90600160a01b900460ff1681565b61034d61049c366004612e26565b6001600160a01b031660009081526001602052604090205490565b6102ba6112da565b6102ba611373565b61034d6104d5366004612e26565b6001600160a01b03166000908152600b602052604090205490565b6102ba6104fe366004612e26565b611451565b6102ba610511366004612e26565b611526565b600454610331906001600160a01b031681565b6102e5604051806040016040528060048152602001631e9554d160e21b81525081565b6102ba61055a366004612e26565b611635565b61030e61056d366004612e48565b6116f0565b61030e610580366004612e26565b6001600160a01b03166000908152600a602052604090205460ff1690565b61030e6105ac366004612a14565b611898565b6102ba6105bf366004612e26565b611aa9565b6102ba6105d2366004612e26565b611bb8565b61030e6105e5366004612e48565b611d24565b600954610331906001600160a01b031681565b6102ba611e54565b600554610331906001600160a01b031681565b6102ba610626366004612e26565b611f2b565b61034d610639366004612e61565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6102ba610672366004612e26565b612036565b61034d600c5481565b61030e61068e366004612e26565b6001600160a01b031660009081526007602052604090205460ff1690565b600854610331906001600160a01b031681565b6005546001600160a01b03163314806106e257506004546001600160a01b031633145b6107335760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c792070726f706f7365644f776e6572206f72206f776e6572000000000060448201526064015b60405180910390fd5b6005546001600160a01b03166107b15760405162461bcd60e51b815260206004820152603b60248201527f63616e206f6e6c792064697372656761726420612070726f706f736564206f7760448201527f6e65722074686174207761732070726576696f75736c79207365740000000000606482015260840161072a565b600580546001600160a01b031981169091556040516001600160a01b039091169081907f24f4590b0077912a4db89e7430de7986175c27bede1b47ee039e3b421c2e798e90600090a250565b600554600090600160a01b900460ff161561084a5760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b6001600160a01b03831660009081526007602052604090205460ff1615801561088357503360009081526007602052604090205460ff16155b6108c05760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b3360008181526003602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060015b92915050565b60008751895114801561093a575086518951145b8015610947575085518951145b8015610954575084518951145b6109925760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161072a565b835189511480156109a4575082518951145b80156109b1575081518951145b6109ef5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640161072a565b60005b8951811015610b2357610ad38a8281518110610a1057610a10612e94565b60200260200101518a8381518110610a2a57610a2a612e94565b60200260200101518a8481518110610a4457610a44612e94565b60200260200101518a8581518110610a5e57610a5e612e94565b60200260200101518a8681518110610a7857610a78612e94565b60200260200101518a8781518110610a9257610a92612e94565b60200260200101518a8881518110610aac57610aac612e94565b60200260200101518a8981518110610ac657610ac6612e94565b60200260200101516121e2565b610b115760405162461bcd60e51b815260206004820152600f60248201526e3330b4b632b2103a3930b739b332b960891b604482015260640161072a565b80610b1b81612ec0565b9150506109f2565b5060019998505050505050505050565b60008651604114610b865760405162461bcd60e51b815260206004820152601f60248201527f7369676e61747572652073686f756c642068617665206c656e67746820363500604482015260640161072a565b60208701516040880151606089015160001a610ba88383838c8c8c8c8c6121e2565b610b235760405162461bcd60e51b815260206004820152600f60248201526e3330b4b632b2103a3930b739b332b960891b604482015260640161072a565b600554600090600160a01b900460ff1615610c335760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b6001600160a01b038316610c895760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f74207472616e7366657220746f2061646472657373207a65726f00604482015260640161072a565b6001600160a01b03831660009081526007602052604090205460ff16158015610ccb57506001600160a01b03841660009081526007602052604090205460ff16155b8015610ce757503360009081526007602052604090205460ff16155b610d245760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b6001600160a01b038416600090815260016020526040902054821115610d8c5760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015260640161072a565b6001600160a01b0384166000908152600360209081526040808320338452909152902054821115610dff5760405162461bcd60e51b815260206004820152601660248201527f696e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015260640161072a565b6001600160a01b038416600090815260016020526040902054610e23908390612ed9565b6001600160a01b038086166000908152600160205260408082209390935590851681522054610e53908390612eec565b6001600160a01b038085166000908152600160209081526040808320949094559187168152600382528281203382529091522054610e92908390612ed9565b6001600160a01b03858116600081815260036020908152604080832033845282529182902094909455518581529186169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35060019392505050565b6004546001600160a01b03163314610f405760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b600554600160a01b900460ff16610f995760405162461bcd60e51b815260206004820152601060248201527f616c726561647920756e70617573656400000000000000000000000000000000604482015260640161072a565b6005805460ff60a01b191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6006546001600160a01b0316331461102b5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015260640161072a565b6001600160a01b03811660009081526007602052604090205460ff166110935760405162461bcd60e51b815260206004820152601860248201527f6164647265737320616c726561647920756e66726f7a656e0000000000000000604482015260640161072a565b6001600160a01b038116600081815260076020526040808220805460ff19169055517fc3776b472ebf54114339eec9e4dc924e7ce307a97f5c1ee72b6d474e6e5e8b7c9190a250565b6005546001600160a01b031633146111365760405162461bcd60e51b815260206004820152601160248201527f6f6e6c7950726f706f7365644f776e6572000000000000000000000000000000604482015260640161072a565b60048054600580546001600160a01b03198084166001600160a01b038381169182179096559116909155604051929091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6008546001600160a01b03163314806111b657506004546001600160a01b031633145b6112025760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c7920537570706c79436f6e74726f6c6c6572206f72204f776e65720000604482015260640161072a565b6001600160a01b03811661127e5760405162461bcd60e51b815260206004820152602c60248201527f63616e6e6f742073657420737570706c7920636f6e74726f6c6c657220746f2060448201527f61646472657373207a65726f0000000000000000000000000000000000000000606482015260840161072a565b6008546040516001600160a01b038084169216907f40d53b0b666e4424f29d55244e7e171a1dc332acc11d04ed4abd884629d8cc9790600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b60005460ff161561132d5760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015260640161072a565b60048054336001600160a01b031991821681179092556005805482169055600680548216905560006002819055600880549092169092179055805460ff19166001179055565b6004546001600160a01b031633146113b95760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b600554600160a01b900460ff16156114135760405162461bcd60e51b815260206004820152600e60248201527f616c726561647920706175736564000000000000000000000000000000000000604482015260640161072a565b6005805460ff60a01b1916600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6006546001600160a01b031633148061147457506004546001600160a01b031633145b6114ca5760405162461bcd60e51b815260206004820152602160248201527f6f6e6c7920617373657450726f74656374696f6e526f6c65206f72204f776e656044820152603960f91b606482015260840161072a565b6006546040516001600160a01b038084169216907fd0c36a0ac0fe0d375386bd568fa2947a2dae7523a0a0cfdab20b7532a105bd1b90600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146115805760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015260640161072a565b6001600160a01b03811660009081526007602052604090205460ff16156115e95760405162461bcd60e51b815260206004820152601660248201527f6164647265737320616c72656164792066726f7a656e00000000000000000000604482015260640161072a565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f90811a8edd3b3c17eeaefffc17f639cc69145d41a359c9843994dc25382036909190a250565b6009546001600160a01b031633148061165857506004546001600160a01b031633145b6116a45760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792057686974656c6973746572206f72204f776e657200000000000000604482015260640161072a565b600980546001600160a01b0319166001600160a01b03831690811790915560405181907f54e20b07412504aee4d17519747ae2f01b9924f7f30059793fe5576c4220a0c390600090a350565b6008546000906001600160a01b0316331461174d5760405162461bcd60e51b815260206004820152601460248201527f6f6e6c79537570706c79436f6e74726f6c6c6572000000000000000000000000604482015260640161072a565b6008546001600160a01b03166000908152600160205260409020548211156117b75760405162461bcd60e51b815260206004820152601160248201527f6e6f7420656e6f75676820737570706c79000000000000000000000000000000604482015260640161072a565b6008546001600160a01b03166000908152600160205260409020546117dd908390612ed9565b6008546001600160a01b0316600090815260016020526040902055600254611806908390612ed9565b6002556008546040518381526001600160a01b03909116907f1b7e18241beced0d7f41fbab1ea8ed468732edbcb74ec4420151654ca71c8a639060200160405180910390a26008546040518381526000916001600160a01b0316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35060015b919050565b600554600090600160a01b900460ff16156118e55760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b6001600160a01b03831661193b5760405162461bcd60e51b815260206004820152601f60248201527f63616e6e6f74207472616e7366657220746f2061646472657373207a65726f00604482015260640161072a565b6001600160a01b03831660009081526007602052604090205460ff1615801561197457503360009081526007602052604090205460ff16155b6119b15760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b33600090815260016020526040902054821115611a105760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015260640161072a565b33600090815260016020526040902054611a2b908390612ed9565b33600090815260016020526040808220929092556001600160a01b03851681522054611a58908390612eec565b6001600160a01b0384166000818152600160205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109149086815260200190565b6009546001600160a01b03163314611b035760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c794265746144656c656761746557686974656c69737465720000000000604482015260640161072a565b6001600160a01b0381166000908152600a602052604090205460ff1615611b6c5760405162461bcd60e51b815260206004820152601c60248201527f64656c656761746520616c72656164792077686974656c697374656400000000604482015260640161072a565b6001600160a01b0381166000818152600a6020526040808220805460ff19166001179055517f8a22e0d8ecb02260464e9a55b7d82b17482735ae1f765de59dee573dfec5b36d9190a250565b6004546001600160a01b03163314611bfe5760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b6001600160a01b038116611c7a5760405162461bcd60e51b815260206004820152602960248201527f63616e6e6f74207472616e73666572206f776e65727368697020746f2061646460448201527f72657373207a65726f0000000000000000000000000000000000000000000000606482015260840161072a565b6001600160a01b0381163303611cd25760405162461bcd60e51b815260206004820152601760248201527f63616c6c657220616c7265616479206973206f776e6572000000000000000000604482015260640161072a565b600580546001600160a01b0319166001600160a01b03838116918217909255600454604051919216907ff4e75b79500ab730f8a026ed3cba6d55331bcb64c9e9f60c548e371356e5e3c090600090a350565b6008546000906001600160a01b03163314611d815760405162461bcd60e51b815260206004820152601460248201527f6f6e6c79537570706c79436f6e74726f6c6c6572000000000000000000000000604482015260640161072a565b81600254611d8f9190612eec565b6002556008546001600160a01b0316600090815260016020526040902054611db8908390612eec565b600880546001600160a01b0390811660009081526001602090815260409182902094909455915491518581529116917ff5c174d57843e57fea3c649fdde37f015ef08750759cbee88060390566a98797910160405180910390a26008546040518381526001600160a01b03909116906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611887565b6004546001600160a01b03163314611e9a5760405162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015260640161072a565b306000908152600160205260408082208054908390556004546001600160a01b03168352912054611ecc908290612eec565b600480546001600160a01b03908116600090815260016020908152604091829020949094559154915184815291169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350565b6009546001600160a01b03163314611f855760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c794265746144656c656761746557686974656c69737465720000000000604482015260640161072a565b6001600160a01b0381166000908152600a602052604090205460ff16611fed5760405162461bcd60e51b815260206004820152601860248201527f64656c6567617465206e6f742077686974656c69737465640000000000000000604482015260640161072a565b6001600160a01b0381166000818152600a6020526040808220805460ff19169055517f12acb305bec2ecc1e4568decc9c8e0423749ceb6ae249eaef4ef375ec174a49c9190a250565b6006546001600160a01b031633146120905760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015260640161072a565b6001600160a01b03811660009081526007602052604090205460ff166120f85760405162461bcd60e51b815260206004820152601560248201527f61646472657373206973206e6f742066726f7a656e0000000000000000000000604482015260640161072a565b6001600160a01b03811660009081526001602052604081208054919055600254612123908290612ed9565b6002556040516001600160a01b038316907ffc5960f1c5a5d2b60f031bf534af053b1bf7d9881989afaeb8b1d164db23aede90600090a2816001600160a01b03167f1b7e18241beced0d7f41fbab1ea8ed468732edbcb74ec4420151654ca71c8a638260405161219591815260200190565b60405180910390a26040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600554600090600160a01b900460ff161561222f5760405162461bcd60e51b815260206004820152600d60248201526c1dda195b939bdd14185d5cd959609a1b604482015260640161072a565b336000908152600a602052604090205460ff166122b45760405162461bcd60e51b815260206004820152602f60248201527f426574612066656174757265206f6e6c7920616363657074732077686974656c60448201527f69737465642064656c6567617465730000000000000000000000000000000000606482015260840161072a565b60008511806122c35750600084115b6123355760405162461bcd60e51b815260206004820152602960248201527f63616e6e6f74207472616e73666572207a65726f20746f6b656e73207769746860448201527f207a65726f206665650000000000000000000000000000000000000000000000606482015260840161072a565b814311156123855760405162461bcd60e51b815260206004820152601360248201527f7472616e73616374696f6e206578706972656400000000000000000000000000604482015260640161072a565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08811156123f55760405162461bcd60e51b815260206004820152601360248201527f7369676e617475726520696e636f727265637400000000000000000000000000604482015260640161072a565b8660ff16601b148061240a57508660ff16601c145b6124565760405162461bcd60e51b815260206004820152601360248201527f7369676e617475726520696e636f727265637400000000000000000000000000604482015260640161072a565b604080517f4094ee93b87436e01a39cd5f9d33833f8e427f8830eacb6832f06f8536b54c0c60208201526bffffffffffffffffffffffff19606089901b169181019190915260548101869052607481018590526094810184905260b4810183905260009060d401604051602081830303815290604052805190602001209050600060405180604001604052806002815260200161190160f01b815250600c548360405160200161250893929190612eff565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8d1692840192909252606083018e9052608083018d90529092509060019060a0016020604051602081039080840390855afa158015612573573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166125fc5760405162461bcd60e51b815260206004820152602d60248201527f6572726f722064657465726d696e696e672066726f6d2061646472657373206660448201527f726f6d207369676e617475726500000000000000000000000000000000000000606482015260840161072a565b6001600160a01b0389166126525760405162461bcd60e51b815260206004820152601660248201527f63616e6e6f207573652061646472657373207a65726f00000000000000000000604482015260640161072a565b6001600160a01b03891660009081526007602052604090205460ff1615801561269457506001600160a01b03811660009081526007602052604090205460ff16155b80156126b057503360009081526007602052604090205460ff16155b6126ed5760405162461bcd60e51b815260206004820152600e60248201526d30b2323932b9b990333937bd32b760911b604482015260640161072a565b6001600160a01b038116600090815260016020526040902054612710888a612eec565b111561275e5760405162461bcd60e51b815260206004820152601060248201527f696e737566666963656e742066756e6400000000000000000000000000000000604482015260640161072a565b6001600160a01b0381166000908152600b602052604090205486146127c55760405162461bcd60e51b815260206004820152600d60248201527f696e636f72726563742073657100000000000000000000000000000000000000604482015260640161072a565b6001600160a01b0381166000908152600b60205260409020546127e9906001612eec565b6001600160a01b0382166000908152600b602052604090205561280c8789612eec565b6001600160a01b03821660009081526001602052604090205461282f9190612ed9565b6001600160a01b03821660009081526001602052604090205586156128c35733600090815260016020526040902054612869908890612eec565b33600081815260016020526040908190209290925590516001600160a01b038316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906128ba908b815260200190565b60405180910390a35b6001600160a01b0389166000908152600160205260409020546128e7908990612eec565b6001600160a01b03808b1660008181526001602052604090819020939093559151908316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061293b908c815260200190565b60405180910390a360408051898152602081018890529081018890526001600160a01b03808b1691908316907fe526c2818be85606ab8e0ea3f317c198ef15baabbb4430bcf2d836eed3c7769b9060600160405180910390a35060019b9a5050505050505050505050565b60005b838110156129c15781810151838201526020016129a9565b50506000910152565b60208152600082518060208401526129e98160408501602087016129a6565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461189357600080fd5b60008060408385031215612a2757600080fd5b612a30836129fd565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a7d57612a7d612a3e565b604052919050565b600067ffffffffffffffff821115612a9f57612a9f612a3e565b5060051b60200190565b600082601f830112612aba57600080fd5b81356020612acf612aca83612a85565b612a54565b82815260059290921b84018101918181019086841115612aee57600080fd5b8286015b84811015612b095780358352918301918301612af2565b509695505050505050565b600082601f830112612b2557600080fd5b81356020612b35612aca83612a85565b82815260059290921b84018101918181019086841115612b5457600080fd5b8286015b84811015612b0957803560ff81168114612b725760008081fd5b8352918301918301612b58565b600082601f830112612b9057600080fd5b81356020612ba0612aca83612a85565b82815260059290921b84018101918181019086841115612bbf57600080fd5b8286015b84811015612b0957612bd4816129fd565b8352918301918301612bc3565b600080600080600080600080610100898b031215612bfe57600080fd5b883567ffffffffffffffff80821115612c1657600080fd5b612c228c838d01612aa9565b995060208b0135915080821115612c3857600080fd5b612c448c838d01612aa9565b985060408b0135915080821115612c5a57600080fd5b612c668c838d01612b14565b975060608b0135915080821115612c7c57600080fd5b612c888c838d01612b7f565b965060808b0135915080821115612c9e57600080fd5b612caa8c838d01612aa9565b955060a08b0135915080821115612cc057600080fd5b612ccc8c838d01612aa9565b945060c08b0135915080821115612ce257600080fd5b612cee8c838d01612aa9565b935060e08b0135915080821115612d0457600080fd5b50612d118b828c01612aa9565b9150509295985092959890939650565b60008060008060008060c08789031215612d3a57600080fd5b863567ffffffffffffffff80821115612d5257600080fd5b818901915089601f830112612d6657600080fd5b8135602082821115612d7a57612d7a612a3e565b612d8c601f8301601f19168201612a54565b92508183528b81838601011115612da257600080fd5b81818501828501376000818385010152829950612dc0818c016129fd565b999c999b505050506040880135976060810135976080820135975060a09091013595509350505050565b600080600060608486031215612dff57600080fd5b612e08846129fd565b9250612e16602085016129fd565b9150604084013590509250925092565b600060208284031215612e3857600080fd5b612e41826129fd565b9392505050565b600060208284031215612e5a57600080fd5b5035919050565b60008060408385031215612e7457600080fd5b612e7d836129fd565b9150612e8b602084016129fd565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612ed257612ed2612eaa565b5060010190565b8181038181111561092057610920612eaa565b8082018082111561092057610920612eaa565b60008451612f118184602089016129a6565b9190910192835250602082015260400191905056fea164736f6c6343000814000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "_owner": "address The address which owns the funds.",
          "_spender": "address The address which will spend the funds."
        },
        "returns": {
          "_0": "A uint256 specifying the amount of tokens still available for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_value": "The amount of tokens to be spent."
        },
        "returns": {
          "_0": "boolean"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "_addr": "The address to query the the balance of."
        },
        "returns": {
          "_0": "An uint256 representing the amount owned by the passed address."
        }
      },
      "betaDelegatedTransfer(bytes,address,uint256,uint256,uint256,uint256)": {
        "details": "Performs a transfer on behalf of the from address, identified by its signature on the delegatedTransfer msg. Splits a signature byte array into r,s,v for convenience.",
        "params": {
          "deadline": "a block number after which the pre-signed transaction has expired.",
          "fee": "an optional ERC20 fee paid to the executor of betaDelegatedTransfer by the from address.",
          "seq": "a sequencing number included by the from address specific to this contract to protect from replays.",
          "sig": "the signature of the delgatedTransfer msg.",
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "betaDelegatedTransferBatch(bytes32[],bytes32[],uint8[],address[],uint256[],uint256[],uint256[],uint256[])": {
        "details": "Performs an atomic batch of transfers on behalf of the from addresses, identified by their signatures. Lack of nested array support in arguments requires all arguments to be passed as equal size arrays where delegated transfer number i is the combination of all arguments at index i",
        "params": {
          "deadline": "block numbers after which the pre-signed transactions have expired.",
          "fee": "optional ERC20 fees paid to the delegate of betaDelegatedTransfer by the from address.",
          "r": "the r signatures of the delgatedTransfer msg.",
          "s": "the s signatures of the delgatedTransfer msg.",
          "seq": "sequencing numbers included by the from address specific to this contract to protect from replays.",
          "to": "The addresses to transfer to.",
          "v": "the v signatures of the delgatedTransfer msg.",
          "value": "The amounts to be transferred."
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "claimOwnership()": {
        "details": "Allows the proposed owner to complete transferring control of the contract to the proposedOwner."
      },
      "decreaseSupply(uint256)": {
        "details": "Decreases the total supply by burning the specified number of tokens from the supply controller account.",
        "params": {
          "_value": "The number of tokens to remove."
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "disregardProposeOwner()": {
        "details": "Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner"
      },
      "freeze(address)": {
        "details": "Freezes an address balance from being transferred.",
        "params": {
          "_addr": "The new address to freeze."
        }
      },
      "increaseSupply(uint256)": {
        "details": "Increases the total supply by minting the specified number of tokens to the supply controller account.",
        "params": {
          "_value": "The number of tokens to add."
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "initialize()": {
        "details": "sets 0 initials tokens, the owner, and the supplyController. this serves as the constructor for the proxy but compiles to the memory model of the Implementation contract."
      },
      "initializeDomainSeparator()": {
        "details": "To be called when upgrading the contract using upgradeAndCall to add delegated transfers"
      },
      "isFrozen(address)": {
        "details": "Gets whether the address is currently frozen.",
        "params": {
          "_addr": "The address to check if frozen."
        },
        "returns": {
          "_0": "A bool representing whether the given address is frozen."
        }
      },
      "isWhitelistedBetaDelegate(address)": {
        "details": "Gets whether the address is currently whitelisted for betaDelegateTransfer.",
        "params": {
          "_addr": "The address to check if whitelisted."
        },
        "returns": {
          "_0": "A bool representing whether the given address is whitelisted."
        }
      },
      "nextSeqOf(address)": {
        "details": "returns the next seq for a target address. The transactor must submit nextSeqOf(transactor) in the next transaction for it to be valid. Note: that the seq context is specific to this smart contract.",
        "params": {
          "target": "The target address."
        },
        "returns": {
          "_0": "the seq."
        }
      },
      "pause()": {
        "details": "called by the owner to pause, triggers stopped state"
      },
      "proposeOwner(address)": {
        "details": "Allows the current owner to begin transferring control of the contract to a proposedOwner",
        "params": {
          "_proposedOwner": "The address to transfer ownership to."
        }
      },
      "reclaimUSDZ()": {
        "details": "Reclaim all USDZ at the contract address. This sends the USDZ tokens that this contract add holding to the owner. Note: this is not affected by freeze constraints."
      },
      "setAssetProtectionRole(address)": {
        "details": "Sets a new asset Protection role address.",
        "params": {
          "_newAssetProtectionRole": "The new address allowed to freeze/unfreeze addresses and seize their tokens."
        }
      },
      "setBetaDelegateWhitelister(address)": {
        "details": "Sets a new betaDelegate whitelister.",
        "params": {
          "_newWhitelister": "The address allowed to whitelist betaDelegates."
        }
      },
      "setSupplyController(address)": {
        "details": "Sets a new supply controller address.",
        "params": {
          "_newSupplyController": "The address allowed to burn/mint tokens to control supply."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token to a specified address from msg.sender Note: the use of Safemath ensures that _value is nonnegative.",
        "params": {
          "_to": "The address to transfer to.",
          "_value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "_from": "address The address which you want to send tokens from",
          "_to": "address The address which you want to transfer to",
          "_value": "uint256 the amount of tokens to be transferred"
        },
        "returns": {
          "_0": "boolean"
        }
      },
      "unfreeze(address)": {
        "details": "Unfreezes an address balance allowing transfer.",
        "params": {
          "_addr": "The new address to unfreeze."
        }
      },
      "unpause()": {
        "details": "called by the owner to unpause, returns to normal state"
      },
      "unwhitelistBetaDelegate(address)": {
        "details": "Unwhitelists an address to disallow calling BetaDelegatedTransfer.",
        "params": {
          "_addr": "The new address to whitelist."
        }
      },
      "whitelistBetaDelegate(address)": {
        "details": "Whitelists an address to allow calling BetaDelegatedTransfer.",
        "params": {
          "_addr": "The new address to whitelist."
        }
      },
      "wipeFrozenAddress(address)": {
        "details": "Wipes the balance of a frozen address, burning the tokens and setting the approval to zero.",
        "params": {
          "_addr": "The new frozen address to wipe."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "The constructor is used here to ensure that the implementation contract is initialized. An uncontrolled implementation contract might lead to misleading state for users who accidentally interact with it."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20093,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20097,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20099,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "_totalSupply_",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20114,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "allowed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20116,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 20118,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "proposedOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 20121,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 20123,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "assetProtectionRole",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 20127,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "frozen",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20129,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "supplyController",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 20131,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "betaDelegateWhitelister",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 20135,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "betaDelegateWhitelist",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20139,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "nextSeqs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20154,
        "contract": "contracts/zUSD4.sol:ZetherUSDImplementation",
        "label": "EIP712_DOMAIN_HASH",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}